<ResourceDictionary 
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <!-- Internal CAT styles -->
    <!-- Slightly modified default Aero ComboBox style captured using Blend -->
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}" >
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <!-- <Themes:ButtonChrome x:Name="Chrome" 
                                         SnapsToDevicePixels="true" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        RenderPressed="{TemplateBinding IsPressed}" > -->
                        <Border Name="border"
                            BorderThickness="1"
                            Padding="{TemplateBinding Padding}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}" >
                            <Grid x:Name="grid" HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                            <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="{Binding DataContext.CurrentTheme.ComboBoxForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" 
                                  HorizontalAlignment="Center" Margin="3,1,0,0" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                    <!-- </Themes:ButtonChrome> -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Arrow" Property="Fill" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="border" Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <!-- <Setter TargetName="grid" Property="IsEnabled" Value="False" />
                            <Setter TargetName="grid" Property="Background" Value="Purple" />
                            -->
                            <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        <GradientStop Color="#ABADB3" Offset="0.05"/>
        <GradientStop Color="#E2E3EA" Offset="0.07"/>
        <GradientStop Color="#E3E9EF" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}" >
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <!--
                    <Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RoundCorners="false" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                     -->
                    <Border Name="border" 
                            BorderThickness="1"
                            Padding="{TemplateBinding Padding}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}" >
                        <Path x:Name="Arrow" Data="{StaticResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
                        </Border>
                    <!-- </Themes:ButtonChrome> -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter   Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="border" Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Arrow" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="border" Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="Placement" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Themes:SystemDropShadowChrome>
            </Popup>
            <Themes:ListBoxChrome x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"/>
            <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="true">
                <Setter Property="RenderFocused" TargetName="Border" Value="true"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Theme styles available to modules -->
    <Style x:Key="ThemeComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" >
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Themes:SystemDropShadowChrome>
                        </Popup>

                        <ToggleButton x:Name="toggle"
                                      Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                       BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}"
                        Style="{StaticResource ComboBoxReadonlyToggleButton}" />
                        
                        <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                            <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                            <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                            <Setter TargetName="toggle" Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
            </Trigger>
            <Trigger Property="IsMouseOver"  Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxForegroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxBackgroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorder}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="3"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThemeComboBoxItemStyle" TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ComboBoxItemForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ComboBoxItemBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
    </Style>

    <Style x:Key="ThemeTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TextBoxForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.TextBoxBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
    </Style>

    <Style x:Key="ThemeTabControlStyle" TargetType="TabControl" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabControlForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Mode=TwoWay }" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Mode=TwoWay }" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <TabPanel x:Name="HeaderPanel"
                              Grid.Row="0"
                              Panel.ZIndex="1"
                              Margin="0,0,4,-1"
                              IsItemsHost="True"
                              KeyboardNavigation.TabIndex="1"
                              />

                        <Border x:Name="Border"
                            Grid.Row="1"
                            BorderThickness="1"
                            KeyboardNavigation.TabNavigation="Local"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2"
                            Background="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Mode=TwoWay }" 
                            BorderBrush="{Binding DataContext.CurrentTheme.TabControlBorderColor, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}, Mode=TwoWay }"
                            >
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                          Margin="4"
                                          ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThemeTabItemStyle" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabItemForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Name="Border"
                        Margin="0,0,-4,0"
                        Background="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"
                        BorderBrush="{Binding DataContext.CurrentTheme.TabItemBorderColorBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }"
                        BorderThickness="1,1,1,1"
                        CornerRadius="3,3,0,0">
                            <ContentPresenter x:Name="ContentSite"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            ContentSource="Header"
                            Margin="12,2,12,2"
                            RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter Property="Background"  Value="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="Background"  Value="{Binding DataContext.CurrentTheme.TabControlBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DataContext.CurrentTheme.TabItemBorderColor, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabItemForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Panel.ZIndex" Value="90" />
                            <Setter Property="Background"  Value="{Binding DataContext.CurrentTheme.TabItemBackgroundDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="Background"  Value="{Binding DataContext.CurrentTheme.TabItemBackgroundDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DataContext.CurrentTheme.TabItemBorderColorDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabItemForegroundDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background"  Value="{Binding DataContext.CurrentTheme.TabItemBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="Background"  Value="{Binding DataContext.CurrentTheme.TabItemBackgroundDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DataContext.CurrentTheme.TabItemBorderColor, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabItemForegroundDeselected, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.TabItemForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window} }" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThemeButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{Binding DataContext.CurrentTheme.ButtonCornerRadius, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" >
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="BorderThickness" Value="{Binding DataContext.CurrentTheme.ButtonBorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Padding" Value="{Binding DataContext.CurrentTheme.ButtonPadding, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsPressed"  Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThemeButtonStyle2" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{Binding DataContext.CurrentTheme.ButtonCornerRadius2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" >
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForeground2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackground2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="BorderThickness" Value="{Binding DataContext.CurrentTheme.ButtonBorderThickness2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Padding" Value="{Binding DataContext.CurrentTheme.ButtonPadding2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundMouseOver2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundMouseOver2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsPressed"  Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundPressed2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundPressed2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ButtonForegroundDisabled2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ButtonBackgroundDisabled2, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThemeToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Name="border" 
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{Binding DataContext.CurrentTheme.ToggleButtonCornerRadius, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" >
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ToggleButtonForeground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ToggleButtonBackground, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="BorderThickness" Value="{Binding DataContext.CurrentTheme.ToggleButtonBorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Setter Property="Padding" Value="{Binding DataContext.CurrentTheme.ToggleButtonPadding, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ToggleButtonForegroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ToggleButtonBackgroundMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsPressed"  Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ToggleButtonForegroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ToggleButtonBackgroundPressed, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsEnabled"  Value="False">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ToggleButtonForegroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ToggleButtonBackgroundDisabled, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
            <Trigger Property="IsChecked"  Value="True">
                <Setter Property="Foreground" Value="{Binding DataContext.CurrentTheme.ToggleButtonForegroundChecked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                <Setter Property="Background" Value="{Binding DataContext.CurrentTheme.ToggleButtonBackgroundChecked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Non-theme styles available to modules -->
    <Style TargetType="Border" x:Key="InstructionsBorderStyle">
        <Setter Property="BorderBrush" Value="#FF828790" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style TargetType="TextBlock" x:Key="TitleFieldStyle">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Black" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="TextAlignment" Value="Center" />
    </Style>

</ResourceDictionary>
