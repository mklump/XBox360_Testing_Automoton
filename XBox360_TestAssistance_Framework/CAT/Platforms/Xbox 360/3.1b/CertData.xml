<?xml version="1.0" encoding="utf-8" ?>
<Tables xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>1</tcr_id>
<last_updated>5/21/2009</last_updated>
<short_description>BAS Game Stability</short_description>
<requirements>
&lt;p&gt;
On a functional console, the game must not enter an extended unresponsive state, cause unintentional loss of player data,
crash, or cause an unintended reboot of the machine.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Console game players expect that console games just work. Games that crash or hang or lose player progress reflect poorly
on the Xbox 360 experience.
&lt;/p&gt;
</intent>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>2</tcr_id>
<last_updated>40431</last_updated>
<short_description>BAS Basic Console Support</short_description>
<requirements>&lt;p&gt;Titles must be playable on the most basic retail console configuration.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;The Xbox 360 program provides choices to console purchasers, including
the choice to purchase entry-level systems. Consumers expect that games on
Xbox 360 will work regardless of what components are attached to the console.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;A title may provide additional functionality and optimizations—for
example, faster loading, career modes, and in-game saved pictures—when
additional components are available.&lt;/p&gt;

&lt;p&gt;Titles are permitted to require a profile in order to enter gameplay.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;Titles are allowed to require the Kinect Sensor.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>6</tcr_id>
<last_updated>38512</last_updated>
<short_description>BAS Non-Interactive Pause</short_description>
<requirements>
&lt;p&gt;
Games must not pause without game-representative on-screen graphics. When the pause time is greater than five seconds, the game must
indicate the reason and provide on-screen animation.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Console game players expect that console games just work. Games that are perceived to crash or hang or lose player progress reflect
poorly on the Xbox 360 experience.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;
An on-screen display consisting of a single color or band of colors does not meet the requirement of on-screen graphics. For on-screen
animations, a single color background is allowed.
&lt;/p&gt;
&lt;p&gt;It is not required for an on-screen animation to show actual rate or remaining time.&lt;/p&gt;
&lt;p&gt;This requirement does not apply to player-initiated pause states.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>8</tcr_id>
<last_updated>40583</last_updated>
<short_description>BAS XDK Version</short_description>
<requirements>
&lt;p&gt;All XDK libraries linked with a game must belong to the same XDK release.
All XDK libraries, all CRT libraries, the XDK compiler, and the XDK linker must be
approved for release with the title.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Approved XDK libraries and tools undergo extensive integrity testing as a unit.
Security and integrity cannot be guaranteed across library and tool versions.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The most recent and approved library or tools update, or QFE, for an XDK version
is considered to be part of a specific XDK release.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;•Re-releasing a game built on a now-expired XDK is permissible as long as the latest QFE has been applied.
  •Titles based on the XNA framework and its associated expired libraries are exempt from this requirement.
  •Demos using code from a title that has already received an exception are exempt from this requirement. &lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>11</tcr_id>
<last_updated>41194</last_updated>
<short_description>BAS Personal Information</short_description>
<requirements>
&lt;p&gt;Games must not request, store, or transmit any player's personal information, including, but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information that could be used to cause financial damage to a player (social security or credit card numbers, for example).&lt;/li&gt;
&lt;li&gt;Information that divulges a player's address.&lt;/li&gt;
&lt;li&gt;Information that divulges a player's height, weight, age, and/or gender (HWAG).&lt;/li&gt;
&lt;li&gt;Information that would allow a player to impersonate another player online.&lt;/li&gt;
&lt;li&gt;Player account credentials.&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>&lt;p&gt;Protect private consumer information.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Player account credentials include Windows Live ID, password, secret question, secret answer, Xbox LIVE pass code, and so on.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Address&lt;/i&gt; is any information that can identify a user's location to the level of city or town.
This includes but is not limited to the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;physical address&lt;/li&gt;
&lt;li&gt;mailing address&lt;/li&gt;
&lt;li&gt;billing address&lt;/li&gt;
&lt;li&gt;zip code&lt;/li&gt;
&lt;li&gt;IP address or related information&lt;/li&gt;
&lt;li&gt;geographical location information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For details on how to handle Location Service data, read
&lt;a href="https://developer.xboxlive.com/en-us/live/publishing/businesspolicies/Documents/TitleUsageDataSharingPolicy.docx"&gt;Policy: Title Usage Sharing&lt;/a&gt;
on Game Developer Network.&lt;/p&gt;
</remarks>
<exemptions>
    •Fitness-focused titles that require a user’s height, weight, age, and gender to provide more targeted and accurate results are allowed to request and store the information as long as the data is stored only on the local Xbox.
    •Use of IP address to define location for leaderboard filtering (no lower than state or country level) is allowed.
    •Account linking of login and password information for related community sites specific to the game is acceptable as long as it is not a requirement for playing the game.
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>14</tcr_id>
<last_updated>38512</last_updated>
<short_description>BAS Debug Output</short_description>
<requirements>&lt;p&gt;Games must not output debug information via the network, on-screen messages, or a file on any storage device.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Output of game debug and/or testing information in any medium can jeopardize the security of the platform, and risk
customer privacy. Consumers expect that the game console will not store or transmit hidden data that is not otherwise
relevant to the gameplay experience.
&lt;/p&gt;
</intent>
<remarks>&lt;p&gt;Games must not call the &lt;b&gt;OutputDebugString&lt;/b&gt; function in retail builds.&lt;/p&gt;</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Base Requirements (BAS)</category>
<tcr_id>15</tcr_id>
<last_updated>39173</last_updated>
<short_description>BAS Sign-in Changes</short_description>
<requirements>&lt;p&gt;Games must properly detect and handle player profiles signing in or out in all areas of the game.&lt;/p&gt;</requirements>
<intent>&lt;p&gt;The Xbox Guide allows players to sign in and out of player profiles at all times. Game state should always be associated with the correct profile.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;
Players may sign in or out at any time via the Xbox Guide. The console issues an XN_SYS_SIGNINCHANGED system notification
when this occurs. In addition, games may consult the &lt;b&gt;XUserGetSigninState&lt;/b&gt; function. It is sufficient to
return to the main menu if the game cannot update its game state to match the new sign-in state.
&lt;/p&gt;
&lt;p&gt;
Players may also be signed out of Xbox LIVE because of a duplicate sign-in. Single-player modes that do not rely on Xbox LIVE
services can generally ignore Xbox LIVE sign-in changes.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Video and Graphics (VID)</category>
<tcr_id>22</tcr_id>
<last_updated>40381</last_updated>
<short_description>VID System UI Frame Rate</short_description>
<requirements>
&lt;p&gt;Games must ensure that system UI can be rendered at least every
66 milliseconds in all areas of the game for any display mode.&lt;/p&gt;

&lt;p&gt;In all areas of Kinect-enabled titles where a player is using his or her
body to control the title and the player is not holding a controller, the
title must ensure that system UI can be rendered at least every
33 milliseconds.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The Xbox 360 console is designed to provide real-time system notifications
to the player, and the Xbox Guide may also be activated at any time. In order
for the platform to remain responsive when activating the Xbox Guide or displaying
notifications, the game will need to yield the graphics processor periodically.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;One way of meeting the requirement is calling
&lt;b&gt;IDirect3DDevice9::Present&lt;/b&gt;
at least once every 66 milliseconds (15 times per second) or once every
33 milliseconds (30 times per second) for Kinect-enabled titles.&lt;/p&gt;

&lt;p&gt;Titles that output to 50-Hz displays must ensure that system UI can be
rendered at least every 83 milliseconds (12 times per second), or once
every 40 milliseconds (25 times per second) for Kinect-enabled titles.&lt;/p&gt;

&lt;p&gt; Another way of meeting this requirement during load screens is by using the
&lt;b&gt;IDirect3DDevice9::Suspend&lt;/b&gt; and
&lt;b&gt;IDirect3DDevice9::Resume&lt;/b&gt; methods.&lt;/p&gt;

&lt;p&gt;In Kinect-enabled titles, players can use gestures to control Xbox Guide
interaction. Smooth natural input interaction with the Guide requires more
frequent input from the skeletal tracking layer.&lt;/p&gt;

&lt;p&gt;For related requirements, see &lt;b&gt;TCR 153&lt;/b&gt;,
&lt;i&gt;NUI Kinect System UI&lt;/i&gt;.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Video and Graphics (VID)</category>
<tcr_id>117</tcr_id>
<last_updated>38743</last_updated>
<short_description>VID Video Mode Support</short_description>
<requirements>
&lt;p&gt;Games must support all video output packs, modes, and resolutions. Games must not
have dependencies on any video output packs, modes, or resolutions.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players expect any Xbox 360 titles to be compatible with any video output pack,
video resolution, or video mode supported by the console now and in the future.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games should not assume that the video output packs, modes, and resolutions
currently available are the only ones that the platform will ever support. For
example, VGA mode could be updated in the future to support other resolutions, or
additional video packs could be added.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;PAL 50 is not required.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Video and Graphics (VID)</category>
<tcr_id>167</tcr_id>
<last_updated>40689</last_updated>
<short_description>VID Stereoscopic 3D</short_description>
<requirements>
&lt;p&gt;Titles that support stereoscopic 3D must provide a 720p frame-packed mode.&lt;/p&gt;

&lt;p&gt;Titles must also ensure the active space regions have a constant pixel value
for each frame while in this mode.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Ensures compatibility with the Xbox Guide and system UI, as well as
compliance by the title and platform with the HDMI specification.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;This TCR is not required for 2D modes or non-HDMI interfaces. Titles are
allowed to support additional 3D modes.&lt;/p&gt;

&lt;p&gt;Titles support 720p frame-packed mode by creating a Direct3D device or by
resetting an existing device using the D3DPRESENTFLAG_STEREOSCOPIC_720P_60HZ
presentation flag.&lt;/p&gt;

&lt;p&gt;The HDMI specification requires that stereoscopic 3D &lt;i&gt;active space&lt;/i&gt;
regions must always have constant pixel values. Details about the HDMI specification
are included in "Stereoscopic 3D for Xbox 360," a white paper.&lt;/p&gt;

&lt;p&gt;The Xbox hardware-based scaler causes bleed through into the active space on
upscale, thereby violating this requirement. As a result, titles must set sufficient
padding to prevent bleeding in the active space.&lt;/p&gt;

&lt;p&gt;Testers can use API Monitor (APIMon) to check this error condition. Direct3D
displays a validation error for stereoscopic 3D in debug output if pixel values are
not constant.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Video and Graphics (VID)</category>
<tcr_id>185</tcr_id>
<last_updated>40956</last_updated>
<short_description>VID PlayReady License Acquisition</short_description>
<requirements>&lt;p&gt;Titles that use PlayReady must use SSL to acquire PlayReady licenses.&lt;/p&gt;</requirements>
<intent>Ensures that PlayReady licenses that are obtained over the Internet are secure.</intent>
<remarks>
&lt;p&gt;Titles meet this requirement by ensuring that all URLs used for PlayReady license
acquisition are over HTTPS.&lt;/p&gt;

&lt;p&gt;The URL for the title's PlayReady license can be set through the title's
Network Access Control List on Game Developer Network.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Audio (AUD)</category>
<tcr_id>24</tcr_id>
<last_updated>38835</last_updated>
<short_description>AUD Background Music</short_description>
<requirements>&lt;p&gt;Games must not play their own background music if the player has enabled music playback in the Xbox Guide or Xbox Dashboard.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
The Xbox 360 console is designed to allow player customization of the gameplay experience. Players expect to hear the music
they have selected regardless of whether they are navigating in the Xbox Dashboard or playing a game.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Generally, background music is anything that would normally be connected to a game's background music volume setting.&lt;/p&gt;
&lt;p&gt;Games may use the XACT tool and/or XAudio2 APIs to meet this requirement.&lt;/p&gt;
&lt;p&gt;Music playback in the Xbox Guide and Xbox Dashboard are not enabled by default and must be enabled by the player.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;
Games that contain non-interactive FMV sequences where it is not possible to separate the background music from the remainder of the
game's audio, such as movie sequences shown during title startup, are allowed to use the
&lt;b&gt;XMPOverrideBackgroundMusic&lt;/b&gt;
function during such sequences.&lt;/p&gt;
&lt;/p&gt;Games that are fundamentally rhythm-based or music-based are exempt from this requirement and may use the X
&lt;b&gt;XMPOverrideBackgroundMusic&lt;/b&gt;
function.&lt;/p&gt;
&lt;b&gt;Games that include rhythm-based or music-based sections are allowed to use the 
&lt;b&gt;XMPOverrideBackgroundMusic&lt;/b&gt;
function during those sections.&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>User Interface (UI)</category>
<tcr_id>28</tcr_id>
<last_updated>39173</last_updated>
<short_description>UI Official Naming Standards</short_description>
<requirements>
&lt;p&gt;
Games must use the naming standards defined in the latest release of the terminology list. Games must not specifically refer
to components of the video game system or components of peripherals that are not listed in the terminology list.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Using standard terminology provides consistency from game to game. Once players learn a standard term, they expect that the term
will mean the same thing in the next game they play.
&lt;/p&gt;
</intent>
</TCRDefinition>
<TCRDefinition>
<category>User Interface (UI)</category>
<tcr_id>29</tcr_id>
<last_updated>38512</last_updated>
<short_description>UI Error Messaging</short_description>
<requirements>
&lt;p&gt;
When an error prevents a game from performing a task dictated by the player or expected under normal gameplay, the game must
display a user-friendly message that addresses the error. The game must transparently handle software errors that are not relevant
to gameplay.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Game players want to play games, not debug game errors. Support costs are reduced for the game publisher and Microsoft when error messages
are user-friendly to players.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;
Examples of descriptions that are not user-friendly include technical information, such as error codes, module names, network addresses,
and debug traces. For example:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-friendly: "Your profile is no longer available."&lt;/li&gt;
&lt;li&gt;Not user-friendly: "ERROR 0x80001553 - ACCESS NOT AVAILABLE"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In situations in which the player must take action as a result of the error, the message must include information or instructions that
help the player correct the problem.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>User Interface (UI)</category>
<tcr_id>30</tcr_id>
<last_updated>39173</last_updated>
<short_description>UI Confirmation of Destructive Actions</short_description>
<requirements>
&lt;p&gt;
Games must obtain positive confirmation of player intent before performing actions that will result in loss of player data or game state.
Confirmation must consist of both of the following: (1) an on-screen message indicating the consequence of the impending action, and (2) the
actions the player must take to confirm or cancel the action.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Prevent unintentional or accidental loss of player data or game state, which can represent hours or days of accomplishment. Loss of that
data can be devastating to players.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Destructive actions include, but are not limited to, deleting and overwriting saved games, exiting game sessions, and loading saved games in mid-play.&lt;/p&gt;
&lt;p&gt;Auto-saving does not require a confirmation of destructive actions message.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>User Interface (UI)</category>
<tcr_id>169</tcr_id>
<last_updated>40763</last_updated>
<short_description>UI Social Network Sharing</short_description>
<requirements>
&lt;p&gt;Titles that use the social network posting service, to share with social
networks through Xbox LIVE, must do the following:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Provide an option in the UI to share content.&lt;/li&gt;

&lt;li&gt;Only post in response to user-initiated action within the title.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;If the social network publishing service is not available, the title must
hide the ability to post from the user.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Users expect to have control over which posts are shared with social networks.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Titles meet this requirement by providing an option in the UI, such
as a button press or a menu selection, to allow a user to post to a social
network.&lt;/p&gt;

&lt;p&gt;Titles call the &lt;b&gt;XSocialPost&lt;/b&gt;
API to post to a social network. Titles call
&lt;b&gt;XSocialGetCapabilities&lt;/b&gt;
to check whether the publishing service is available.&lt;/p&gt;

&lt;p&gt;Titles must not post to social networks automatically or without the
user explicitly choosing to share a post.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>146</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Manual Sensor Adjustment</short_description>
<requirements>
&lt;p&gt;Titles must not require the player to manually move, reposition, or rotate
the Xbox 360 Kinect Sensor to facilitate gameplay.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The sensor array is designed to be used from a single location that is
adjacent to the display device. The immersive experience is broken if titles
oblige the player to touch or move the sensor array.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Positioning the sensor array is established by the system when the player
initially sets up the device.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>147</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Playable Distance</short_description>
<requirements>
&lt;p&gt;Titles must be playable by a single player up to 183 cm in height
and standing 180 cm from the Xbox 360 Kinect Sensor.&lt;/p&gt;

&lt;p&gt;Titles that support two players at the same time must be playable
by two players up to 183 cm in height and standing 250 cm
from the Kinect Sensor.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Maximize the number of play spaces where users can have an enjoyable experience.
Players never need to worry about adjusting the Kinect Sensor, and they
only need to learn their gameplay "sweet spot" once. Guidance
for consumers about play spaces can be presented clearly and consistently.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;This requirement applies to titles that are using the Kinect Sensor for
skeletal tracking, depth, or speech recognition during game play.&lt;/p&gt;

&lt;p&gt;The Xbox 360 system establishes a recommended location and camera
angle when the player initially sets up the Kinect Sensor. Players can always
reestablish the preferred location and angle in the NUI Tuner or Xbox
Dashboard. This level of standardization provides all titles with a
consistent play space where the majority of players have the best experience
with the Kinect Sensor.&lt;/p&gt;

&lt;p&gt;The distance between the player and the sensor array is measured from the
front face of the sensor array to the front of the player.&lt;/p&gt;

&lt;p&gt;Titles may also adjust the tilt angle of the sensor array by using
&lt;b&gt;NuiCameraAdjustTilt&lt;/b&gt; in order
to best fit the player into the field of view.&lt;/p&gt;

&lt;p&gt;Additional resources (diagrams, ideal sensor positioning, player positions
based on height and player count) are available in
&lt;b&gt;Natural Environs: Understanding and Developing for the Kinect Play Space&lt;/b&gt;.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>151</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Local Preview</short_description>
<requirements>
&lt;p&gt;Titles that send data generated by the Xbox 360 Kinect Sensor to other players
or online services must display a real-time view of the outgoing data as
it will be displayed at the destination.&lt;/p&gt;

&lt;p&gt;Applicable data includes still images, video, depth, and skeletal/joint
information.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players should always understand when their likeness, body movements, or
gestures are displayed to others.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Titles can meet this requirement by providing the sending player a
view that shows how his or her actions appear to receiving players. This
view may be fully integrated into the title (for example, by titles with
a third-person perspective) or appear in a separate "preview" window (for
example, by titles with a first-person perspective).&lt;/p&gt;

&lt;p&gt;Titles may provide the sending player the option to deactivate the
self-preview, but the preview feature must be active by default.&lt;/p&gt;

&lt;p&gt;Titles that display a separate preview window are advised to use sizes
no smaller than 64×64 for standard definition TVs and 92×92
for high-definition TVs.&lt;/p&gt;

&lt;p&gt;The requirement does not apply to data that is solely used for triggering
pre-generated animations or behaviors. For example, in a driving title, a
sending player might use his or her arms to steer a car. If the receiving
player only sees the car, the requirement would not apply. If, however,
the receiving player can see the sending player's arms as the arms manipulate
the steering wheel, the requirement would apply.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>152</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Kinect Guide Access</short_description>
<requirements>
&lt;p&gt;Upon receiving the Guide gesture notification, titles must display
an interface that allows the player to invoke the Kinect Guide. The
Kinect Guide option must be directly accessible from the interface.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;For consistency from title to title, the Guide gesture allows players
to easily access the Guide—as well as common game options—by using
natural input. Players only need to learn this mechanism once.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The Guide gesture notification is XN_SYS_NUIPAUSE.&lt;/p&gt;

&lt;p&gt;Titles invoke the Kinect Guide by calling
&lt;b&gt;XShowNuiGuideUI&lt;/b&gt;. The
Kinect Guide should only be activated in response to player input.&lt;/p&gt;

&lt;p&gt;Titles may use the interface to display common game options, including
audio settings, visual settings, and other player preferences. We recommend
including an option to return to active gameplay.&lt;/p&gt;

&lt;p&gt;Titles may optionally pause upon receiving the notification.&lt;/p&gt;

&lt;p&gt;During non-interactive sections of the title (in-game menus, loading
screens, cut-scenes, and so on) where it is not possible for the game to
display an interface with an option to select the Kinect Guide, it is
acceptable for the title to directly invoke the Kinect Guide.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>154</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Title Interaction with Guide Gesture</short_description>
<requirements>
&lt;p&gt;A player must be able to trigger the Guide gesture notification in
all areas of a title where that player is not holding a controller,
except when that player is actively performing a title gesture.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players expect the Guide gesture to work in a consistent fashion across
all Xbox 360 Kinect experiences. However, players don't want to inadvertently
activate the Guide during game play.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The &lt;i&gt;Guide gesture&lt;/i&gt; activates the &lt;i&gt;title
interface&lt;/i&gt; which allows the user to access the Kinect Guide.
For details, see &lt;b&gt;TCR 152&lt;/b&gt;,
&lt;i&gt;NUI Kinect Guide Access&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The Guide gesture consists of the player standing in a neutral pose, holding
their right hand by their side, and holding their left arm fully outstretched
down and to the left at a 45 degree angle for a short period of time.&lt;/p&gt;

&lt;p&gt;The Guide icon, an on-screen indicator in the lower left corner of the display provides the
player with feedback on the time to activate the Guide gesture notification.&lt;/p&gt;

&lt;p&gt;Once the Guide gesture is performed for the appropriate amount of time, the
title receives the XN_SYS_NUIPAUSE notification.&lt;/p&gt;

&lt;p&gt;Recognition of the Guide gesture can be suspended temporarily by calling
&lt;b&gt;XNuiDelayUI&lt;/b&gt; to prevent interference with
in-progress title-based natural input.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>155</tcr_id>
<last_updated>40956</last_updated>
<short_description>NUI Reserved Grammar</short_description>
<requirements>
&lt;p&gt;Titles that use speech recognition must not use the following terms
in their grammar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xbox&lt;/li&gt;
&lt;li&gt;Kinect&lt;/li&gt;
&lt;li&gt;Bing&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;Players expect the reserved words to work in a consistent fashion
across all Xbox 360 experiences.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The reserved terms are the same across all languages.&lt;/p&gt;

&lt;p&gt;Titles must not use words that have the same definition in a speech recognition
grammar, or that start with the same definition, as a reserved term (for example,
&lt;i&gt;connect&lt;/i&gt; and &lt;i&gt;connection&lt;/i&gt;).&lt;/p&gt;

&lt;p&gt;The Xbox application manager (XAM) currently does not respond to speech. However,
subsequent versions may respond to speech. So, to enable this functionality across all
titles, these grammar definitions are being reserved for the system in advance.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;Titles are permitted to use the following terms for voice-enabled menu navigation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;Kinect Guide&lt;/dt&gt;
&lt;dd&gt;Titles invoke the Kinect Guide by calling
&lt;b&gt;XShowNuiGuideUI&lt;/b&gt;.&lt;/dd&gt;

&lt;dt&gt;Kinect Tuner&lt;/dt&gt;
&lt;dd&gt;Titles invoke the Kinect Tuner by calling
&lt;b&gt;XShowNuiTroubleshooterUI&lt;/b&gt;.&lt;/dd&gt;

&lt;/dl&gt;
&lt;/blockquote&gt;

&lt;p&gt;These terms may be localized for regions that are currently supported by NUI Speech.&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>156</tcr_id>
<last_updated>41194</last_updated>
<short_description>NUI Speech Recognition Language Support</short_description>
<requirements>
&lt;p&gt;Titles that support speech recognition must gracefully handle
scenarios where the title does not support the player's locale and
language.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Acoustic language models are tuned for locales and language. Players
expect to know when it's likely that they won't be able to control a
speech-enabled title by using the spoken word.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The console locale and language settings provide the strongest
indication of the language that the player uses to communicate with
the title. Titles can determine a console's locale and language by calling
&lt;b&gt;XGetLocale&lt;/b&gt; and
&lt;b&gt;XGetLanguage&lt;/b&gt;. Titles may cache
the player's preferred speech locale and language in the player profile.&lt;/p&gt;

&lt;p&gt;If the title does not support the player's preferred locale and language,
we recommend that the title disable speech and provide an alternate method to
play the title without speech input. The player does not need to be
notified.&lt;/p&gt;

&lt;p&gt;If the title does not provide an alternate method to play, or it
allows the user to re-enable speech, the title may allow the player to
choose a title-specific locale and language that is supported by the
title. However, titles must notify the player that his or her experience
might not be optimal.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>165</tcr_id>
<last_updated>40583</last_updated>
<short_description>NUI Biometric Sign-In</short_description>
<requirements>
&lt;p&gt;Titles must support biometric sign-in for any player who starts or
joins the game via skeletal tracking, if the title supports a profile
for that player and does not already know which profile to use.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Biometric sign-in relies on the title's use of the identity system. Identity
enrollment provides players with consistent sign-in of profiles across all
Xbox 360 experiences.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;To support biometric sign-in for a player, the title must make at least
one attempt to enroll the player's skeleton when the player shows intent to
play if there is a biometric profile match available.&lt;/p&gt;

&lt;p&gt;The minimum requirement is for the title to attempt biometric sign-in
for as many profiles as your game supports. A game is said to support a
player profile if the title performs profile-related actions to a signed
in profile, such as awarding achievements, saving game progress, and so on.&lt;/p&gt;

&lt;p&gt;In some cases, when a new skeleton steps into view, the title already
knows which profile to use without having to run
&lt;b&gt;NuiIdentity&lt;/b&gt; to identify the
player. This is typically the case if a specific turn, side of the play space,
or some other context is strongly associated with a profile. In this situation,
the title does not have to attempt biometric sign-in for new skeletons.&lt;/p&gt;

&lt;p&gt;For titles that support both controller and skeletal input, if a player
initially signs in with a controller, biometric sign-in of that player is
not required during skeletal tracking portions of the title. If the skeletal
tracking portions support additional players joining and signing in,
biometric sign-in must be supported for those additional players.&lt;/p&gt;

&lt;p&gt;Titles typically attempt biometric sign-in of a player as soon as they
detect intent to play from a specific skeleton. For many titles, intent to
play will be indicated in the UI before gameplay starts.&lt;/p&gt;

&lt;p&gt;There are two ways to attempt an enrollment for biometric sign-in.&lt;/p&gt;

&lt;p&gt;The first is by enabling automatic identity mode by using the
AUTOMATIC_IDENTITY flag when calling
&lt;b&gt;NuiInitialize&lt;/b&gt; and by calling
&lt;b&gt;NuiIdentityDetectedIntentToPlay&lt;/b&gt;
on new skeletons that show intent to play.&lt;/p&gt;

&lt;p&gt;The second is by calling
&lt;b&gt;NuiIdentityIdentify&lt;/b&gt; and
&lt;b&gt;NuiIdentityEnroll&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;If you chose to call &lt;b&gt;NuiIdentityIdentify&lt;/b&gt;,
the following rules apply:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Skeletons that are identified as UNKNOWN and have a profile match available
(&lt;b&gt;bProfileMatched&lt;/b&gt; set to TRUE) can be immediately enrolled. Note that
&lt;b&gt;NuiIdentityDetectedIntentToPlay&lt;/b&gt;
handles this for you and will only enroll a player when these conditions are met.&lt;/li&gt;

&lt;li&gt;Skeletons that are identified as UNKNOWN and do not have a profile match available
(&lt;b&gt;bProfileMatched&lt;/b&gt; set to FALSE) must not be enrolled without first providing
feedback and a correction opportunity to the user (see
&lt;b&gt;TCR 158&lt;/b&gt;,
&lt;i&gt;NUI Identity Player Feedback&lt;/i&gt;).&lt;/li&gt;

&lt;li&gt;If the player is already enrolled, the title must not force enrollment of the player,
except as the direct result of the player correcting his or her identity.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;If an identity operation cannot be completed due to quality issues, no further
action is required for that skeleton.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>158</tcr_id>
<last_updated>40583</last_updated>
<short_description>NUI Identity Player Feedback</short_description>
<requirements>
&lt;p&gt;Prior to taking the first profile-related action based on the result
of an identification operation, the title must visually indicate the
identification result to the player and provide him or her with a way
to correct the result.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The identity system can sometimes misidentify a player. If this happens,
the player needs to be informed and empowered to fix the problem before any
negative results occur.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Titles initiate an identification operation by calling
&lt;b&gt;NuiIdentityIdentify&lt;/b&gt;.
Titles will typically only call this function when they detect that an
unidentified skeleton has stepped into view and is attempting to interact
with the title. If a title has automatic identification enabled,
&lt;b&gt;NuiIdentityIdentify&lt;/b&gt; is called
automatically whenever a new skeleton steps into view. Automatic identification
makes it easier to implement identity in a title, and can be enabled by passing
the AUTOMATIC_IDENTITY flag during &lt;b&gt;NuiInitialize&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;The title is required to provide feedback and a correction
opportunity for situations where the result of a misidentification
would have an effect on a player's profile data or the player's
association with their profile. Examples of profile-related actions
include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enrolling an unknown skeleton as a new player when the
identification call does not indicate that a biometric match
is available (&lt;b&gt;bProfileMatched&lt;/b&gt; is FALSE).&lt;/li&gt;
&lt;li&gt;Awarding an achievement.&lt;/li&gt;
&lt;li&gt;Saving game progress.&lt;/li&gt;
&lt;li&gt;Updating Rich Presence.&lt;/li&gt;
&lt;li&gt;Writing to Xbox LIVE storage.&lt;/li&gt;
&lt;li&gt;Writing to a leaderboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Communication of the result can take many forms, and it is up to
developers to choose the form most appropriate for their titles.
Titles will typically use an asset that was associated with the player
when he or she was first enrolled, such as the player's gamertag
or avatar.&lt;/p&gt;

&lt;p&gt;If the skeleton is identified as an unknown player, the title may
respond appropriately based on the context. For example, if the time is
appropriate for the title to take on a new player, the title could welcome
him or her as such and give the player a chance to correct his or her
identity, if they are already enrolled.&lt;/p&gt;

&lt;p&gt;If a player corrects his or her identity after feedback is provided,
the title must re-enroll the player as the player-selected identity. To
re-enroll a player, call
&lt;b&gt;NuiIdentityEnroll&lt;/b&gt;
with the FORCE_ENROLL flag.&lt;/p&gt;

&lt;p&gt;The exact user experience for allowing a player to correct his or her
identity is up to the title, but note that the following cases must be covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An existing player is misidentified as a new.&lt;/li&gt;
&lt;li&gt;An existing player is misidentified as a different player.&lt;/li&gt;
&lt;li&gt;A new player is misidentified as an existing player.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Providing identity feedback and the opportunity for correction are only
required once per identification operation. The exact timing of this is up to
the title. Feedback and an opportunity for correction do not need to happen
right away, but they must occur before the title takes a profile-related action.
Once completed, the title is not required to re-confirm again before additional
profile-related operations.&lt;/p&gt;

&lt;p&gt;We recommend that titles do not block progress or force players to confirm
their identities. Providing a passive way of correcting identity, such as a menu
option in a lobby, on a pause menu, or in other contextual UI, is preferred.&lt;/p&gt;

&lt;p&gt;Note that in many contexts, the active profile is already known, and the title
has no need to call &lt;b&gt;NuiIdentityIdentify&lt;/b&gt;
after gameplay starts. In these situations, this requirement does not apply. One
example is when the current turn is already associated with a profile. In this
case, a title may allow any skeleton to step up and play without being identified
and award any achievements to the profile associated with the current turn. This is
perfectly acceptable, provided that the title has chokepoints in the pre-game UI
where identity is checked, profiles are associated, and this requirement is
applied.&lt;/p&gt;

&lt;p&gt;Allowing the player to launch the sign-in dialog with
&lt;b&gt;XShowNuiSigninUI&lt;/b&gt; is an acceptable method
of identity correction, provided that the player who is correcting his or her
identity is expected to be signed in. It is not acceptable to require players
to go through the Kinect Guide to correct their identities.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>166</tcr_id>
<last_updated>40583</last_updated>
<short_description>NUI Identity Maximum Delay</short_description>
<requirements>
&lt;p&gt;The title must not make a player wait for more than 15 seconds on the result
of an identity operation.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The identity system may encounter situations where it cannot complete the
operation. In these situations, the player should still be able to play the
title without excessive delay.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;In good conditions, identity operations can complete within a few seconds.
However, if the identity system encounters quality issues due to lighting or
facial occlusion, the length of the identity operation increases. If the problem
is persistent, the operation might never be complete on its own. If the title
waits for an identity operation to complete before gameplay begins, it must not
hold the player for more than 15 seconds before continuing without the identity
result.&lt;/p&gt;

&lt;p&gt;Note that it is acceptable to allow an identity operation to take longer.
It is the perceived wait from the user's perspective that must meet this requirement.
For example:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;If a title starts the identity operation before the user reaches the wait
screen, only the time spent at the wait screen is counted towards the limit.&lt;/li&gt;

&lt;li&gt;If a title lets the player play the title while being identified, the
operation is allowed to take as long as desired.&lt;/li&gt;

&lt;/ul&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>161</tcr_id>
<last_updated>40366</last_updated>
<short_description>NUI Player-Created Content</short_description>
<requirements>
&lt;p&gt;Titles that use the Xbox 360 Kinect Sensor to capture player created content and transmit
it to other players or online services must do the following prior to transmission
of content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide the player with the ability to preview content.&lt;/li&gt;
&lt;li&gt;Inform the player where the content will be transmitted.&lt;/li&gt;
&lt;li&gt;Provide the player with the ability to confirm or cancel transmission
of content &lt;i&gt;after&lt;/i&gt; previewing the content and informing
the player.&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;Players expect to have full control over how and when their images,
videos, and audio are shared.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;For this requirement, &lt;i&gt;player-created content&lt;/i&gt; refers to
content that a player can create or modify in a title by using the sensor array,
including audio recordings, video recordings, depth information, skeletal/joint data,
and captured images.&lt;/p&gt;

&lt;p&gt;Content that is not recorded (video chat, text chat, voice chat, and other
real-time interactions) is not considered player-created content. Refer to
&lt;b&gt;TCR 151&lt;/b&gt;,
&lt;i&gt;NUI Local Preview&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;All existing Xbox LIVE content requirements apply to this TCR,
&lt;i&gt;NUI Player-Created Content&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Titles must notify the player where their content will be shared.
It is acceptable to provide a simple description of where the content will
be transmitted; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Share with friends over Xbox LIVE?&lt;/li&gt;
&lt;li&gt;Upload picture to Contoso.net?&lt;/li&gt;
&lt;/ul&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Natural User Interface (NUI)</category>
<tcr_id>164</tcr_id>
<last_updated>40486</last_updated>
<short_description>NUI Content Sharing Outside of Xbox LIVE</short_description>
<requirements>
&lt;p&gt;Titles that use the Xbox 360 Kinect Sensor or LIVE Vision camera to capture
player-created content must not transmit that content outside of the Xbox LIVE
service when the &lt;i&gt;share content outside of LIVE&lt;/i&gt; flag is
turned off.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Maintain integrity of the privilege system. Players who choose not to share
content outside Xbox LIVE do not expect that images, video, voice, and other
content captured from a sensor or camera is available to online services
outside of Xbox LIVE.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;For this requirement, &lt;i&gt;player-created content&lt;/i&gt; refers to
content that a player can create or modify using the Kinect Sensor or Xbox LIVE Vision
camera, including audio recordings, depth information, skeletal/joint data,
video, and captured images.&lt;/p&gt;

&lt;p&gt;In cases in which multiple players are signed in on one console, titles
must respect the most restrictive sharing settings among all logged in
users. This includes situations in which the most restrictive settings
are set for a gamer who is &lt;i&gt;idle&lt;/i&gt; in a session (that is,
signed in to the console but not actively participating in the session).&lt;/p&gt;

&lt;p&gt;This requirement applies to titles that have the ability to connect to
services outside of Xbox LIVE—primarily, titles that use Xbox LIVE Server
Platform (XLSP) or non–Xbox LIVE web services.&lt;/p&gt;

&lt;p&gt;Games call the &lt;b&gt;XUserCheckPrivilege&lt;/b&gt;
function with the XPRIVILEGE_SHARE_CONTENT_OUTSIDE_LIVE flag to detect the
setting.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Peripherals (PER)</category>
<tcr_id>33</tcr_id>
<last_updated>40381</last_updated>
<short_description>PER Controller Selection</short_description>
<requirements>
&lt;p&gt;Players must be able to start the game from the initial interactive screen
or attract mode with any supported controller recognized by the console. Once
the game is started, the player must not be required to switch controllers to
play the game.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players expect to be able to pick up any controller and start playing,
without having to swap controllers once they have started a game.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;In multiplayer games, the same principle applies to each player. Each player
must be able to connect any supported controller and join the multiplayer
session.&lt;/p&gt;

&lt;p&gt;This requirement does not apply to titles that only accept natural input
(Kinect-enabled titles).&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Text Input Devices (TID)</category>
<tcr_id>43</tcr_id>
<last_updated>39058</last_updated>
<short_description>TID Keyboard Support</short_description>
<requirements>&lt;p&gt;Games that support a virtual keyboard must also accept input from a physical text input device (TID).&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
The console supports input from USB keyboards and other text input devices. Players who see a virtual keyboard in a game context
expect that they can use any supported keyboard to enter text.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games that use the &lt;b&gt;XShowKeyboardUI&lt;/b&gt; function automatically meet this requirement.&lt;/p&gt;
&lt;p&gt;
Games that implement their own virtual keyboard can detect text input by calling the
&lt;b&gt;XInputGetKeystroke&lt;/b&gt; function with the XINPUT_FLAG_KEYBOARD flag.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Video Camera Peripheral (VCP)</category>
<tcr_id>125</tcr_id>
<last_updated>38926</last_updated>
<short_description>VCP Preview Display</short_description>
<requirements>
&lt;p&gt;When using the video camera to send live video to other players, games must
display a preview of the outgoing video.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Inform the sender that his or her image is being broadcasted.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Titles may provide gamers the option to disable the self-preview, but the
preview feature must be on by default. See the
&lt;b&gt;IXCamStreamEngine::SetLocalPreviewRect&lt;/b&gt;
and
&lt;b&gt;IXCamStreamEngine::RenderLocalPreview&lt;/b&gt;
methods in the XDK documentation for additional details.&lt;/p&gt;

&lt;p&gt;Recommended minimum preview sizes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDTV: 64 × 64&lt;/li&gt;
&lt;li&gt;HDTV: 92 × 92&lt;/li&gt;
&lt;/ul&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>47</tcr_id>
<last_updated>39744</last_updated>
<short_description>STR Storage Write Warning</short_description>
<requirements>
&lt;p&gt;Games must display a message during storage writes for the following conditions and the respective amount of time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Writes longer than one second require the standard message be displayed for three seconds.&lt;/li&gt;
&lt;li&gt;Writes longer than three seconds require the standard message be displayed for the length of the write.&lt;/li&gt;
&lt;li&gt;
Writes that last one second or less require the shorter message be displayed for one second or the standard message
for three seconds.
&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;
Player data can represent hours or days of accomplishment. Players expect to be informed when their actions may result in
the loss or corruption of their data.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The standard and short messages can be found in the terminology list.&lt;/p&gt;
&lt;p&gt;
Data frequently accessed during gameplay may be stored on the hard drive cache to avoid disrupting gameplay with warning
messages.
&lt;/p&gt;
&lt;p&gt;
Storage access times of less than 500 ms are exempt from this TCR only if no access to the same storage device occurs
within the subsequent three seconds.
&lt;/p&gt;
&lt;p&gt;
Games may substitute the required message with a notification option (such as an icon or graphic) as long as that option
had been communicated to the player within the current play session, and has been associated to the appropriate required
message. This alternate notification must abide by the display times listed in this TCR.
&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;
Writes to the hard drive cache for any duration do not require a message. However, BAS Non-Interactive Pause still applies
if the write lasts longer than five seconds.
&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>49</tcr_id>
<last_updated>38673</last_updated>
<short_description>STR Game Content Persistence</short_description>
<requirements>
&lt;p&gt;
Games must gracefully handle all cases in which stored game content is no longer accessible or available. Games must also
gracefully handle all cases in which the console reports the content as invalid or unreadable.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
On the Xbox 360 console, there is no guarantee of an always-connected storage device. Players expect games to handle situations
where game content is inaccessible for any reason, without becoming unstable or crashing.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;
Stored game content includes any type of cached content, saved games, game specific settings, Xbox LIVE content, content packages,
persistent data, game clips, and publisher common data.
&lt;/p&gt;
&lt;p&gt;The console will report content as unreadable or invalid in cases in which content is damaged, corrupt, or missing.&lt;/p&gt;
&lt;p&gt;Games may display a message or display the content as damaged when the system reports the content as invalid or unreadable.&lt;/p&gt;
&lt;p&gt;
Games must consider &lt;b&gt;TCR 30&lt;/b&gt;,
&lt;i&gt;UI Confirmation of Destructive Actions&lt;/i&gt;,
and not delete invalid or damaged content without first receiving
confirmation from the user.
&lt;/p&gt;
</remarks>
<exemptions>ames developed using XNA Game Studio are exempt from this requirement.</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>50</tcr_id>
<last_updated>40381</last_updated>
<short_description>STR Game Data Storage</short_description>
<requirements>
&lt;p&gt;Games must provide an option that allows the player to select any available
storage device for saving game data. If no device is selected, the game must
notify the player that no game data will be saved. The notification must occur
before any potential data loss.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players want to be able to save data to any connected storage device. Players
also want to know when their game progress/state is not going to be saved.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Players select a storage device from the Xbox Guide device selector UI. The
device selector allows the player to only select storage devices that have free
space greater than or equal to the number of bytes the game specifies. For details,
see the &lt;b&gt;XShowDeviceSelectorUI&lt;/b&gt; function
or, for Kinect-enabled titles,
&lt;b&gt;XShowNuiDeviceSelectorUI&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Game data includes game saves, rosters, snapshots, and so on.&lt;/p&gt;

&lt;p&gt;Games may automatically load previous saved game data or select the available
storage device when only one storage device is present. Games are not required to
provide access to the device selector when only one device is present.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;Games that do not support saves or only store data in the player's profile using
the &lt;b&gt;XUserWriteProfileSettings&lt;/b&gt;
function are exempt from this requirement.&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>51</tcr_id>
<last_updated>40763</last_updated>
<short_description>STR Game Data Storage Device Change</short_description>
<requirements>&lt;p&gt;Titles must notify the player if the in-use storage device is unavailable.&lt;/p&gt;</requirements>
<intent>&lt;p&gt;Players want to know when their game progress or game state will not be saved.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Titles may wait to display a message until an interactive state is reached or
until the next time the game attempts to access the storage device. For example,
if the storage device is removed during a cinematic, the game may wait until after
the cinematic finishes before displaying the message to the player. If the storage
device is removed during gameplay, the title may wait until the next save attempt
before displaying the message to the player.&lt;/p&gt;

&lt;p&gt;One or more of the following are acceptable actions for a title to take when
notifying the player:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow the player to reconnect the storage device and continue gameplay
with saving.&lt;/li&gt;
&lt;li&gt;Allow the player to continue gameplay without saving.&lt;/li&gt;
&lt;li&gt;Allow the player to exit from the game to a title menu.&lt;/li&gt;
&lt;li&gt;Allow the player to select a different storage device and continue gameplay
with saving (by calling &lt;b&gt;XShowDeviceSelectorUI&lt;/b&gt;
or &lt;b&gt;XShowNuiDeviceSelectorUI&lt;/b&gt;).&lt;/li&gt;
&lt;/ul&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>118</tcr_id>
<last_updated>38673</last_updated>
<short_description>STR Game Save Dependencies</short_description>
<requirements>&lt;p&gt;Game save progress must be associated with a gamer profile and must not have any dependencies on shared content.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Players expect their individual profiles to be the hub for all of their saved game data. Shared game content is intended to be shared with
all users of the console.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;
Progress saved while in a game mode such as campaign, season, career, and so on, is considered game save progress and must be
associated with a gamer profile. Data can be saved in association with a gamer profile either by passing a non-NULL user index to
the &lt;b&gt;XContentCreate&lt;/b&gt; function or by using the
&lt;b&gt;XUserWriteProfileSettings&lt;/b&gt; function.
&lt;/p&gt;
&lt;p&gt;
A game's shared content, such as shared unlocks, offline statistics, and so on, is not required to have an association with a gamer
profile.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Storage (STR)</category>
<tcr_id>168</tcr_id>
<last_updated>40763</last_updated>
<short_description>STR Player-Created Content Dependencies</short_description>
<requirements>&lt;p&gt;Player-created content must be associated with a user profile.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;Users expect to control the editing, storage, and sharing of content that they
created. Users do not want their content to be managed by others without approval.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Player-created content must be associated with the creator's user profile
and only allow action on that content, such as editing or sharing, if the creator's
profile is signed in. If the content is shared, the content no longer needs to be
associated with the original creator's profile.&lt;/p&gt;

&lt;p&gt;Titles can use XCONTENTTYPE_SAVEDGAME when creating content to associate
the content with a profile. Titles must check the
&lt;b&gt;XContentGetCreator&lt;/b&gt; function to ensure
that the content belongs to the player who is attempting to make use of it.&lt;/p&gt;

&lt;p&gt;A title may save content to multiple signed-in profiles to provide those users
access to the content.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Game Clips (GC)</category>
<tcr_id>54</tcr_id>
<last_updated>38926</last_updated>
<short_description>GC Interactive Game Session Recording</short_description>
<requirements>&lt;p&gt;Games must not upload text chat, voice chat, or video chat recorded in an interactive game session as a game clip.&lt;/p&gt;</requirements>
<intent>&lt;p&gt;Microsoft policy does not permit the recording of chat.&lt;/p&gt;</intent>
<remarks>&lt;p&gt;Games are allowed to upload game replay data and game state as part of a game clip.&lt;/p&gt;</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Content Packages (CP)</category>
<tcr_id>60</tcr_id>
<last_updated>38512</last_updated>
<short_description>CP Content Package Element Transfer</short_description>
<requirements>&lt;p&gt;A game must not move or copy any element of a content package to alternate storage locations.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Content packages are stored in a way that allows the player to manage the
content effectively. Content packages that are moved to non-standard locations
cannot be appropriately managed by the system.
&lt;/p&gt;
</intent>
</TCRDefinition>
<TCRDefinition>
<category>Content Packages (CP)</category>
<tcr_id>132</tcr_id>
<last_updated>39058</last_updated>
<short_description>CP In-Game Offer and Price Descriptions</short_description>
<requirements>&lt;p&gt;Games that offer items for sale within the game must display the item price in points, the item name, and the item description.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
To ensure consistency across the Xbox 360 platform, Microsoft policy requires
that price, name, and description be clearly communicated to the user prior to any
financial transaction taking place.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;
Items for sale include those items for which the game calls the
&lt;b&gt;XMarketplaceConsumeAssets&lt;/b&gt; and
&lt;b&gt;XShowMarketplaceDownloadItemsUI&lt;/b&gt;

functions.
&lt;/p&gt;
&lt;p&gt;Games obtain offer price, name, and description from the
&lt;b&gt;XMarketplaceCreateOfferEnumerator&lt;/b&gt;
function.&lt;/p&gt;
&lt;p&gt;The price for previously purchased non-consumable offers may be indicated as "already purchased" in the game's UI.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Content (LC)</category>
<tcr_id>61</tcr_id>
<last_updated>40381</last_updated>
<short_description>LC Content Sharing Privileges</short_description>
<requirements>
&lt;p&gt;Titles must not transmit or receive any player-created content if the
&lt;i&gt;player-created content flag&lt;/i&gt; is turned off.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Maintain integrity of the privilege system. Players who choose not to see player-created
content do not expect to see player-created content.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;&lt;i&gt;Player-created content&lt;/i&gt; refers to content that a player can create or modify in
a game. This includes content such as game snapshots, graphics, maps, voice messages
and annotations, video messages, images captured from the Xbox LIVE Vision camera or
the Xbox 360 Kinect Sensor, skeletal data, and so on.&lt;/p&gt;

&lt;p&gt;In cases in which multiple players are signed in on one console, games must respect
the most restrictive sharing settings among all users. This includes situations in
which the most restrictive settings are set for a gamer who is &lt;i&gt;idle&lt;/i&gt;
in a session (that is, signed in to a console but not actively participating in the
session).&lt;/p&gt;

&lt;p&gt;Real-time video chat, text chat, and voice chat are not considered player-created content.&lt;/p&gt;

&lt;p&gt;Player-editable strings and text tags are not considered player-created content
but must be verified per &lt;b&gt;TCR 92&lt;/b&gt;,
&lt;i&gt;CMTV Player Text String Verification&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;Games must call the &lt;b&gt;XUserCheckPrivilege&lt;/b&gt;
function with the XPRIVILEGE_USER_CREATED_CONTENT flag to detect the setting.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Content (LC)</category>
<tcr_id>62</tcr_id>
<last_updated>39283</last_updated>
<short_description>LC Per-Player Storage Reads and Writes</short_description>
<requirements>
&lt;p&gt;
Within a single game session, a game is permitted one read and write per file using the online storage APIs at the start and the end of a
game session for each player. If a game session exceeds five minutes in duration, the game is permitted an additional read-write at each
subsequent five-minute interval.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Online storage API calls require significant server bandwidth. These calls must
be limited to allow other games and players to interact successfully with the LIVE
service.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The "start and end of a game session for each player" refers to when a player enters and exits a game session.&lt;/p&gt;
&lt;p&gt;
The relevant storage APIs are &lt;b&gt;XStorageDownloadToMemory,&lt;/b&gt;
 &lt;b&gt;XStorageUploadFromMemory&lt;/b&gt;.
and &lt;b&gt;XStorageEnumerate&lt;/b&gt;.
  &lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Content (LC)</category>
<tcr_id>63</tcr_id>
<last_updated>39173</last_updated>
<short_description>LC Storage Read Limits for Per-Title Title Managed Storage</short_description>
<requirements>&lt;p&gt;The game must not read the same content from per-title title managed storage more than once per hour.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Online storage function calls require significant server bandwidth. These calls
must be limited to allow other games and players to interact successfully with the
LIVE service.
&lt;/p&gt;
</intent>
<remarks>&lt;p&gt;The relevant storage read APIs are &lt;b&gt;XStorageDownloadToMemory&lt;/b&gt; and &lt;b&gt;XStorageEnumerate&lt;/b&gt;.&lt;/p&gt;</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Content (LC)</category>
<tcr_id>65</tcr_id>
<last_updated>39744</last_updated>
<short_description>LC Point-to-Point Content Transmission</short_description>
<requirements>&lt;p&gt;Games that transmit saved content must not modify the content during transfer, and must transfer the content in its entirety.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Saved content is signed so that invalid content can be revoked. Permitting the
game to modify or truncate saved content can impede efforts to prevent the spread
of problematic content.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;This requirement ensures that content signatures are consistent.&lt;/p&gt;
&lt;p&gt;Games transfer content using the &lt;b&gt;XContentOpenPackage&lt;/b&gt; and
&lt;b&gt;XContentCreatePackage&lt;/b&gt; functions.&lt;/p&gt;
&lt;p&gt;
An example of a point-to-point transmission scenario is content being transferred
from one Xbox 360 console to another Xbox 360 console.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Gamer Profiles (GP)</category>
<tcr_id>68</tcr_id>
<last_updated>38743</last_updated>
<short_description>GP Gamer Profile Settings Usage</short_description>
<requirements>
&lt;p&gt;
Games must not store or transmit gamer card settings. Games must not transmit gamer preferences. Games must not store
gamertags or gamer profile names.
&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;
Gamer profile data is stored on the LIVE service and is often modified by players.
The LIVE service is the ultimate authority on the correct gamer profile information.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;For example, a game must not send a player's motto to other players in a multiplayer game.&lt;/p&gt;
&lt;p&gt;
Examples of gamer card settings include Xbox LIVE Gamer Zone, gamer picture, gamerscore, motto, and so on. Examples of gamer
preferences include &lt;i&gt;Game Difficulty&lt;/i&gt;, &lt;i&gt;Y-Axis Inversion&lt;/i&gt;, &lt;i&gt;Transmission&lt;/i&gt;, and so on.
&lt;/p&gt;
&lt;p&gt;Games are allowed to query for and transmit gamertags and gamer profile names as well as display them in the game's UI.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;
Games may share title custom information. Title custom information is denoted by title-specific settings of type
XPROFILE_TITLE_SPECIFIC1, XPROFILE_TITLE_SPECIFIC2, XPROFILE_TITLE_SPECIFIC3.
&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Gamer Profiles (GP)</category>
<tcr_id>69</tcr_id>
<last_updated>40431</last_updated>
<short_description>GP No Sharing of Achievements</short_description>
<requirements>
&lt;p&gt;Games must not award achievements to profiles that have not directly earned
the achievement.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The value of the achievement system rests in accurately representing what a
player has truly accomplished while playing games on the console.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games may award achievements to profiles that participated in the tasks
and progress necessary to unlock the achievements. Games may not award
achievements to a profile based solely on progress made by a different
profile. This includes any progress made and stored with another player's
saved game. Titles determine the profile associated with the saved game by
using the &lt;b&gt;XContentGetCreator&lt;/b&gt;
function.&lt;/p&gt;

&lt;p&gt;Saved games may not be transferred between players by default. Titles
can override this behavior by setting the XCONTENTFLAG_ALLOWPROFILE_TRANSFER
flag to create a saved game that can be transferred between players. However,
titles that allow transferring of saved games between profiles must make sure
that sharing of achievements is not possible.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Gamer Profiles (GP)</category>
<tcr_id>70</tcr_id>
<last_updated>39283</last_updated>
<short_description>GP Rich Presence</short_description>
<requirements>&lt;p&gt;In active gameplay, games must update presence information. Presence information must accurately reflect the player's state.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;
Players expect presence information to be updated in real time, so that they may
make informed decisions about important gameplay scenarios, such as sending game
invitations.
&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;For example, inactive players must not have the presence information of an active player.&lt;/p&gt;
&lt;p&gt;Games can use a default rich presence such as "idle" for profiles not in active gameplay.&lt;/p&gt;
&lt;p&gt;
Games use the &lt;b&gt;XUserSetContext&lt;/b&gt; and
&lt;b&gt;XUserSetProperty&lt;/b&gt; functions to fulfill this requirement.
&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Gamer Profiles (GP)</category>
<tcr_id>71</tcr_id>
<last_updated>40583</last_updated>
<short_description>GP Gamer Card Access</short_description>
<requirements>
&lt;p&gt;Games must provide the player the option to access another player's
gamer card wherever gamertags are enumerated.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Providing access to gamer cards in game lobbies and other areas where gamertags
are listed gives players the ability to quickly find information about other players,
provide feedback, and so on.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Examples of where this requirement applies include leaderboards,
session lobbies, and post-game statistics. Games use the
&lt;b&gt;XShowGamerCardUI&lt;/b&gt; function to satisfy
this requirement; Kinect-enabled titles use
&lt;b&gt;XShowNuiGamerCardUI&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This requirement does not apply when displaying gamertags in areas
where UI navigation is not enabled, such as static loading screens, or
in a heads-up display during active gameplay.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;Gamer card access is not required in local and system link multiplayer
game sessions or in areas where gamer cards are not selectable (such as scrolling tickers and in-action leaderboard quick status).&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Statistics, Achievements, and Awards (SA)</category>
<tcr_id>73</tcr_id>
<last_updated>41194</last_updated>
<short_description>SA Achievements</short_description>
<requirements>
&lt;p&gt;Games must provide a way for a player to earn all achievements defined by the base game,
without being required to purchase additional in-game content.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players expect to be able to obtain all achievements defined by the base game,
without being required to purchase additional downloadable content.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The &lt;i&gt;base game&lt;/i&gt; is the game defined by the game configuration file
submitted to the Xbox LIVE service for the game launch.&lt;/p&gt;

&lt;p&gt;Games update the profile by calling the
&lt;b&gt;XUserWriteAchievements&lt;/b&gt; function.&lt;/p&gt;

&lt;p&gt;Achievements may be distributed in offline and/or online gameplay.
Achievements may be awarded for Kinect-enabled gameplay.&lt;/p&gt;

&lt;p&gt;If a game offers an achievement that is related to gameplay from the same title or
a related title on another screen, the player is required to complete an activity within
each game to earn the achievement. A game is not permitted to award an achievement for
simply obtaining the other game, either paid or free.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Statistics, Achievements, and Awards (SA)</category>
<tcr_id>78</tcr_id>
<last_updated>39954</last_updated>
<short_description>SA Non-Session Leaderboard and Profile Request Limits</short_description>
<requirements>
&lt;p&gt;The game must not call statistics read APIs outside of an interactive gaming session,
without direct user input related to statistics.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Online statistics API calls require significant server bandwidth. These calls
must be limited to allow other games and players to interact successfully with the
LIVE service.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;An interactive game session is defined as gameplay that includes interaction with
other Xbox LIVE players or includes functionality that interacts with the Xbox LIVE
service to upload statistics.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Statistics, Achievements, and Awards (SA)</category>
<tcr_id>136</tcr_id>
<last_updated>39954</last_updated>
<short_description>SA Session Leaderboard and Profile Read and Write Limits</short_description>
<requirements>
&lt;p&gt;Games are permitted one read and one write to the leaderboards, and one read and one
write to the user's profile during a single interactive game session for each player. If
a game session exceeds five minutes in duration, the game is permitted an additional read
and/or write at each subsequent five-minute interval to both the leaderboards and profile.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Online statistics API calls require significant server bandwidth. These
calls must be limited to allow other games and players to interact successfully
with the LIVE service.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The relevant leaderboard read APIs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XUserReadStats&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XUserCreateStatsEnumeratorByRank&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XUserCreateStatsEnumeratorByRating&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XUserCreateStatsEnumeratorByXuid&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XUserCreateAchievementsEnumerator&lt;/b&gt;
/ &lt;b&gt;XEnumerate&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;XUserEstimateRankForRating&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The relevant leaderboard write API is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XSessionFlushStats&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The relevant profile read API is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XUserReadProfileSettingsByXuid&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The relevant profile write API is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;XUserWriteProfileSettings&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This TCR does not apply to user-initiated reading of statistics that happen outside
of a game session.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Statistics, Achievements, and Awards (SA)</category>
<tcr_id>143</tcr_id>
<last_updated>39954</last_updated>
<short_description>SA Avatar Awards</short_description>
<requirements>
&lt;p&gt;Games that offer avatar awards must provide a way for a player to earn all
game-defined avatar awards, without requiring the purchase of additional in-game
content, and update the player's profile.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Players expect to be able to obtain all the awards offered in the game without
being required to purchase additional downloadable content (DLC) for the base game.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games update the profile by calling the
&lt;b&gt;XUserAwardAvatarAssets&lt;/b&gt; function.&lt;/p&gt;
&lt;p&gt;Avatar awards may be distributed in offline and/or online gameplay.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>82</tcr_id>
<last_updated>40340</last_updated>
<short_description>MPS Private Sessions</short_description>
<requirements>
&lt;p&gt;If a game supports player-created or player-hosted sessions, the game must provide
the player the ability to create or host the session with all private slots.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The LIVE service is founded on the principle of multiplayer gameplay with
friends. Sessions with all private slots allow players to invite their friends
to play.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Private sessions are sessions with all private slots. Private sessions are not
available in matchmaking queries and, therefore, do not allow players to join via
the matchmaking service. Private sessions are also not joinable via the Xbox Guide
without an invitation. It is acceptable for any player in a private session to invite
another player into that session.&lt;/p&gt;

&lt;p&gt;Games create private sessions by calling
&lt;b&gt;XSessionCreate&lt;/b&gt; with
&lt;i&gt;dwMaxPublicSlots&lt;/i&gt; set to 0. Games will not meet this requirement by
simply creating a game session with a password.&lt;/p&gt;

&lt;p&gt;This requirement applies only to non-ranked (player match) sessions.&lt;/p&gt;

&lt;p&gt;Games may prevent spectators from joining private sessions.&lt;/p&gt;

&lt;p&gt;A game can give the host the option to set a custom mix of private and public slots
(a hybrid game). However, this session is not considered a private session due to the
presence of public slots.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>86</tcr_id>
<last_updated>39058</last_updated>
<short_description>MPS No Multiplayer</short_description>
<requirements>&lt;p&gt;Games must not allow multiplayer play when the multiplayer privilege is turned off.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;Maintain the integrity of the privilege system. Players who turn off multiplayer
play expect the game to behave accordingly.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;The system automatically prevents establishing sessions between consoles when
the multiplayer privilege is turned off. In cases in which a game connects to a
non–Xbox LIVE game server, the game must enforce this requirement. Games check
multiplayer privilege by calling
&lt;b&gt;XUserCheckPrivilege&lt;/b&gt; with the
XPRIVILEGE_MULTIPLAYER_SESSIONS flag.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;This requirement does not apply to system link (console-to-console) game modes.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>87</tcr_id>
<last_updated>38587</last_updated>
<short_description>MPS Multiple Players on the Same Console</short_description>
<requirements>
&lt;p&gt;Multiple players on the same console must always join game sessions together.
If the players cannot join together, the game must display a message explaining
why they cannot join.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Players on the same console expect to play together.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Games must not require idle profiles—profiles not participating in the
game—to join a game session.&lt;/p&gt;

&lt;p&gt;Examples of when players may not be able to join together include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A session that does not have enough slots available for each player on the console.&lt;/li&gt;
&lt;li&gt;When one or more accounts signed in to the console do not have multiplayer privileges.&lt;/li&gt;
&lt;/ul&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>88</tcr_id>
<last_updated>38673</last_updated>
<short_description>MPS Supported Gamertag Characters</short_description>
<requirements>
&lt;p&gt;Games must correctly display all 15 characters of any gamertag. Gamertags consist of
ASCII characters a–z, A–Z, 0–9, (, ), and " " (ASCII character 0x20).&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;A gamertag is a player's identity on the Xbox LIVE service. Players expect
their tags to be correct across all games and to be able to use gamertags to
find friends.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;While a gamertag cannot be created with parentheses, a guest's gamertag may include
parentheses.&lt;/p&gt;
&lt;p&gt;The system truncates guest gamertags as necessary.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>115</tcr_id>
<last_updated>39283</last_updated>
<short_description>MPS Game Invitations</short_description>
<requirements>
&lt;p&gt;Games must allow players to send game invitations for game sessions. Games must also
allow players to join sessions.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The Xbox LIVE service is designed to provide an easy, consistent way for players
to join multiplayer game sessions and invite other players.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;To meet this requirement, games must:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide the ability to send a game invitation from the Xbox Guide or by calling the
&lt;b&gt;XInviteSend&lt;/b&gt; function.&lt;/li&gt;

&lt;li&gt;Register for the XN_LIVE_INVITE_ACCEPTED notification during game launch and allow
the player to join the multiplayer game session when this notification is sent.&lt;/li&gt;

&lt;li&gt;Call &lt;b&gt;XInviteGetAcceptedInfo&lt;/b&gt;
to retrieve invitation details.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This requirement applies to both same-title and cross-title invitations and joins.&lt;/p&gt;
&lt;p&gt;It is not necessary to allow a player to join the game session if the session is full.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>124</tcr_id>
<last_updated>40381</last_updated>
<short_description>MPS Guest Support</short_description>
<requirements>
&lt;p&gt;Games that support multiplayer play on Xbox LIVE with more than one
player per console must allow guests to play.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The concept of guests is influential in new consumers choosing to join the
LIVE service.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games support guest sign-in by calling the
&lt;b&gt;XShowSigninUI&lt;/b&gt; function with Xbox LIVE profiles;
Kinect-enabled titles use &lt;b&gt;XShowNuiSigninUI&lt;/b&gt;.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>138</tcr_id>
<last_updated>40381</last_updated>
<short_description>MPS Xbox LIVE Party Invitations</short_description>
<requirements>
&lt;p&gt;In online multiplayer modes that support invitations, titles must provide to the
player the ability to invite Xbox LIVE Party members when a LIVE Party session is
active. If there is no active LIVE Party session, the title must provide the player
with the ability to invite friends.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The Xbox LIVE Party system allows players to stay together across games and
game sessions in order to enjoy the experience of playing together. Having easy
access to send party invitations in the multiplayer lobby facilitates this experience.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;When a player is in an Xbox LIVE Party session with at least one other player, games
may meet the requirement by providing an option labeled "Invite Xbox LIVE Party"
and calling the &lt;b&gt;XPartySendGameInvites&lt;/b&gt;
function, or by calling the &lt;b&gt;XShowPartyUI&lt;/b&gt; function
or &lt;b&gt;XShowNuiPartyUI&lt;/b&gt; function (for Kinect-enabled
titles).&lt;/p&gt;

&lt;p&gt;When a player is not in an Xbox LIVE Party session, or if the player is the only
member of his or her party session, games may meet the requirement by providing
an option labeled "Invite Friends" and either invoking the
&lt;b&gt;XShowFriendsUI&lt;/b&gt; function, or the
&lt;b&gt;XShowNuiFriendsUI&lt;/b&gt; function for
Kinect-enabled titles, or by calling the
&lt;b&gt;XInviteSend&lt;/b&gt; function for friends.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;Through May 31, 2009, the Xbox LIVE Party TCRs will only be enforced against
titles supporting Xbox LIVE Party. Submissions entering certification for the first time on
or after June 1, 2009 are required to adhere to Xbox LIVE Party TCRs.&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Multiplayer Sessions (MPS)</category>
<tcr_id>141</tcr_id>
<last_updated>39751</last_updated>
<short_description>MPS Matchmaking</short_description>
<requirements>
&lt;p&gt;Games must support an option that allows a player to join an Xbox LIVE game
session.  The game must notify the Xbox LIVE service by setting the appropriate
session context.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;The Xbox LIVE session context and properties provide an easy, consistent
way for players in multiplayer games to find other gamers with similar preferences
to play with.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games may choose to offer either ranked or player matches, or both.&lt;/p&gt;

&lt;p&gt;Games notify the Xbox LIVE service about a ranked session by setting the session
context to X_CONTEXT_GAME_TYPE_RANKED.&lt;/p&gt;

&lt;p&gt;Games notify the Xbox LIVE service about a standard session by setting the session
context to X_CONTEXT_GAME_TYPE_STANDARD.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>89</tcr_id>
<last_updated>38512</last_updated>
<short_description>CMTV Supporting Voice</short_description>
<requirements>
&lt;p&gt;All Xbox LIVE multiplayer games must support voice chat, at a minimum, between
one player on one console and another player on a second console.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Voice chat is an integral part of the Xbox LIVE experience. Players expect
voice chat in all titles that support LIVE multiplayer.&lt;/p&gt;
</intent>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>90</tcr_id>
<last_updated>40381</last_updated>
<short_description>CMTV Muting Support</short_description>
<requirements>
&lt;p&gt;Games must prevent muted players from communicating on Xbox LIVE.&lt;/p&gt;
&lt;p&gt;The player that mutes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cannot be heard or seen by the muted player.&lt;/li&gt;
&lt;li&gt;Cannot hear or see the muted player.&lt;/li&gt;
&lt;li&gt;Cannot receive real-time player-created communication of any type
from the muted player.&lt;/li&gt;
&lt;li&gt;Cannot send real-time player-created communication of any type to
the muted player.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The muted player:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cannot be heard or seen by the muting player.&lt;/li&gt;
&lt;li&gt;Cannot hear or see the muting player.&lt;/li&gt;
&lt;li&gt;Cannot receive real-time player-created communication from the
muting player.&lt;/li&gt;
&lt;li&gt;Cannot send real-time player-created communication to the muting
player.&lt;/li&gt;
&lt;li&gt;Must have no indication that he has been muted.&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;Allow players to control access to communication with them.
Maintains the integrity of the muting system.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Games determine a player's mute status by calling the
&lt;b&gt;XUserMuteListQuery&lt;/b&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Seeing&lt;/i&gt; the player refers to use of the video camera
or the Xbox 360 Kinect Sensor to transmit a player's image or representation
between consoles. &lt;i&gt;Seeing&lt;/i&gt; does not refer to the display
of a player's game-created avatar or character.&lt;/p&gt;

&lt;p&gt;This TCR applies to all forms of communication, including voice, video, and text chat.&lt;/p&gt;

&lt;p&gt;An example of real-time text communication is in-game text chat.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>91</tcr_id>
<last_updated>38512</last_updated>
<short_description>CMTV Communication in the Clear</short_description>
<requirements>
&lt;p&gt;Voice, video, and text chat among players must be transmitted in the clear
(unencrypted) using the VDP network protocol. The unencrypted portion of VDP packets
must contain only voice, video, or text chat data.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Microsoft policy does not permit the transmission of encrypted voice, video,
or text chat.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Communication stored in a message or attachment is not required to be transmitted
in the clear.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>92</tcr_id>
<last_updated>41194</last_updated>
<short_description>CMTV Player Text String Verification</short_description>
<requirements>
&lt;p&gt;Any player-entered text visible to another player on Xbox LIVE must be verified
using the Xbox LIVE service before being transmitted. Text that is rejected by the
Xbox LIVE service must not be displayed.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Protect players from inappropriate language.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;This requirement applies to any player-entered string that can be exposed to other
players on Xbox LIVE. It includes session names, content descriptions, text messages,
tags, team names, mottos, comments, and so on.&lt;/p&gt;

&lt;p&gt;If text is rejected by the Xbox LIVE service, a game can refrain from sending the
text, use blank text, or use generic text.&lt;/p&gt;

&lt;p&gt;A game verifies text by calling the &lt;b&gt;XStringVerify&lt;/b&gt;
function.&lt;/p&gt;
</remarks>
<exemptions>
&lt;p&gt;It is not required to use the Xbox LIVE service to verify real-time text communication.
An example of real-time text communication is in-game text chat.&lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>93</tcr_id>
<last_updated>40381</last_updated>
<short_description>CMTV No Communication</short_description>
<requirements>
&lt;p&gt;Games must not transmit text chat, voice chat, or video chat when the
communication privilege is turned off.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Maintain the integrity of the privilege system.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;In cases in which multiple players are signed in on one console, games
must respect the most restrictive communications settings among all users.
This includes situations in which the most restrictive settings are set
for a gamer who is &lt;i&gt;idle&lt;/i&gt; in a session (that is, signed in to the console
but not actively participating in the session).&lt;/p&gt;

&lt;p&gt;Games that use XHV meet the voice communication requirement of this TCR
by registering remote users playing on Xbox LIVE as remote talkers in the
XHV API. XHV enforces a player's individual voice restrictions through the
headset; however, XHV will enforce the most restrictive communication among
all players on the same console through the speakers and through the
Xbox 360 Kinect Sensor.&lt;/p&gt;

&lt;p&gt;The game may choose to notify active players that the restrictive privileges
are set for an idle player signed in to the console.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>94</tcr_id>
<last_updated>39500</last_updated>
<short_description>CMTV Friends-Only Communication</short_description>
<requirements>
&lt;p&gt;Games must only allow communication between friends when the friends-only
communication privilege is on.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Maintain the integrity of the privilege system.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;In cases in which multiple players are signed in on one console, games must respect
the most restrictive communications settings among all users. This includes situations
in which the most restrictive settings are set for a gamer who is &lt;i&gt;idle&lt;/i&gt;
in a session (that is, signed in to the console but not actively participating in the
session).&lt;/p&gt;

&lt;p&gt;Games that use XHV meet the voice communication requirement of this TCR by registering
remote users playing on Xbox LIVE as remote talkers in the XHV API. XHV enforces a player's
individual voice restrictions through the headset; however, XHV will enforce the most
restrictive communication among all players on the same console through the speakers
and through the Xbox 360 Kinect Sensor.&lt;/p&gt;

&lt;p&gt;The game may choose to notify active players that the restrictive privileges are set
for an idle player signed in to the console.&lt;/p&gt;

&lt;p&gt;It is acceptable for games to be more restrictive and not allow any communication
when the friends-only communication privilege is turned on.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Communication, Messaging, Text, Voice (CMTV)</category>
<tcr_id>188</tcr_id>
<last_updated>40820</last_updated>
<short_description>CMTV Social Network Access</short_description>
<requirements>
&lt;p&gt;Titles must not allow connection to or share activity with social networks when the
social network sharing privilege is set to &lt;i&gt;Blocked&lt;/i&gt;.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Maintain the integrity of the privilege system. Players and parents want to be able to
control sharing with social networks outside of Xbox LIVE.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;&lt;i&gt;Social networks&lt;/i&gt; refers to non-Xbox LIVE services that allow users
to communicate or share with others. Many of these services also allow sharing of text,
photos, videos, voice, and digital content; examples include Twitter, Facebook, and YouTube.
Websites operated by publishers or gaming communities that allow users to communicate or
share with others are also considered social networks.&lt;/p&gt;

&lt;p&gt;Social networks do not include companion websites that only display
title-specific information, such as leaderboards, game statistics, and so on.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Connection to&lt;/i&gt; includes the ability for a user to create a link
between his or her Xbox LIVE profile and a social network account.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Activity&lt;/i&gt; includes messages, pictures, videos, events, or any other
communications, data, or information sent to a social network.&lt;/p&gt;

&lt;p&gt;Titles call the &lt;b&gt;XUserCheckPrivilege&lt;/b&gt; function
with the XPRIVILEGE_SOCIAL_NETWORK_SHARING flag to detect the setting.&lt;/p&gt;

&lt;p&gt;Titles that use &lt;b&gt;XSocialPost&lt;/b&gt; to post to social
networks automatically meet this requirement. For more information, see
&lt;b&gt;TCR 169&lt;/b&gt;,
&lt;i&gt;UI Social Network Sharing&lt;/i&gt;.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Network (NET)</category>
<tcr_id>95</tcr_id>
<last_updated>38512</last_updated>
<short_description>NET Connection Status Notifications</short_description>
<requirements>&lt;p&gt;Games must properly detect and handle loss of network connectivity in all areas of the game.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;Network connectivity can drop for many reasons. Players expect games to
automatically and gracefully handle loss of connectivity.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Consoles can lose connectivity to Xbox LIVE and other connected consoles at
any time for a variety of reasons. The console issues an XN_LIVE_CONNECTIONCHANGED notification
when Xbox LIVE connectivity status changes. Games should not interrupt gameplay unless
loss of connectivity directly affects the player. Note that loss of connection to Xbox LIVE
does not necessarily imply that the console has lost connections to other consoles.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Network (NET)</category>
<tcr_id>96</tcr_id>
<last_updated>40340</last_updated>
<short_description>NET Console-to-Console Network Performance</short_description>
<requirements>
&lt;p&gt;Peer-to-peer gameplay between two different consoles must not be disconnected as
long as the following performance conditions are maintained:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each console has an upstream and downstream bandwidth of 64 kilobits/sec
(64,000 bits/sec) or higher.&lt;/li&gt;
&lt;li&gt;200 ms or less round-trip latency between consoles.&lt;/li&gt;
&lt;li&gt;Ten percent or less packet loss in a ten-second interval.&lt;/li&gt;
&lt;li&gt;Two percent or less packet loss, in general.&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;Some players' network connections have poor connectivity characteristics.
Players desire that games are robust in the face of poor connectivity.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;These conditions apply on an individual basis with only one condition applicable at
any one time.&lt;/p&gt;
&lt;p&gt;This requirement applies to network transmissions by titles for multiplayer games.&lt;/p&gt;
&lt;p&gt;This requirement does not apply to network transmissions outside of the title's control,
such as LIVE party chat and in-game voice chat.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Network (NET)</category>
<tcr_id>97</tcr_id>
<last_updated>38673</last_updated>
<short_description>NET Console-to-Datacenter-Hosted Server Network Performance</short_description>
<requirements>
&lt;p&gt;Console-to-datacenter-hosted gameplay must not be disconnected as long as the
following performance conditions are maintained:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each console has an upstream and downstream bandwidth of 40 kilobits/sec
(40,000 bits/sec) or higher.&lt;/li&gt;
&lt;li&gt;300 ms or less round-trip latency.&lt;/li&gt;
&lt;li&gt;Ten percent or less packet loss in a ten-second interval.&lt;/li&gt;
&lt;li&gt;Two percent or less packet-loss, in general.&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>
&lt;p&gt;Some players' network connections have poor connectivity characteristics.
Players desire that games are robust in the face of poor connectivity.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;These conditions apply on an individual basis with only one condition applicable at
any one time.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Network (NET)</category>
<tcr_id>98</tcr_id>
<last_updated>38512</last_updated>
<short_description>NET NAT Type Interoperability</short_description>
<requirements>&lt;p&gt;Games must not prevent players from playing on Xbox LIVE because of NAT type.&lt;/p&gt;</requirements>
<intent>
&lt;p&gt;Players expect to be able to play games over the LIVE service, regardless of
their network configuration.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;A game may restrict, based on NAT type, whether a player can join a session and
whether they are allowed to host a session. However, the game must not completely
prevent players from playing online.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Server Platform and Non–Xbox LIVE Web Services (XLSP)</category>
<tcr_id>99</tcr_id>
<last_updated>39500</last_updated>
<short_description>XLSP and Non–Xbox LIVE Web Services Connectivity Loss</short_description>
<requirements>
&lt;p&gt;If a title cannot establish a connection to a required non–Xbox LIVE
server or web service, the title must display the appropriate message, specified
in the Terminology List.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;In the event of connectivity issues, provide players with the knowledge of
whom to contact to resolve the issue.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;&lt;i&gt;Non–Xbox LIVE web service&lt;/i&gt; refers to any Internet service
that is not provided by Xbox LIVE.&lt;/p&gt;

&lt;p&gt;Because issues other than connection and authentication problems can cause a
player to become disconnected from non–Xbox LIVE servers and web services
while remaining connected to Xbox LIVE, games are required to inform the player
of the specific connectivity loss.&lt;/p&gt;

&lt;p&gt;For the appropriate message, refer to the
&lt;a href="https://developer.xboxlive.com/en-us/live/certification/terminology/Pages/home.aspx"&gt;Xbox 360 Terminology List&lt;/a&gt;.&lt;/p&gt;
</remarks>
</TCRDefinition>
<TCRDefinition>
<category>Game Demos (DEM)</category>
<tcr_id>110</tcr_id>
<last_updated>39058</last_updated>
<short_description>DEM Exiting Demo</short_description>
<requirements>
&lt;p&gt;If the game demo is launched by a shell or a launcher program, the game demo must
include a UI option to return to the launcher.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Ensure that players have an obvious way to quit the game without having to
restart the console or open the Xbox Guide.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Demos used as part of a compilation disc or supplied at Xbox LIVE Marketplace are
launched by a shell or launcher program.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;Stand-alone demos are not required to have an option to return to a launcher.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Game Demos (DEM)</category>
<tcr_id>111</tcr_id>
<last_updated>39377</last_updated>
<short_description>DEM Timeout</short_description>
<requirements>
&lt;p&gt;Demos must return to the launcher when there has been no user interaction for the
duration of the specified demo timeout.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Allowing game demos to rotate in the kiosk promotes an engaging retail
experience that ultimately encourages the sale of games and consoles.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;Because demos may end up on compilation discs, the control for how long they run
without user interaction is determined by settings on the compilation disc.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;Stand-alone demos are not required to return to a launcher.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Arcade (XLA)</category>
<tcr_id>126</tcr_id>
<last_updated>41194</last_updated>
<short_description>XLA Trial and Full Version</short_description>
<requirements>
&lt;p&gt;Xbox LIVE Arcade titles must support both trial and full versions of the game.
The game must check the license and launch the trial or the full version appropriately.
The trial version must provide the player the option to purchase the full version when
exiting the game.&lt;/p&gt;
</requirements>
<intent>
&lt;p&gt;Promote the sale of the full arcade title, and ensure that users are getting
the correct version.&lt;/p&gt;
</intent>
<remarks>
&lt;p&gt;In order to meet the requirement and convert to the full version appropriately,
trial versions use the &lt;b&gt;XContentGetLicenseMask&lt;/b&gt;
function to check for the proper license mask for the current user on the current machine
upon three events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Game launch&lt;/li&gt;
&lt;li&gt;Sign-in state change&lt;/li&gt;
&lt;li&gt;Xbox LIVE Marketplace purchase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the license mask purchased bit is '0', the game is available in trial mode.
If the purchased bit is '1', the game is available as the full version.&lt;/p&gt;

&lt;p&gt;It is recommended that the title avoid downgrading itself from the full version to
the trial, even if &lt;b&gt;XContentGetLicenseMask&lt;/b&gt;
indicates a trial license (which can happen if the licensed user signs out while playing
the title on an unlicensed console). Instead, the title should remain fully unlocked
until returning to Game Library.&lt;/p&gt;

&lt;p&gt;A trial version can:

  •Create a save file if it is intended to be used by the subsequently played full game.
  •Create and post to leaderboards if it is a core value proposition for the full game experience and will likely drive an increase in demo downloads and full game sales.
  •Offer online multiplayer modes if they are essential to the full game offering. &lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;Games that provide gameplay at no cost do not have to provide a trial version.&lt;/p&gt;</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Arcade (XLA)</category>
<tcr_id>127</tcr_id>
<last_updated>41194</last_updated>
<short_description>XLA Main Menu</short_description>
<requirements>
&lt;p&gt;Xbox LIVE Arcade titles must support a main menu that includes the following menu options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leaderboards&lt;/li&gt;
&lt;li&gt;Achievements&lt;/li&gt;
&lt;li&gt;Unlock Full Game (trial version only)&lt;/li&gt;
&lt;li&gt;Download Content (full version only, if applicable)&lt;/li&gt;
&lt;li&gt;Exit Game&lt;/li&gt;
&lt;/ul&gt;
</requirements>
<intent>&lt;p&gt;Promote a consistent experience across all Xbox LIVE Arcade titles.&lt;/p&gt;</intent>
<remarks>
&lt;p&gt;Information about the contents for each menu option can be found in the XDK documentation.&lt;/p&gt;
&lt;p&gt;Games typically display their primary game modes, such as single player and multiplayer,
at the top of this menu.&lt;/p&gt;
&lt;p&gt;It is acceptable to add additional menu options.&lt;/p&gt;
</remarks>
<exemptions>&lt;p&gt;Games that provide gameplay at no cost do not have to provide the "Unlock Full Game" option.
  •A game can use slightly altered language for the menu options if the standard menu options may cause customer confusion. For example, “Unlock Full Game” may not be suitable for an episodic game because customers may interpret it as meaning that they are buying the whole series.
  •If the game design does not support the required main menu options, it may exclude them. &lt;/p&gt;
</exemptions>
</TCRDefinition>
<TCRDefinition>
<category>Xbox LIVE Arcade (XLA)</category>
<tcr_id>130</tcr_id>
<last_updated>39500</last_updated>
<short_description>XLA Leaderboard Support</short_description>
<requirements>
&lt;p&gt;Xbox LIVE Arcade titles must support at least one leaderboard that is displayed
in the Xbox LIVE Arcade dashboard. In-game leaderboards must offer, at a minimum,
a Friends view, an Overall view, and a My Score view.&lt;/p&gt;
</requirements>
<intent>&lt;p&gt;Promote a consistent experience across all Xbox LIVE Arcade titles.&lt;/p&gt;</intent>
<remarks>&lt;p&gt;Information about leaderboard views can be found in the XDK documentation.&lt;/p&gt;</remarks>
</TCRDefinition>
    

  
  
  <CTC>
<tcr_id>1</tcr_id>
<testcase_id>CTC 1</testcase_id>
<type>Compliance</type>
<short_description>Compliance 1, System: 001 Game Stability Requirements</short_description>
<Requirements>None</Requirements>
<Tools>
1.	xbWatson
2.	XKD
</Tools>
<Configuration>None</Configuration>
<Definition>None</Definition>
<Steps>
1.	Navigate all menus and submenus, watch all cinematic sequences, and play all stages/areas/levels.
2.	In addition, always monitor for crashes while performing all other test cases.
</Steps>
<Documentation>None</Documentation>
<Result>
There must be no extended unresponsive states, unintentional loss of player data (e.g. saved data), crashes, hangs, or unintended reboots of the console.

An “extended unresponsive state” refers to any state within the course of gameplay where user input is not recognized, and there is no indication of why.  Loading screens, cinematics, and other areas that could be considered “unresponsive” but are clearly denoted as normal gameplay path do not fail this requirement.  For example, a 45-second stretch of a static screen with no text or audio would not pass this test, even if the game continued on as normal afterwards.

An “unintended reboot” does not include a situation where the title must launch a separate XEX file or request a separate disc to be inserted via a call to XLaunchNewImage or XSwapDisc. Note that even in this case, there will be xbWatson debug output denoting a console reboot has occurred.
</Result>
<PassExamples>
•	In response to a Player's decision to change game modes, the title soft-reboots the console to switch to a different XEX. The Xbox 360 System Startup Logo is not displayed.
•	The title hard-locks when attempting to load from a storage device that contains a transferred save. The save was transferred through the Xbox Neighborhood.
</PassExamples>
<FailExamples>
•	The title fails to launch when the Xbox Dashboard language is set to a specific language, regardless of whether the language is supported or not.
•	The title causes the system to entirely reboot, causing the Xbox 360 System Startup Logo to be displayed.
</FailExamples>
<NAExamples>None</NAExamples>
<Analysis>None</Analysis>
<Faq>None</Faq>
<Hardware>1.	All console configurations.</Hardware>
</CTC>
<CTC>
<tcr_id>2</tcr_id>
<testcase_id>CTC 1</testcase_id>
<type>Compliance</type>
<short_description>Compliance 1, System: 002 Basic Console Support - No MU/HDD</short_description>
<Requirements>None</Requirements>
<Tools>2.	Xbox 360 Development Kit </Tools>
<Configuration>
6.	Development Kit without hard drive and without Memory Unit
7.	Profile A: Xbox LIVE multiplayer enabled gamer profile that does not have an avatar
8.	Memory Unit with the System Extended Packages installed
9.	USB storage device
10.	Kinect Sensor if supported by the title
</Configuration>
<Definition>
None
</Definition>
<Steps>
No MU/HDD
5.	If the development kit hard drive is not removable, do the following (note: you must be using emulation for this to work):
a. From the Xbox 360 Launcher, Choose Tools then System Settings.
b. Select the “Hard Drive” option.
c. Choose “Disabled” from the menu. This will cause a reboot of the console. The hard drive will no longer be accessible.
6.	If the Memory Unit does not have the System Extended Packages installed, do the following:
a. Disable the Xbox HDD and insert a clean 256MB or 512MB MU.
b. Flash using the current remote recovery with the ‘Install System Extended Packages’ option checked.
c. Reboot the console and connect to Xbox LIVE.
7.	For each configuration (combination of hard drive, MU, and USB storage device present or missing), test that the title does not require a specific device type to be playable.
8.	If testing an Xbox LIVE Arcade title or downloadable Demo, run it from the hard drive, MU and USB storage device (which also contains a profile) while no other devices are present and enter all modes/gameplay. 
</Steps>
<Documentation>
2.	Publisher-provided documentation of expected behavior for the no-storage configuration. 
</Documentation>
<Result>
In addition to the game behaving as it is intended, it must not be unnecessarily crippled.  “Playable” is of course a subjective measure, and will be determined in certification on a case-by-case basis.  As noted above, what will be flagged is the unnecessary crippling of a game when a specific storage device type is not available.  
Titles are allowed to require the Kinect Sensor.  The Kinect system software may require storage space to function but the title should not require any additional storage.
</Result>
<PassExamples>
•	The title is not playable without an avatar (this is not required as the title can message the Player to create one)
•	The title automatically generates a random avatar for the profile
•	The title loads a pre-generated avatar for the profile
•	The title uses a gamer picture or other form of Player representation
•	The title displays a message to the Player that the game requires a Player generated Avatar and requires the Player to exit the game.
•	The title clearly indicates that the avatar failed to load
</PassExamples>
<FailExamples>
•	Disk based Avatar supported games are not playable on the most basic Xbox 360 console.
•	The title does not allow the Player to progress into the game without an Avatar and does not indicate the reason.
•	The title specifically requires a hard drive to be playable.
•	The title specifically requires an MU to be playable.
•	The title specifically requires a USB storage device to be playable.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
2.	All console configurations.
</Hardware>
</CTC>
<CTC><tcr_id>2</tcr_id>
<testcase_id>CTC 2</testcase_id>
<type>Compliance</type>
<short_description>Compliance 2, System: 2 Basic Console Support - No Avatar</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox 360 Development Kit  
</Tools>
<Configuration>
1.	Development Kit without hard drive and without Memory Unit
2.	Profile A: Xbox LIVE multiplayer enabled gamer profile that does not have an avatar
3.	Memory Unit with the System Extended Packages installed
4.	USB storage device
5.	Kinect Sensor if supported by the title
</Configuration>
<Definition>
None
</Definition>
<Steps>
No Avatar
1.	Launch the Dashboard and sign into Profile A
2.	Dismiss the mini avatar chooser (4x4 grid of prebuilt avatars) by pressing the Guide button
3.	Launch the game
4.	Attempt to start a game session without selecting an avatar
</Steps>
<Documentation>
1.	Publisher-provided documentation of expected behavior for the no-storage configuration. 
</Documentation>
<Result>
In addition to the game behaving as it is intended, it must not be unnecessarily crippled.  “Playable” is of course a subjective measure, and will be determined in certification on a case-by-case basis.  As noted above, what will be flagged is the unnecessary crippling of a game when a specific storage type is not available.  
Titles are allowed to require the Kinect Sensor.  The Kinect system software may require storage space to function but the title should not require any additional storage.
</Result>
<PassExamples>
•	The title is not playable without an avatar (this is not required as the title can message the Player to create one) 
•	The title automatically generates a random avatar for the profile 
•	The title loads a pre-generated avatar for the profile 
•	The title uses a gamer picture or other form of Player representation 
•	The title displays a message to the Player that the game requires a Player generated Avatar and requires the Player to exit the game 
•	The title clearly indicates that the avatar failed to load 
</PassExamples>
<FailExamples>
•	Disk based Avatar supported games are not playable on the most basic Xbox 360 console. 
•	The title does not allow the Player to progress into the game without an Avatar and does not indicate the reason. 
•	The title specifically requires a hard drive to be playable. 
•	The title specifically requires an MU to be playable. 
•	The title specifically requires a USB storage device to be playable.  
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	All console configurations.  
</Hardware>
</CTC>
<CTC><tcr_id>3</tcr_id>
<testcase_id>CTC 1</testcase_id>
<type>Compliance</type>
<short_description>Compliance 1, System: 3 Initial Interactive State</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	A stopwatch 
2.	XbWatson 
</Tools>
<Configuration>
1.	All console configurations 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	If the current configuration has storage, navigate to Tools->Certification Tools->Clear utility partitions in the Xbox 360 Launcher to clear the utility partitions, and ensure all settings relating to this game are cleared (by doing a clean recovery or otherwise removing settings). 
2.	Boot the title from the Dashboard, and start the stopwatch timing when the default.xex is loaded (note that for Kinect titles this will occur after the Kinect health and safety warnings have been displayed). 
3.	Press START, the A button, or perform any supported Kinect gesture to immediately skip any skippable animations and cinematics. 
4.	Stop the stopwatch when the title reaches the initial interactive state. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The stopwatch must have a time less than 20 seconds. 

Note that since legally or contractually required screens of up to five seconds are not included in this 20 second limit, there may need to be other instances in which the stopwatch is stopped and started. For example: 
10 second boot animation + 10 second legal screen + 30 second skippable cinematic + 10 second title screen does not pass.  Since the legal screen is longer than five seconds, the full 10 seconds are counted against the boot time. 
10 second boot animation + 5 second legal screen + 30 second skippable cinematic + 10 second title screen does pass.  Since the legal screen is 5 seconds or less, it is discarded from the calculation. 
Note: If the title being tested is a demo or an Xbox LIVE Arcade title, ensure this is tested by emulating the package file. For details on emulating content packages, please refer to the Compliance Test Tips test guide available on Game Developer Network.
</Result>
<PassExamples>
•	The title name is clearly identified on the Press START screen or IIS. 
•	The title takes less than 20 seconds to display the IIS. 
</PassExamples>
<FailExamples>
•	Pressing the START button cannot skip an animation or cinematic that is longer than 30 seconds during the initial startup sequence. 
•	The title takes between 60 and 80 seconds to reach the Press START screen or IIS when emulating the content package.
This applies to emulated demos or Arcade games that could be distributed on a disc. 
•	The title takes over 80 seconds to reach the Press START screen or IIS when emulating the content package.
This applies to emulated demos or Arcade games that could be distributed on a disc. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit 
2.	Xbox 360 Memory Unit 
3.	Kinect Sensor 
</Hardware>
</CTC>
<CTC><tcr_id>5</tcr_id>
<testcase_id>CTC 1</testcase_id>
<type>Compliance</type>
<short_description>Compliance 1, System: 5 Console Restart</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox 360 Development Kit
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Navigate all menus and submenus, watch all cinematics, and play all stages/areas/levels.
2.	If supported, download content from within the title and attempt to use it.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player must never be required to physically restart the console. Having to open the Xbox Guide and press Y to return to the Dashboard is also not allowed.
See the test case for BAS Game Stability for more discussion of acceptable reboots.
</Result>
<PassExamples>
•	The title, transparent to the Player, changes the .xex's so that the DLC is available. 
•	The title requires the Player to reboot the console in order to change storage devices after the initial selection. 
•	The title requires the Player to reboot the console in order to exit an Xbox LIVE multiplayer game session in progress. 
</PassExamples>
<FailExamples>
•	The title requires the Player to reboot the title in order to access the downloadable content. The title does not notify the Player that after the download is complete they will be able to access the new feature upon re-launching the title. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit   
</Hardware>
</CTC>
<CTC><tcr_id>
6
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 6 Non-Interactive Pause
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Stopwatch   
</Tools>
<Configuration>
1.	All Xbox 360 configurations 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	If a storage device is attached, navigate to Tools->Certification Tools->Clear utility partitions in the Xbox 360 Launcher to clear the utility partitions. 
2.	Visit all loading areas:
a. Initial boot sequence (this does not include the first black screen if running from the dashboard if it is under 10 seconds.  This is also allowed for emulated Demos and XBLA games).
b. Before and after cinematic sequences.
c. Stage/area/level loading.
d. Starting/finishing Xbox LIVE game sessions.
e. Any in-game point where loading is performed.
f. Any point with other non-interactivity. 
3.	At each non-interactive screen, start the stopwatch. 
4.	Note the content of the non-interactive screen. 
5.	Once an interactive screen returns, stop the stopwatch. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
All non-interactive screens must display on-screen graphics.  Single colors or a band of colors does not qualify as on-screen graphics.  Static or scrolling text similarly does not qualify.  For non-interactive screens with durations of less than five seconds, graphics are not required to be animated.
 
If the stopwatch displays a time greater than five seconds, the game must display the reason for the delay, as well as provide animation, not just static graphics. If an icon is used to display the reason, it must be clear what it means (a spinning disc for loading for example).  Common reasons include loading, saving, and reading from or writing to the cache.  
 
For loading screens that appear for longer than 15 seconds, please refer to TCR 007 BAS Load Times test case as well.
Note: If the title being tested is a demo or an Xbox LIVE Arcade title; ensure this is tested by emulating the content package file. For details on emulating content packages, please refer to the Compliance Test Tips test guide available on Game Developer Network.  
</Result>
<PassExamples>
•	The title displays a blank black screen for less than 10 seconds during the initial boot sequence when running from the dashboard.  This also applies to emulated demos and XLA titles.
</PassExamples>
<FailExamples>
•	The title pauses for over 20 seconds but does not show any animation. 
•	The title pauses on a non-artistic blank black screen for 10 seconds or more. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit   
</Hardware>
</CTC>
<CTC><tcr_id>
7
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 7 Load Times
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Stopwatch 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	If a storage device is attached, navigate to Tools->Certification Tools->Clear utility partitions in the Xbox 360 Launcher to clear the utility partitions. 
2.	Boot the title from the Dashboard and visit all areas of the game which have loading screens after the initial interactive state. 
3.	At the start of each loading screen, start the stopwatch. 
4.	Note the content of the loading screen. 
5.	When the loading has finished, stop the stopwatch. 
6.	Repeat steps [2]-[5] without any storage devices attached and the hard drive disabled. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the time displayed on the stopwatch is less than 15 seconds, please refer back to the BAS Non-Interactive Pause test case.  
 
If the time is between 15 and 60 seconds, the content of the loading screen must consist of methods to engage the player.  As noted above, this may consist of tutorial videos, character animations, level/map descriptions, or other activities pertinent to gameplay.  Still graphics such as tips or character images that do not rotate after 15 seconds or simple looping animations will not pass this test.
 
If the time is greater than 60 seconds, this loading screen is non-compliant and does not pass this test.
Note: If the title being tested is a demo or an Xbox LIVE Arcade title, ensure this is tested by emulating the package file. For details on emulating content packages, please refer to the Compliance Test Tips test guide available on Game Developer Network. 
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title takes over 30 seconds to load with no player engagement. 
•	The title takes longer than 60 seconds to load. 
•	A disc based title takes longer than 90 seconds to load when emulating the content package. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit 
 
</Hardware>
</CTC>
<CTC><tcr_id>
8
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 8 XDK Version
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	XEX Image Converter (imagexex) – Ensure this and cklibver.dll are both the latest version available (installing the latest version of the SDK will ensure this) 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Extract / Copy all executable files (.xex, .exe and .dll extensions are most common) to the root of your main drive [C:\]. 
2.	Use Imagexex to scan each executable. From the Xbox 360 command prompt (Start Menu->Programs->Microsoft Xbox 360 SDK->Xbox 360 Command Prompt), run the following command: 
 
‘IMAGEXEX /DUMP [FILENAME].XEX > DUMP.TXT’
 
Or
 
‘IMAGEXEX /DUMP [FILENAME].DLL > DUMP.TXT’
 
3.	Using Notepad.exe open the dump.txt. 
4.	Search in the file for the information below: 
SYSTEM IMPORT LIBRARIES
xboxkrnl.exe     version 2.0.20353.0 (minimum 2.0.12625.0)
xbdm.xex         version 2.0.14000.0 (minimum 2.0.1861.0)
xam.xex          version 2.0.20353.0 (minimum 2.0.12625.0)
 
LIBRARY VERSIONS
D3D9D 2.0.20353.0 [unapproved]
D3DX9 2.020353.0 [approved]
XGRAPHC 2.0.20353.0 [approved]
XONLINE 2.0.20353.0 [approved]
XBOXKRNL 2.0.20353.0 [approved]
XMP 2.0.20353.0 [approved]
XAUD 2.0.20209.0 [unapproved]
XAPILIB 2.0.20353.0 [approved]
XHV2 2.0.20353.0 [approved]
 
TOOL VERSIONS
LIBCMT 2.0.11886.0 [approved]
LINK 10.0.11886.0 [approved]
C1 16.0.10225.0 [unapproved]
C2 16.0.10225.0 [unapproved]
5.	Ensure the versions of all libraries in all executables belong to the same XDK release.  This refers to the “base” version of each library.  For example 2099.3 and 2099.6 have the same base version, and therefore match. 1873.0 and 2099.3 do not. 
6.	Ensure each library and tool version is approved for release. 
7.	Ensure no version of the system import library xbdm.xex is listed.
</Steps>
<Documentation>
1.	Publisher supplied submission documents 
2.	Approved/Unapproved Libraries list on Game Developer Network Here 
</Documentation>
<Result>
Libraries linked into title executables must be from the same XDK release.  All XDK library and tool versions must be approved. A list of currently approved libraries can also be found on Game Developer Network . 
 
All libraries must be release libraries, not debug.
 
xbdm.xex cannot be included.
</Result>
<PassExamples>
•	All executable files (.xex/.dll) link to 'Approved', non-debug XDK libraries and all XDK libraries are from the same XDK release.
Note: Results must be obtained using the latest available version of imagexex.exe/cklibver.dll. 
•	The title links with multiple approved tools from different XDK releases. 
</PassExamples>
<FailExamples>
•	One or more TOOL VERSIONS are [Unapproved].
Note: Results must be obtained using the latest available version of imagexex.exe/cklibver.dll. 
•	One or more executable files (.xex/.dll) link to 'Unapproved' or 'Possibly Approved' XDK libraries.
Note: Results must be obtained using the latest available version of imagexex.exe/cklibver.dll. 
•	One or more executable files (.xex/.dll) lists xbdm.xex in the System Import Libraries section.
Example:
SYSTEM IMPORT LIBRARIES
xbdm.xex         version 2.0.8275.0 (minimum 2.0.1861.0)
Note: Results must be obtained using the latest available version of imagexex.exe/cklibver.dll. 
•	One or more executable files (.xex/.dll) link to debug libraries.
Example:
xapilibd.lib         2.0.7978.3 [Unapproved]
Note: Debug libraries will have a ‘D’ as the last character of their filename (e.g. xapilibd.lib). Libraries which naturally end in 'D' (e.g. XAUD) will feature two 'D's at the end if they are debug.
Note: Results must be obtained using the latest available version of imagexex.exe/cklibver.dll. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit 
</Hardware>
</CTC>
<CTC><tcr_id>11</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 11 Personal Information
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Visit all areas of the game. This includes all possible Xbox LIVE multiplayer sessions as well. Visit all areas where content may be saved or otherwise sent across the Xbox LIVE service, or to a game server. 
3.	Ensure that personal information is never requested by the game. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
A title must never request any personal information from a player. However, this does not cover all possible failure scenarios in their entirety. When in certification, games will be inspected and this requirement checked in any other area where it seems possible a violation could occur. Some situations where this could come up:
•	Games which save online game sessions to a storage device.  Sensitive information such as gamertags, Passports, and PUIDs/XUIDs must not be stored. 
•	Server-based games where user information could potentially be transmitted and stored on a remote server. 
</Result>
<PassExamples>
  •	The title displays and shares country of residence information with a player on another console.
  •A fitness-focused title requests the user’s height, weight, age, and/or gender. The information is stored locally and not transmitted externally.
  •The title uses the player’s IP address to define their location in general (no more specific then state or country) and displays that location to other players on the leaderboards.
  •The title requests login information for the purposes of account linking with a related community site. Account linking is not required to access gameplay.
</PassExamples>
<FailExamples>
  •	The title requests that the Player inputs personal information.
  Examples: Real name, e-mail address, date of birth, profile passcode, secret question, password, credit card details etc.
  •	The title transmits and shares personal information with a player on another console.
  •	The title accesses sensitive personal data such as profile passcode, secret question, password(s), credit card details etc. and presents it on screen (same console).
  •The title transmits and shares personal information with a player on another console.
  •Examples: Email address, IP address, Location (anything more specific then state/country), Name, Date of Birth, Profile Passcode, Secret Question, Password(s), Credit Card Details etc.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit  x 1 
</Hardware>
</CTC>  
<CTC>
<tcr_id>14</tcr_id>
<testcase_id>CTC 1</testcase_id>
<type>Compliance</type>
<short_description>Compliance 1 System: 14 Debug Output</short_description>
<Requirements>None</Requirements>
<Tools>
1.	APIMon
2.	XbWatson or Xbox Kernel Debugger
</Tools>
<Configuration>
1.	Set the .xdb file search path in the APIMon settings
2.	Apply the API(s) to be monitored.
•	There are 2 versions of the OutputDebugString API that need to be monitored. Each one has a different parameter for text characters displayed in the output strings.
•	OutputDebugStringA (ANSI)
•	OutputDebugStringW (Wide-character)
</Configuration>
<Definition>None</Definition>
<Steps>
1.	Set APIMon to monitor for OutputDebugStringA and OutputDebugStringW.
2.	Start the APIMon session.
3.	Start XbWatson or XKD.
Note: APIMon must be started first.
4.	Boot the title.
5.	Visit all areas of the game. While doing so, watch for any debug output on the screen, monitor APIMon for any OutputDebugString() API calls, and monitor XbWatson output.
a.  Navigate all menus and submenus.
b. Watch all cut scenes and cinematics.
c. Play all levels.
d. If the game supports online play, play all Xbox LIVE session types.
e. If the game supports system link, play all system link session types.
f. Save and load all game save types.
g. Download all available in-game content and access it in-game.
6.	After running the game, navigate to the Xbox 360 Neighborhood and verify that no files on any storage device contain debug output.
</Steps>
<Documentation>1.	API Monitor Quick Guide </Documentation>
<Result>
OutputDebugString() API must not be called and no debug must be seen in XbWatson / XKD or in the game UI.

Note: OutputDebugString() can be called without strings being displayed in XbWatson or XDK. APIMon will not register a OutputDebugString() made by the System. System generated debug output when running the Dashboard, Xbox 360 Launcher or the game will not cause a title to fail this test case and is not something to be concerned about.

Typically system debug output is prefixed with the module that outputs the debug in brackets, but not always. Examples of system debug include: [XNET], [XGI], [xbdm], [XOnline], [XAM], [XUI], RGC, SATA.
</Result>
<PassExamples>
•	The title displays its version information within menus and/or gameplay.
</PassExamples>
<FailExamples>
•	The title makes calls to OutputDebugStringA() or OutputDebugStringW().
•	The title contains hidden or visible debug features (not cheats) that can be accessed by the Player.
•	The title outputs debug information to Xbox Watson that falls outside of the allowed System Debug.
•	The title displays debug information in a dialog message.
Note: This includes messages containing only an error code and no other text.
•	The title displays realtime debug information (threads, location, scale, color pallete etc.) on screen.
•	The title creates a file that contains debug information on a storage device.
</FailExamples>
<NAExamples>None</NAExamples>
<Analysis>None</Analysis>
<Faq>None</Faq>
<Hardware>1.	Xbox 360 Development Kit  x 1 </Hardware>
</CTC>
<CTC><tcr_id>
15
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 15 Sign-in Changes
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Console is connected to the Xbox LIVE service 
2.	Xbox LIVE-enabled player profile 
3.	Non-Xbox LIVE-enabled player profile 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Visit all areas of the game. This includes navigating all menus and submenus, watching all cutscenes and cinematics, and playing all levels. If the game supports online play, play all Xbox LIVE multiplayer session types. If the game supports system link, play all system link session types. Save and load all game save types. Download any and all available in-game content. 
3.	In each area of the game described above, do the following: 
a. Sign out a signed-in player.
b. Sign in a signed-out player.
c. Sign out one of two signed-in players.
d. Sign in one of two signed-out players.
e. Sign out four signed-in players.
f. Sign in four signed-out players. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game must handle the situation gracefully.  “Gracefully” in this context means that the game must not crash, hang, or display non-user-friendly messaging.  As discussed above, if the current game state does not allow for the configuration that the user changes to, it is acceptable to return to a main menu.
 
When in a main menu state, the game should react gracefully to changes, especially the signed-out à signed-in state change and user-to-user state change.  For example, in a game which supports auto-save, if User1 has previously played and auto-saved and signs in while the title is in a main menu, the title’s “resume” functionality must resume play for User1. 
 
The title is not required to take a confirmation of destructive actions approach to this situation.  Because the title cannot stop the sign-in or sign-out action from being taken, it is not required to ask for confirmation, even if the action will have a destructive effect on the title.
 
If a title can continue after a sign-in or sign-out change, it must heed the GP No Sharing of Achievements TCR—it must not award achievements to a newly signed-in profile based on progress made by a previously signed-in player.
 
Note that the six situations listed in step [3] do not cover all sign-in and sign-out possibilities.  For example, a title may have a special case where if three of four players sign in, the game must wait for a fourth in order to play correctly.  The six above are direction for a route to take, and likely scenarios for where problems might occur.
</Result>
<PassExamples>
•	The title allows players to sign-in/out and maintains the current game state with no adverse effects. 
•	The title returns the player to the main menu when the player signs-out of the currently active profile.
Note: Displaying a message to the player informing them of the reason for returning to the main menu is optional. 
</PassExamples>
<FailExamples>
•	The title returns the player to the main menu when another player signs-in/out on an inactive profile, resulting in the loss of game progress/campaign based data that could otherwise have been saved. 
•	Certain features, functions or game modes become unnecessarily disabled or inaccessible when signing-in/out of a gamer profile.
Example: When signing-out of an inactive profile, it is no longer possible to create or join an Xbox LIVE game session. 
•	The title enters an unresponsive state, returns to the Xbox Dashboard or crashes when a player signs-in/out of a gamer profile. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x1 
</Hardware>
</CTC>
<CTC><tcr_id>
22
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 22 System UI Framerate
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	While in various gameplay modes, loading screens and cinematics, or while navigating the menus, bring up the Xbox 360 Guide. 
2.	Note anytime that the Xbox 360 Guide cannot be brought up, and retry in that area. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the system UI can be rendered at least every 66 milliseconds, then the Xbox 360 Guide can be brought up.
</Result>
<PassExamples>
•	Invoking the Guide in any portion of the title takes less than 3 seconds. 
</PassExamples>
<FailExamples>
•	The Guide cannot be invoked in one or more areas of the title (cinematics, loading screens, within gameplay, etc.). 
•	Invoking the Guide in any portion of the title takes greater than 5 seconds. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC><tcr_id>
117
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 117 Video Mode Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
North America 
1.	Connect a Component HD AV pack to the console. 
2.	Boot the title and progress into gameplay. 
3.	Verify that there are no graphical issues. 
4.	Repeat steps [2]-[3] for every AV mode and resolution. 
5.	Repeat steps [1]-[4] but using a VGA HD AV pack. 
6.	Repeat steps [1]-[4] but using an S-Video AV pack. 
7.	Repeat steps [1]-[4] but using an HDMI cable. 
Europe 
1.	Connect a Component HD AV pack to the console. 
2.	Boot the title and progress into gameplay. 
3.	Verify that there are no graphical issues. 
4.	Repeat steps [2]-[3] for every AV mode and resolution. See Notes section below. 
5.	Repeat steps [1]-[4] but using a VGA HD AV pack. 
6.	Repeat steps [1]-[4] but using an S-Video AV pack. 
7.	Repeat steps [1]-[4] but using an Advanced AV pack. 
8.	Repeat steps [1]-[4] but using an HDMI cable. 
Asia 
1.	Connect a Component HD AV pack to the console. 
2.	Boot the title and progress into gameplay. 
3.	Verify that there are no graphical issues. 
4.	Repeat steps [2]-[3] for every AV mode and resolution. 
5.	Repeat steps [1]-[4] but using a VGA HD AV pack. 
6.	Repeat steps [1]-[4] but using an S-Video AV pack. 
7.	If the title is shipping to Japan, repeat steps [1]-[4] but using a D-Terminal HD AV pack. 
8.	Repeat steps [1]-[4] but using an HDMI cable. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game must support all video output packs, modes and resolutions.
 
Note that PAL 50 support is not required. However, if it is supported then it must run smoothly without issue (no dropped frames, no skipping audio etc.)
Note: If a title does not intend to support PAL 50, the executable will be signed so that it will not run if the Xbox 360 is set to PAL 50. It is important that this is tested for if it applies. For details on testing PAL 50 support, please refer to the Compliance Test Tips test guide available on Game Developer Network. 
</Result>
<PassExamples>
•	The title shows aspect ratio corruption in one or more video modes. 
</PassExamples>
<FailExamples>
•	The player cannot access specific areas or features of the title in one or more video modes. 
•	The title crashes when running in one or more video modes. 
•	The title does not boot correctly when running in Pal 50 and does not display the appropriate System-handled error message. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Component HD AV Pack. This can switch between HD and normal TV modes. 
2.	VGA HD AV Pack. 
3.	S-Video AV Pack. 
4.	D-Terminal HD AV Pack. This can switch between HD and normal TV modes. 
5.	Advanced AV Pack (SCART).  
6.	HDMI Cable. 
7.	TV/Monitor with onscreen display of input resolution. 
</Hardware>
</CTC>
<CTC><tcr_id>
167
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 167 Stereoscopic 3D
</short_description>
<Requirements>
None
</Requirements>
<Tools>
•	APIMon 
</Tools>
<Configuration>
1.	Set the .xdb file search path in the APIMon settings 
2.	Apply the APIs to be monitored a. OutputDebugStringA
b. OutputDebugStringW 
3.	Apply the API to be spoofed a. IsStereo3DValidationEnabled 
4.	Connect the Xbox 360 Development Kit to the Display via HDMI. 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Set APIMon to spoof the IsStereo3DValidationEnabled API with a return value of ‘1’. 
2.	Set APIMon to monitor for the OutputDebugStringA and OutputDebugStringW APIs. 
3.	Start the APIMon session. 
4.	Start XbWatson or XKD. NOTE: APIMon must be started first. 
5.	Boot the title. 
6.	Enable S3D from within the title. 
7.	Ensure that the IsStereo3DValidationEnabled API is listed as called in the APIMon log. 
8.	Access different areas of the title that support S3D. 
9.	Monitor APIMon for calls to the OutputDebugStringA or OutputDebugStringW APIs with associated debug in XbWatson indicating that the blank region does not contain uniform pixel values. 
</Steps>
<Documentation>
Spoofing of the IsStereo3DValidationEnabled API should be disabled in APIMon whenever this test case is not being run as it will cause a performance impact that would not occur under normal circumstances.
</Documentation>
<Result>
Titles that support stereoscopic 3D must ensure that the active space regions have a constant pixel value for each frame while in 720p frame-packed mode.  When Stereo 3D validation is enabled there should be no debug output indicating that the blank region is not homogenous.
</Result>
<PassExamples>
•	No calls are made to the Debug APIs OutputDebugStringA or OutputDebugStringW. 
</PassExamples>
<FailExamples>
•	Calls are made to the Debug APIs and output similar to the following is found in XbWatsonWRN[D3D]: Blank region within stereoscopic 3D front buffer does not contain uniform pixel values.  The blank region within the front buffer is [ 0 720 1280 750 ]. 
</FailExamples>
<NAExamples>
•	The title supports additional 3D modes other than stereoscopic 3D 
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
•	Xbox 360 Development Kit x 1 
•	HDMI 1.4A Stereoscopic 3D display with support for 720p 60 Hz frame-packed format 
</Hardware>
</CTC>
<CTC><tcr_id>
185
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 185 PlayReady License Acquisition - PlayReady whitelist verification
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Using the publisher provided documentation, verify that the URL used for PlayReady license acquisition uses HTTPS. 
2.	Verify that the URL from Step 1 matches the one listed in the title URL whitelist and carries HTTPS in the whitelist. 
3.	Ensure that any URL in the whitelist that uses HTTP is not being used for PlayReady license acquisition. 
</Steps>
<Documentation>
•	Publisher provided documentation detailing the title’s support of PlayReady protected content. 
</Documentation>
<Result>
Titles that use PlayReady protected content must use SSL to acquire PlayReady licenses.
</Result>
<PassExamples>
•	All PlayReady license acquisition occurs over HTTPS. 
</PassExamples>
<FailExamples>
•	A URL for PlayReady license acquisition uses HTTP instead of HTTPS. 
</FailExamples>
<NAExamples>
•	The title does not support playback of PlayReady protected content.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
•	Xbox 360 Development / Test Kit x 1 
</Hardware>
</CTC>
<CTC><tcr_id>
185
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Audio Visual: 185 PlayReady License Acquisition - PlayReady license acquisition
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Remove any licenses on the console by doing the following:
a. xbdir /s hdd:\LicenseStore.dat
b. xbdel [path to LicenseStore.dat on the console] 
2.	Start a NetMon capture. 
3.	Launch the title. 
4.	Select a piece of PlayReady protected content and begin playback. 
5.	Stop the NetMon capture as soon as the playback starts successfully and you can view the first few frames of content. 
6.	Apply the following display filter in the NetMon tool:
property.TCPPayload.contains(“AcquireLicense”) 
7.	Ensure no network trace packets meet the filter criteria. 
</Steps>
<Documentation>
•	Publisher provided documentation detailing the title’s support of PlayReady protected content. 
</Documentation>
<Result>
Titles that use PlayReady protected content must use SSL to acquire PlayReady licenses.
</Result>
<PassExamples>
•	No network trace packets are visible in NetMon when applying the specified display filter. 
</PassExamples>
<FailExamples>
•	Network trace packets are visible in NetMon when applying the specified display filter. 
</FailExamples>
<NAExamples>
•	The title does not support playback of PlayReady protected content. 
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
•	Xbox 360 Development / Test Kit x 1 
</Hardware>
</CTC>
<CTC>
<tcr_id>
24
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 24 Background Music
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon
</Tools>
<Configuration>
Set APIMon to monitor for XMPOverrideBackgroundMusic()
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Launch the game and start APIMon.
2.	From the Xbox Guide, in the media area, select music on the HDD or a connected device and press ‘Play’ on the music player.
3.	Navigate to all areas of the game ensuring that:
a. The game’s background music has been muted.
b. The player’s music is only muted during non-interactive FMVs.
c. The game’s sound effects can be heard along with the player’s music.
</Steps>
<Documentation>
1.	API Monitor Quick Guide
</Documentation>
<Result>
The game must not continue to play its own background music. The player’s custom music must play instead.

Within non-interactive FMVs the game may mute the player’s custom music.
The game should only call XMPOverrideBackgroundMusic() to mute the player’s music during non-interactive FMVs.

Note: Not all game sounds should shut off as a result of custom music playing (e.g. speech, ambient sounds should remain).
</Result>
<PassExamples>
•	The title disables background audio inside FMV cutscenes.
</PassExamples>
<FailExamples>
•	The title does not disable background music during normal gameplay or menus.
•	The title disables all audio including non-background game sounds (e.g. speech, effects, etc) when the player's custom music is played.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Console with custom music on the Hard Drive or connected device (e.g. portable music player, USB storage device)
</Hardware>

</CTC>
<CTC>
<tcr_id>
28
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 28 Official Naming Standards
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Visit all stages/areas/levels.
2.	Navigate all menus and submenus, both in-game and from the main menu.
3.	Change all available game settings and options to all possible values.
4.	If the game supports saves, save and load all possible game types.
5.	Watch all cinematics.
6.	Note all text shown.
Note: Ensure that the correct terminology is used for Microsoft® Points.
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the game displays a message relating to a situation covered by the Xbox 360 Terminology List, the message must match the one in the latest Xbox 360 Terminology List.

All Xbox 360 console components must be referred to using the terms on the Xbox 360 Terminology list.
</Result>
<PassExamples>
•	The title uses the terminology for Microsoft® Points as described in the terminology list. It is acceptable for subsequent usage to be "Microsoft Points", "Points", or the Points logo.
</PassExamples>
<FailExamples>
•	The title uses a proprietary term from another game console or system.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
29
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 29 Error Messaging
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Examine the error text document submitted with the title for unfriendly messages.
2.	Attempt to display every error message the game supports. For a list of possible error conditions, please refer to the Compliance Test Tips test guide available on Game Developer Network.
3.	Verify that the error message is user-friendly and descriptive.
4.	Verify that the error message is relevant to gameplay.
</Steps>
<Documentation>
1.	Warning / Error Messaging documentation
</Documentation>
<Result>
The game must not display an unfriendly error message.
The game must transparently handle irrelevant errors. For example, an error which offers a ‘retry’ option without requiring the user to take any action before retrying would be classed as an irrelevant error which is not being handled transparently. The game should retry on its own in this case.
</Result>
<PassExamples>
•	The title displays a user-friendly message that addresses the error.
</PassExamples>
<FailExamples>
•	The title displays debug information in an error message.
•	The title displays an error message that does not address the error and directly leads to real or potential game data loss for the Player.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
30
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 30 Confirmation of Destructive Actions
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	From all areas of the game which support the following actions, do:
a. Load saved data.
b. Delete saved data (saved games, other user-created data).
c. Overwrite saved data. This includes via selecting storage devices that already have existing save data present on them.
d. Exit a single player session.
e. Exit a multiplayer session.
f. Restart a game session.
2.	If multiple game modes or playthroughs share autosave files, overwrite the saves in the subsequent areas (e.g. starting a new campaign/playthrough).
3.	Verify that in each situation above, proper notification and the option to cancel are given.
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the game performs a destructive action, it must give the player a message and an option to cancel.
If the player attempts to cancel the destructive action, it must be cancelled.
If the player confirms the destructive action, it must be performed.

Notes:
This requirement does not apply to the situation where a player signs in or out via the Xbox Guide.
Auto-saving does not require a confirmation of destructive actions message.
</Result>
<PassExamples>
•	The title obtains positive confirmation of Player intent before performing actions that will result in loss of Player data.
•	The title does not obtain positive confirmation of Player intent before overwriting a sequential game progress autosave.
</PassExamples>
<FailExamples>
•	The title does not inform the Player of the consequences of the impending action when obtaining positive confirmation.
•	The title does not obtain positive confirmation of Player intent before performing an action that will result in the loss of savable Player data.
•	The title does not provide the Player with the option to cancel an action that would result in the loss of savable Player data.
•	The title does not obtain positive confirmation of Player intent before overwriting a manual game progress save.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
169
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 169 Social Network Sharing - No Automatic Sharing
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	From all areas of the game which support the following actions, do:
a. Load saved data.
b. Delete saved data (saved games, other user-created data).
c. Overwrite saved data. This includes via selecting storage devices that already have existing save data present on them.
d. Exit a single player session.
e. Exit a multiplayer session.
f. Restart a game session.
2.	If multiple game modes or playthroughs share autosave files, overwrite the saves in the subsequent areas (e.g. starting a new campaign/playthrough).
3.	Verify that in each situation above, proper notification and the option to cancel are given.
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the game performs a destructive action, it must give the player a message and an option to cancel.
If the player attempts to cancel the destructive action, it must be cancelled.
If the player confirms the destructive action, it must be performed.

Notes:
This requirement does not apply to the situation where a player signs in or out via the Xbox Guide.
Auto-saving does not require a confirmation of destructive actions message.
</Result>
<PassExamples>
•	The title obtains positive confirmation of Player intent before performing actions that will result in loss of Player data.
•	The title does not obtain positive confirmation of Player intent before overwriting a sequential game progress autosave.
</PassExamples>
<FailExamples>
•	The title does not inform the Player of the consequences of the impending action when obtaining positive confirmation.
•	The title does not obtain positive confirmation of Player intent before performing an action that will result in the loss of savable Player data.
•	The title does not provide the Player with the option to cancel an action that would result in the loss of savable Player data.
•	The title does not obtain positive confirmation of Player intent before overwriting a manual game progress save.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
169
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, User Interface: 169 Social Network Sharing - Sharing Disabled
</short_description>
<Requirements>
None
</Requirements>
<Tools>
•	API Monitor
</Tools>
<Configuration>
•	Set the .xdb file search path in the APIMon settings
•	Apply the API to be spoofed
o	XSocialGetCapabilities
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Configure APIMon to spoof the XSocialGetCapabilities API with a return value of ‘0’.
2.	Using the publisher provided documentation, attempt to view all locations where the player would normally be able to share social content.
3.	Ensure that no UI is displayed indicating that the player is able to share social content.
</Steps>
<Documentation>
Publisher documentation indicating the extent of support of the Xbox LIVE Social Network publishing service, including what type of content is able to be shared and all locations in the application where the user is able to share from.
</Documentation>
<Result>
These requirements only apply to applications that use the Xbox LIVE Social Network publishing service to share content. All content sharing should be a direct result of user-initiated actions. Sharing features should not be displayed when the Xbox LIVE Social Network publishing service is unavailable.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title displays UI for posting social content when the publishing service is not supported.
</FailExamples>
<NAExamples>
•	The title does not support sharing player content on social networks.
•	The title uses its own implementation for sharing player content on social networks and does not use the XSocial APIs.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit x 1
</Hardware>
</CTC>
<CTC>
<tcr_id>
169
</tcr_id>
<testcase_id>
CTC 3
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 3, User Interface: 169 Social Network Sharing - Content Sharing
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Verify that the application uses the Xbox LIVE Social Network publishing service.
2.	Navigate to a location where the user is able to share content on a social network.
3.	Select the UI option and verify that the correct system UI is displayed for the type of content being shared.
4.	Post content to the social network.
5.	Using the publisher provided documentation, repeat Steps 1 - 3 for each location in the application that supports sharing social content.
</Steps>
<Documentation>
Publisher documentation indicating the extent of support of the Xbox LIVE Social Network publishing service, including what type of content is able to be shared and all locations in the application where the user is able to share from.
</Documentation>
<Result>
These requirements only apply to applications that use the Xbox LIVE Social Network publishing service to share content. All content sharing should be a direct result of user-initiated actions. Sharing features should not be displayed when the Xbox LIVE Social Network publishing service is unavailable.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
None
</FailExamples>
<NAExamples>
•	The title does not support sharing player content on social networks.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit x 1
</Hardware>
</CTC>
<CTC>
<tcr_id>
31
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 31 Device Types
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Publisher provided saves or cheats
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the game.
2.	While the game is running, test all available 1st and 3rd party Xbox 360 controllers for functionality.
3.	Insert each controller in the following areas:
a. Menu/Sub-menus, including the pause menu
b. Gameplay
c. Change/experiment with controller configuration options.
4.	While the game is running, test all valid peripheral subtypes (see Hardware).
5.	Insert each peripheral subtype in the following areas:
a. Menu/Sub-menus, including the pause menu
b. Gameplay
c. Change/experiment with controller configuration options.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game should recognize all valid Xbox 360 controllers [1st and 3rd party] and should provide functionality with all controllers.
</Result>
<PassExamples>
•	The title requires functionality that is not present/supported on the device type in order to progress through gameplay.
</PassExamples>
<FailExamples>
•	The title restricts input based on device type.
Example: The title doesn't provide any functionality with a non-standard controller type (e.g. Guitar, Steering Wheel etc.) once the user has progressed beyond the initial interactive screen.
•	The player is required to connect an additional peripheral that does not ship with the title, in order to proceed into gameplay.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	At least one of every first party controller
2.	A selection of approved third-party controllers
3.	At least one of every peripheral subtype:
Sub-Type List:
XINPUT_DEVSUBTYPE_UNKNOWN                 - Unknown subtype
XINPUT_DEVSUBTYPE_ARCADE_STICK          - Arcade style joystick
XINPUT_DEVSUBTYPE_FLIGHT_STICK           - Joystick designed for flight games
XINPUT_DEVSUBTYPE_GAMEPAD                  - Gamepad
XINPUT_DEVSUBTYPE_WHEEL                      - Wheel
XINPUT_DEVSUBTYPE_DANCEPAD                 - Dance Pad
XINPUT_DEVSUBTYPE_GUITAR                     - Guitar Controller
XINPUT_DEVSUBTYPE_DRUM_KIT                  - Drum Kit
</Hardware>
</CTC>
<CTC>
<tcr_id>
33
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 33 Controller Selection
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Perform the following at the first interactive screen:
a. Boot the game and with a controller in each virtual port (use wireless controllers or a USB 2.0 hub).
b. Sign in a profile on controller 1 (controller with the upper left quadrant lit)
c. Pick up controller 1 and Start the game.
d. Navigate the Menus.
e. Attempt to Start.
f. Reboot the game, sign in a profile on controller 1 and attempt to start the game with controller 2.
g. Reboot the game, sign in a profile on controller 1 and attempt to start the game with controller 3.
h. Reboot the game, sign in a profile on controller 1 and attempt to start the game with controller 4.
2.	Attempt to start a System Link game using the matrix from Step 1.
3.	Attempt to join a System Link game using the matrix from Step 1.
4.	Attempt to start an Xbox LIVE session using the matrix from Step 1 (Sign into an Xbox LIVE Gold profile as appropriate).
5.	Attempt to join an Xbox LIVE session using the matrix from Step 1 (Sign into an Xbox LIVE Gold profile as appropriate).
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game must START from any controller.

The menu system must be negotiable.

The game session must be playable.

The player must NOT be forced to change controllers in order to start/play a game session.

In multiplayer mode verify that all players can successfully join the game session.

Note:
The game is permitted to lock a player to a given port once gameplay has commenced.

Xbox LIVE Arcade submissions are allowed to require a profile to be selected in order to enter gameplay (as per Exemption in TCR002 Basic Console Support).  Sign into a gamer profile on the active quadrant in steps [f] to [h] if necessary.

This TCR does not apply to titles that only accept natural input (ie: a title that qualifies for the “Kinect Required” AFR).
</Result>
<PassExamples>
•	When a player using a port-locked controller returns to the Initial Interactive Screen or Press START screen, the controller remains port-locked and no other controller can progress past the Initial Interactive Screen or Press START screen.
</PassExamples>
<FailExamples>
•	The controller that started the game from the title screen/IIS is unable to enter/join an Xbox LIVE match. The game requires a different/lower controller number to be used.
•	The title requires the player to switch controllers during active gameplay.
•	The title does not respond to input from quadrants other than quadrant 1 from the IIS without a profile signed in.
•	The title requires the player to switch controllers in menu in a few remote locations.
•	The title forces the player to switch controllers and sign out inactive controllers before the active player can join or host a game session.  Note: This scenario covers join matchmaking and game invitation/join session in progress scenarios.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Controller x 4
</Hardware>
</CTC>
<CTC>
<tcr_id>
34
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 34 Controller Discovery
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the game and wait until the initial START screen is displayed.
2.	Connect controllers in all locations where additional players can begin using a controller (such as multiplayer, System Link, Xbox LIVE). Wait until the controller is assigned a quadrant and then check the following:
a. Verify any UI elements that show additional controllers are updated within 1 second.
b. After 1 second, press any button to verify the game recognizes the controller.
3.	Remove the controllers added in Step 2 and verify that the UI element is updated within 1 second
4.	Start a gameplay session
5.	During Gameplay connect an additional controller
a. Verify that gameplay is not disrupted
6.	Repeat Step 5 for each gameplay mode
</Steps>
<Documentation>
None
</Documentation>
<Result>
In the Menu System controller connection and disconnection is recognized within 1 second:
•	The player can navigate through the menu system and perform actions.
•	Controller selection UI should be updated to represent the newly discovered controller.

Gameplay is not disrupted when an additional controller is connected during gameplay.
</Result>
<PassExamples>
•	The title requires the Player to press A for the in-game UI to update when controllers are connected in the multiplayer discovery screen.
•	The UI does not update when the controllers are disconnected in the multiplayer discovery screen after the Player has already selected to join the game.
</PassExamples>
<FailExamples>
•	The in-game UI does not update after waiting 4 seconds when controllers are connected or disconnected in the multiplayer discovery screen.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	wired controllers x 4 (wireless controllers should not be used)
</Hardware>
</CTC>
<CTC>
<tcr_id>
41
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 41 Voice Input Detection
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Launch the game.
2.	In the following areas attach a voice peripheral to the controller and verify voice communication works
a. All gameplay modes.
b. Menu Areas – Lobbies.
3.	In the following areas connect a controller with a voice peripheral already attached to the console.
a. All gameplay modes.
b. Menu Areas – Lobbies,
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game must recognize a voice peripheral and enable it without disrupting gameplay.
</Result>
<PassExamples>
•	The title takes less than 15 seconds to enable appropriate functionality after connecting a voice peripheral.
</PassExamples>
<FailExamples>
•	The Player must restart the level or the game to enable voice functionality after a voice peripheral is connected during gameplay.
•	The title takes longer than 15 seconds to enable appropriate functionality after connecting a voice peripheral.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
43
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 43 Keyboard Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title and identify all Virtual Keyboard areas.
2.	Connect a TID to the Xbox 360 Console.
3.	Access all virtual keyboard areas and attempt to enter in text with the TID.
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas
</Documentation>
<Result>
All virtual keyboard areas must recognize Keyboard (TID) input.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title supports a UI that resembles a keyboard and does not support a chat pad/TID.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Console x 1
2.	Text Input Device (TID) – Chatpad or USB keyboard  x 1
</Hardware>
</CTC>
<CTC>
<tcr_id>
45
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 45 MU Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Xbox 360 Console with MU inserted
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Visit all game areas where games can be saved. This includes after significant progress has been made through the title as save games may grow in size.
2.	Choose the inserted MU from the device selector (if applicable).
3.	Ensure the game can be saved onto 64MB memory unit.
4.	Reload the save to ensure it saved correctly.
5.	Format MU and repeat for each save type supported by the title.
</Steps>
<Documentation>
None
</Documentation>
<Result>
All saved games must fit in their entirety on an empty 64 MB memory unit.
</Result>
<PassExamples>
•	Every save type is under 52MB.
•	The title supports multiple save types that total more than 52MB.
</PassExamples>
<FailExamples>
•	The title has one or more save types that are over 52MB that are not necessary for normal gameplay (Optional Save types, ex: Video Captures, Custom Maps, User Created Content).
•	The title has one or more save types that are over 52MB that are necessary for normal gameplay (Core save types, ex: Campaign, Career, Checkpoint, Options).
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit
2.	64MB Xbox 360 Memory Unit
</Hardware>

</CTC>
<CTC>
<tcr_id>
47
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 47 Storage Write Warning
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Stopwatch
2.	Xbox 360 File Event Monitor (included in PIX which is listed in Start\Microsoft Xbox 360 SDK\Performance).
</Tools>
<Configuration>
1.	Console save game area should be formatted and clean
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Open PIX on a connected PC and open the File Event Monitor Window. Ensure that the System Monitor window is closed.
2.	Set File Event monitor to filter for Write operations and start logging.
3.	Launch the title and find all locations where the title writes data to storage devices (including both conventional save games and data saved to the player’s profile).
4.	Make a save in each of these areas to an MU and measure the length of time the message is displayed.
5.	Repeat Step 4 but save to a USB storage device instead.
6.	From the File Event Monitor logs, determine the length of the time between the first and last events caused by each individual save operation.
</Steps>
<Documentation>
A training video is available for this test case at developer.xboxlive.com under Certification > Training Materials > Certification Video Series.
</Documentation>
<Result>
If the write is between 500ms and 1 second then either the standard message should be displayed for 3 seconds or the short message should be displayed for 1 second.

If the write is between 1 second and 3 seconds then the standard message should be displayed for 3 seconds. If the write takes longer than this, the standard message should be displayed for the duration of the write. It is permissible for the title to group writes together under one storage write warning.

Note that it is permissible for a title to display an icon instead of a message – as long as it is visible for the correct amount of time and a message is given when you boot the game stating that the game is saving when the icon is displayed.
</Result>
<PassExamples>
•	The message displayed complies with the TCR.
•	The message is displayed for longer than required but less than 45 seconds.
•	Multiple short writes are combined into a longer, compliant write. The title uses the long storage write warning message.
•	A logo/icon is used in place of one or both of the messages. The game clearly messages the player indicating that the icon is for saving before any potential data loss.
</PassExamples>
<FailExamples>
•	The message is displayed for longer than the required time in excess of 45 seconds.
•	A message is displayed for less than the duration of the write.
•	The title displays a message that does not match the message in the terminology list.
•	No Message is displayed for writes under 500ms with a subsequent write under 500ms less than 3 seconds later.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 49 Game Content Persistence - Storage Device Removal
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	If the Memory Unit does not have the System Extended Packages installed, do the following:
a. Disable the Xbox HDD and insert a clean 256MB or 512MB MU.
b. Flash using the current remote recovery with the ‘Install System Extended Packages’ option checked.
c. Reboot the console and connect to Xbox LIVE.
2.	Visit all areas of the game where content can be saved to a storage device.
3.	Save each type of content to a MU.
4.	At various points during gameplay, remove device.
5.	Ensure the title gracefully handles all content being missing. This will include trying to load or access content which is no longer available.
6.	Repeat Steps 2 - 5 saving each type of content to a USB storage device.
7.	Repeat Steps 2 - 5 with saving to a hard disk and then removing the hard disk after the console has been switched off.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available. “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.

Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
•	Device removal causes the device selector to be displayed immediately or at the next save opportunity.
•	Device removal causes an appropriate message to be displayed immediately or at the next save opportunity.
</PassExamples>
<FailExamples>
  •	The Player is not informed when the device is removed. Save processes appear to work as normal. (save with progress).
  •	The Player is not informed when the device is removed. Save processes appear to work as normal. (Non progress save / options save)
  • The Player is mislead to believe that save processes appear to work as normal, after removing the in-use storage device. (Non progress save / options save)
  • The Player is mislead to believe that save processes appear to work as normal, after removing the in-use storage device. (Save with progress)
</FailExamples>
<NAExamples>
  • If the title was developed using XNA Game Studio, this TCR does not apply.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit
2.	Storage devices
</Hardware>
</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Storage: 49 Game Content Persistence - Save Files
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Create or download content for the title [maps, player content, etc]
2.	Create save games/replays that include this content.
3.	Remove the content.
4.	Attempt to load the save games/replays files from all possible locations.
5.	Attempt to load or use the removed content.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available.  “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.
Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
•	Missing content causes other content to become nonfunctional. An acceptable message is displayed.
•	Missing content does not cause other content to become nonfunctional.
</PassExamples>
<FailExamples>
•	Missing content causes other content to become nonfunctional. No messaging or misleading messaging is displayed.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 3
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 3, Storage: 49 Game Content Persistence - Cache
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Visit ALL levels/areas and save at various points on each.
3.	Stop emulation.
4.	Run certification tool “Clear Utility Partitions” in the Xbox 360 Launcher to remove all data from the Utility Regions.
5.	Boot the title.
6.	Load a save game from all possible locations.
7.	Play through the level.
8.	Repeat steps [4]-[7] for each save created in step [2].
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available. “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.
Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title hard locks or causes potential loss of data if the cache files are deleted.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 4
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 4, Storage: 49 Game Content Persistence - Damaged Content
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Visit all areas of the game where content can be saved to a storage device.
3.	Save each type of content.
4.	Damage the save by:
a. Turning off the console whilst saving or
b. After using Xbox 360 Neighborhood to copy the file to a PC, replace the first 4 bytes at byte offset 0x400 with 0x11111111, and place it back into its original location.
5.	Attempt to load the save game from all possible locations.
6.	Ensure the game lists the save game as damaged or presents the player with a message stating that the save is cannot be loaded.
7.	Attempt to create a new saved game whilst the damaged one is still present.
8.	Attempt to load the save game created in step [7] from all possible locations.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available. “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.
Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
•	Damaged content prevents access to gameplay or creation of new save game. Option to delete content is provided.
•	Damaged content prevents access to gameplay or creation of new save game. The Player is instructed to delete the damaged content in the Memory section of the Dashboard.
•	Damaged content is reported to the Player and the content is overwritten automatically.
</PassExamples>
<FailExamples>
•	Damaged content prevents access to gameplay or creation of new save game. The Player is not instructed as to how to fix.
•	Damaged content is not reported to the Player and the content is overwritten automatically. (progress based save)
•	Damaged content is not reported to the Player and the content is overwritten automatically. (settings save)
•	Damaged content is not reported to the Player but the Player can continue into gameplay and create new saves.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 5
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 5, Storage: 49 Game Content Persistence - Damaged DLC
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Download content for the title [maps, player content, etc]
2.	Damage the content by:
a. After using Xbox 360 Neighborhood to copy the file to a PC, replace the first 4 bytes at byte offset 0x400 with 0x11111111, and place it back into its original location.
3.	Attempt to use the downloadable content.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available. “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.
Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
•	Damaged DLC prevents access to gameplay or creation of new save game.  An option to delete the content is provided.
•	Damaged DLC prevents access to gameplay or creation of new save game. The Player is instructed to delete in the Memory section of the Dashboard.
</PassExamples>
<FailExamples>
•	Damaged DLC prevents access to gameplay or creation of new save game.  The Player is not instructed as to how to fix.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
49
</tcr_id>
<testcase_id>
CTC 6
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 6, Storage: 49 Game Content Persistence - Title Managed Storage
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Remove the TMS file from the server.
2.	Boot the title.
3.	Attempt to play a session that would require the TMS files to be downloaded (Note: this may happen during signing in).
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should gracefully handle any situation where expected content is not available. “Gracefully” includes displaying a friendly message to the user if it will affect gameplay, not crashing or hanging, and not requiring this content in order to continue play.
Note: When messaging the user, it is not required to state that content is corrupt or missing, just that it has not loaded.
</Result>
<PassExamples>
•	Some areas of the game are inaccessible when the TMS is removed.  An informative message is displayed.
•	Some areas of the game are inaccessible when the TMS is removed.  Affected areas are grayed out or not available.
</PassExamples>
<FailExamples>
•	The title crashes or causes potential loss of data when the TMS is removed.
•	Some areas of the title are inaccessible when the TMS is removed.  An informative message is not displayed.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	Storage devices
</Hardware>

</CTC>
<CTC>
<tcr_id>
50
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 50 Game Data Storage - Device Selection
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Development Kit without hard drive and without Memory Unit
2.	Profile A: Xbox LIVE multiplayer enabled gamer profile that does not have an avatar
3.	Memory Unit with the System Extended Packages installed
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	If the Memory Unit does not have the System Extended Packages installed, do the following:
a. Disable the Xbox HDD and insert a clean 256MB or 512MB MU.
b. Flash using the current remote recovery with the ‘Install System Extended Packages’ option checked.
c. Reboot the console and connect to Xbox LIVE.
2.	With the hard drive enabled and an empty MU connected, boot the title.
3.	Attempt to enter saveable gameplay.
4.	Verify that before the user enters gameplay, the user is able to choose a device to save to using the device selector.
5.	Repeat steps [3] and [4] for all game modes that allow the user to save (including map editors etc.).
6.	Repeat steps [2] – [5] using a USB storage device instead of a MU.
</Steps>
<Documentation>
1.	Refer to the Compliance Cheat Sheet for details of how to fill an MU
</Documentation>
<Result>
The title should allow the player to choose any connected device through the device selector.  It is permissible for the title to automatically select a device without displaying the device selector provided that an option is available in the title to manually invoke the device selector.

If a device is selected that has insufficient space to create a save, the player should be notified that the save operation was unsuccessful (this may take the form of a message stating the device is full).  This notification can be handled by either the Xbox Guide or by the title itself.
If no device is chosen before the user enters savable gameplay, the game must notify the player that data will not be saved.
</Result>
<PassExamples>
•	A save device is auto selected when 2 or more devices are connected where opportunity is present to change the device.
•	A save device is auto selected when 1 device is available.
•	The title uses its own UI to handle low storage conditions and the player is messaged appropriately.
•	The title uses the device selector for low storage and passes the correct number of bytes.
•	The device selector is displayed before gameplay and has a mechanism to change device later on.
•	The device selector is displayed before gameplay and has no mechanism to change device later on.
•	The "no data will be saved" notification is made before potential data loss.
</PassExamples>
<FailExamples>
•	A save device is auto selected when 2 or more devices are connected where no opportunity is present to change the device.
•	The title incorrectly handles low storage conditions resulting in real or potential loss of progress for the player.
•	The "no data will be saved" notification is not made if the player chooses to dismiss the device selector.
•	The device selector is not displayed nor is a valid auto selection made before potential data loss (Saveable gameplay).
•	The "no data will be saved" notification is not made if no storage is available on the console.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	MU with the System Extended Packages installed x 1
3.	USB storage device x 1
</Hardware>
</CTC>
<CTC>
<tcr_id>
50
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Storage: 50 Game Data Storage - Low Storage
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Development Kit without hard drive and without Memory Unit
2.	Profile A: Xbox LIVE multiplayer enabled gamer profile that does not have an avatar
3.	Memory Unit with the System Extended Packages installed
</Configuration>
<Definition>
None
</Definition>
<Steps>
If the title only supports a single save file follow the steps below:
1.	If the Memory Unit does not have the System Extended Packages installed, do the following:
a. Disable the Xbox HDD and insert a clean 256MB or 512MB MU.
b. Flash using the current remote recovery with the ‘Install System Extended Packages’ option checked.
c. Reboot the console and connect to Xbox LIVE.
2.	Disable the hard drive and connect a formatted Memory Unit.
3.	Create a new gamer profile on the Memory Unit and sign in.
4.	Launch the title and select the Memory Unit as the active storage device when prompted.
5.	Proceed through the title and create a new save file.
6.	Fill the Xbox 360 Memory Unit, with the save and its folder structure present, until there are 0 bytes of space.
7.	Delete the Game Save folder (it will be named with the title’s TitleID) which contains the save and the save folder structure. The Xbox 360 Memory Unit will now have exactly the amount of free space required to create the save and its folder structure.
8.	Add a 1KB file to the Xbox 360 Memory Unit so there is insufficient space.  This file will take up 1 block which equals 16,384 bytes.
9.	Launch the title.
10.	Select the Xbox 360 Memory Unit when prompted.
11.	The player should be notified that the save operation was not successful prior to entering gameplay.
12.	Repeats steps [2] – [11] using a USB storage device instead of a MU.
In cases where there are multiple save types in a title that can be created independently of each other, repeat the steps above for each type of save data. However, between step [9] and step [10] enter the game mode to save (making sure not to create any of the other save types while doing this, this could involve deliberately dismissing the Device Selector when first prompted) before attempting to save.
</Steps>
<Documentation>
1.	Refer to the Compliance Cheat Sheet for details of how to fill an MU
</Documentation>
<Result>
The title should allow the player to choose any connected device through the device selector.  It is permissible for the title to automatically select a device without displaying the device selector provided that an option is available in the title to manually invoke the device selector.

If a device is selected that has insufficient space to create a save, the player should be notified that the save operation was unsuccessful (this may take the form of a message stating the device is full).  This notification can be handled by either the Xbox Guide or by the title itself.
If no device is chosen before the user enters savable gameplay, the game must notify the player that data will not be saved.
</Result>
<PassExamples>
•	A save device is auto selected when 2 or more devices are connected where opportunity is present to change the device.
•	A save device is auto selected when 1 device is available.
•	The title uses its own UI to handle low storage conditions and the player is messaged appropriately.
•	The title uses the device selector for low storage and passes the correct number of bytes.
•	The device selector is displayed before gameplay and has a mechanism to change device later on.
•	The device selector is displayed before gameplay and has no mechanism to change device later on.
•	The "no data will be saved" notification is made before potential data loss.
</PassExamples>
<FailExamples>
•	A save device is auto selected when 2 or more devices are connected where no opportunity is present to change the device.
•	The title incorrectly handles low storage conditions resulting in real or potential loss of progress for the player.
•	The "no data will be saved" notification is not made if the player chooses to dismiss the device selector.
•	The device selector is not displayed nor is a valid auto selection made before potential data loss (Saveable gameplay).
•	The "no data will be saved" notification is not made if no storage is available on the console.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	MU with the System Extended Packages installed x 1
3.	USB storage device x 1
</Hardware>

</CTC>
<CTC>
<tcr_id>
50
</tcr_id>
<testcase_id>
CTC 3
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 3, Storage: 50 Game Data Storage - Data Loss Notification
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Development Kit without hard drive and without Memory Unit
2.	Profile A: Xbox LIVE multiplayer enabled gamer profile that does not have an avatar
3.	Memory Unit with the System Extended Packages installed
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Attempt to enter saveable gameplay without selecting a device.
2.	Verify that the title notifies the player that no data will be saved before the player enters gameplay.
3.	Repeat steps [1] and [2] for all game modes that allow the user to save (including map editors etc.).
</Steps>
<Documentation>
1.	Refer to the Compliance Cheat Sheet for details of how to fill an MU
</Documentation>
<Result>
The title should allow the player to choose any connected device through the device selector.  It is permissible for the title to automatically select a device without displaying the device selector provided that an option is available in the title to manually invoke the device selector.

If a device is selected that has insufficient space to create a save, the player should be notified that the save operation was unsuccessful (this may take the form of a message stating the device is full).  This notification can be handled by either the Xbox Guide or by the title itself.
If no device is chosen before the user enters savable gameplay, the game must notify the player that data will not be saved.
</Result>
<PassExamples>
•	A save device is auto selected when 2 or more devices are connected where opportunity is present to change the device.
•	A save device is auto selected when 1 device is available.
•	The title uses its own UI to handle low storage conditions and the player is messaged appropriately.
•	The title uses the device selector for low storage and passes the correct number of bytes.
•	The device selector is displayed before gameplay and has a mechanism to change device later on.
•	The device selector is displayed before gameplay and has no mechanism to change device later on.
•	The "no data will be saved" notification is made before potential data loss.
</PassExamples>
<FailExamples>
•	A save device is auto selected when 2 or more devices are connected where no opportunity is present to change the device.
•	The title incorrectly handles low storage conditions resulting in real or potential loss of progress for the player.
•	The "no data will be saved" notification is not made if the player chooses to dismiss the device selector.
•	The device selector is not displayed nor is a valid auto selection made before potential data loss (Saveable gameplay).
•	The "no data will be saved" notification is not made if no storage is available on the console.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit
2.	MU with the System Extended Packages installed
3.	USB storage device
</Hardware>

</CTC>
<CTC>
<tcr_id>
51
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 51 Game Data Storage Device Change
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox 360 Development Kit/Test Kit x 1
2.	Storage devices
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Prepare a console so that the hard drive is disabled and a Memory Unit containing a Gamer Profile is connected.
2.	Launch the title and select the MU as the active storage device when prompted.
3.	Visit all areas of the game which support saving content.  This is especially relevant to titles which support an auto-save feature.
4.	Save content to the MU.
5.	Remove this MU and attempt to update the saved content (this includes overwriting the previous content, as well as trying to create a new save).
6.	Ensure that the title informs the player that the chosen storage device is no longer available.
7.	Repeat steps [1] - [6] using a USB storage device instead of a MU.
8.	Repeat steps [2] - [7] on a console that has the gamer profile stored on an enabled hard drive.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title must inform the player when an in-use storage device is unavailable. It should allow the player one or more of the following choices:

•	Reconnect the storage device and continue gameplay with saving.
•	Continue gameplay without saving.
•	Exit the game back to a game menu.
•	Select a different storage device and continue gameplay with saving.
It should not automatically save to any other available device unless the player has specifically selected it.
</Result>
<PassExamples>
•	The player is notified about the removal of a storage device and then the title returns to the main menu.
•	The title waits until the next save access to handle messaging related to removing a storage device.
</PassExamples>
<FailExamples>
•	The title automatically selects a storage device when only one is available after a storage device removal.
•	The player is not notified about the failure to save progress to a removed storage device. The save process appears to complete successfully.
•	Storage device removal causes a crash or softlock within the title.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Console with all approved storage devices inserted. x 1
</Hardware>
</CTC>
<CTC>
<tcr_id>
118
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 118 Game Save Dependencies
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Attempt to start gameplay without signing in with a gamer profile.
3.	Attempt to save progress.
4.	Attempt to load the publisher provided saves (if not available, use tester created) on an Xbox 360 which has not played the title.
</Steps>
<Documentation>
1.	Publisher provided saves
</Documentation>
<Result>
The title should not allow the user to save their progress unless they have signed in with a gamer profile.

Game save progress must have no dependency on shared content.
</Result>
<PassExamples>
•	The title only allows saving when a gamer profile is present.
•	The title creates shared saves which are never required to be present when loading saves that are associated with a gamer profile.
•	The title does not support saving of game progress and only creates shared saves.
</PassExamples>
<FailExamples>
•	The title creates shared saves which are required to be present when loading saves that are associated with a gamer profile.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
168
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 168 Player-Created Content Dependencies
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Create and save a type of player-created content.
2.	Sign out of the profile from Step 2 and sign into a different profile.
3.	Attempt to manage the player-created content from Step 2 by editing, uploading, accessing, etc.
</Steps>
<Documentation>
Publisher provided documentation detailing all types of player-created content supported by the title
</Documentation>
<Result>
Player created content must be associated with a profile and only allow action on that content if the creating profile is signed in. If the content is shared it no longer needs to be associated with the original profile.
</Result>
<PassExamples>
•	Only the original creator of the player-created content is able to manage the content
•	A player other than the original creator is able to manage player-created content however the content was saved to multiple profiles when created.
</PassExamples>
<FailExamples>
•	A player is able to manage player-created content when they were not the original creator and the content was not saved to multiple profiles at the time of creation.
</FailExamples>
<NAExamples>
•	The title does not support player-created content.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
•	Xbox 360 Development Kit / Test Kit x 1
</Hardware>

</CTC>
<CTC>
<tcr_id>
54
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 54 Interactive Game Session Recording
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Identify all methods of communication during game play.
2.	Start every type of game session that supports game clips.
3.	Play through the game using a controller assigned to quadrant 1 while exercising every chat option.
4.	At the end of each game session, upload all possible stats/clips.
5.	Repeat steps 2-4 until you’ve played through every game session.
6.	Download all previously uploaded game clips and verify they do not contain any chat information.
7.	Repeat steps 1-6 using a controller assigned to a quadrant other than quadrant 1.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Uploaded game clips do not contain any form of chat information.
</Result>
<PassExamples>
•	The title uploads game clips to the Xbox LIVE service that do not contain any recorded chat.
</PassExamples>
<FailExamples>
•	The title uploads a game clip to the Xbox LIVE service that contains recorded chat.
</FailExamples>
<NAExamples>
•	The title does not support game clip functionality.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
55
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 55 Game Clip Download
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
Game Clip – A game clip is recorded game content stored on Xbox LIVE as an attachment to a leaderboard. Game clips are uploaded and downloaded using the XStorage API.
</Definition>
<Steps>
1.	Navigate to every screen that supports Game clip download/leaderboards.
2.	Verify Game clips are not downloaded without player-initiated action.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Game clips must not be downloaded automatically or silently. They can only be downloaded through player-initiated action.
</Result>
<PassExamples>
•	The player has to manually choose to download any game clip from the Xbox LIVE service.
</PassExamples>
<FailExamples>
•	The title automatically downloads game clips from the Xbox LIVE service without any direct request from the player.
</FailExamples>
<NAExamples>
•	The title does not support any game clip functionality.
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
59
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 59 Dependencies on Other Content Packages
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Download all available content packages.
2.	Boot the title.
3.	Load and test all content packages in the appropriate game modes.
4.	Delete one piece of content from the hard disk.
5.	Reboot the console and load the remaining pieces of content.
6.	Verify the remaining content is all usable without the deleted content.
7.	Re-download the deleted content and repeat steps 4-7 for the remaining pieces of content.
</Steps>
<Documentation>
None
</Documentation>
<Result>
No content package should have any dependencies on any other content package.
</Result>
<PassExamples>
•	After deleting a content package the remaining content package is usable but not all features are available without the deleted content package.
</PassExamples>
<FailExamples>
•	The functionality of the content package is dependent upon downloading the packages in a particular order. No messaging is displayed.
•	After deleting a content package the remaining content package is not usable and neither content package is related.
Example: Song Packs, characters, etc...
•	After deleting a content package the remaining content package is not usable and the content packages are related. The Player is messaged appropriately.
Example: Package 1=Level 1  Package 2=Cars for Level 1  When the package for Level 1 is deleted package 2 for the cars is no longer available.
•	The Player is required to download a FREE content package before being able to use another FREE or PREMIUM content package. The Player is messaged appropriately.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
60
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 60 Content Package Element Transfer
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	File Event Monitor (included in PIX which is listed in Start\Microsoft Xbox 360 SDK\Performance)
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Download all available content packages.
2.	Boot the title.
3.	Perform the following:
a. Visit all levels/areas [use Publisher provided saves].
b. Visit all Menu/Sub-menu systems.
c. Watch all Cinematic sequences [use Publisher provided saves].
d. Load/Use all content packages that are available interactively [Maps, Weapons, Tracks, Cars, etc.]
e. Create a save that uses the content packages.
4.	Using File Event Monitor, verify that no elements of a content package has been moved or copied.
5.	Delete the content packages.
6.	Verify the content added by the content packages is no longer available, even in the save games.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title must not move or copy elements of a content package file to any alternate storage location.

Content must not be available after its content package has been deleted.

Note that in cases where the downloadable package is a flag that unlocks content already present on the disk, the unlocked content will still be available after loading save games. This is acceptable.
</Result>
<PassExamples>
•	Functionality provided by a content package does not persist after the content package is deleted.
</PassExamples>
<FailExamples>
•	Functionality provided by a content package persists after the content package is deleted.  The assets for the extended functionality are present in the Content Package and not present on the Game Disc (ie >112kb).
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
</Hardware>

</CTC>
<CTC>
<tcr_id>
132
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 132 In-Game Offer and Price Descriptions
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Verify that the title offers items for sale from Marketplace within the game.
2.	Ensure that the item price in points, the item name and the item description are all displayed at some point prior to the financial transaction being completed.
</Steps>
<Documentation>
None
</Documentation>
<Result>
For games that support an in-game store the item must display the price in points, the item name and description at some point prior to completing the financial transaction.
</Result>
<PassExamples>
•	The title does not display the price in points, does not include the item name or description however all this information is provided in the marketplace blade prior to completing the financial transaction.
</PassExamples>
<FailExamples>
•	The title displays the price in monetary units anywhere in the UI prior to completing the purchase of the item.
•	The title does not display the price in points, does not include the item name or description and the item does not link to the marketplace blade that includes this information.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit/Test Kit x 1
</Hardware>

</CTC>
<CTC>
<tcr_id>
61
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 61 Content Sharing Privileges
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	From the Settings screen of the Xbox Dashboard, select Privacy > Change Settings > Customize > Member Content > Blocked and then apply changes to set the profile's user generated content flag to blocked.
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Verify that the User Created Content flag is set to Blocked.
2.	Attempt to access areas of the title where player-created content may be downloaded or uploaded, e.g. game snapshots, graphics, maps, voice messages and annotations, video messages, images captured from the camera, blocks of text (a review or forum style posting) and so on.
3.	Ensure no content is accessed or uploaded.
4.	Repeat steps 1 - 3 but with multiple profiles signed in and the profile with the restriction as an idle profile.
</Steps>
<Documentation>
None
</Documentation>
<Result>
No player-created content (game snapshots, graphics, maps, voice messages and annotations, video messages, images captured from the camera, blocks of text (a review or forum style posting)  and so on) should be seen or transmitted to other players.  If more than one player is signed in on the console, the most restrictive setting should be used and user created content should be blocked if appropriate.
Note that video chat, text chat, voice chat, player-editable strings and text tags are not considered player-created content.
</Result>
<PassExamples>
Game settings that are not customizable
•	The title receives or transmits user created content to other Players on Xbox LIVE when the user's created content flag is turned off on either the active or inactive profile.
Example: Character hair color.
A game clip that has no customizable features
•	The title receives or transmits user created content to other Players on Xbox LIVE when the user's created content flag is turned off on either the active or inactive profile.
Example: Ghost car with no ability to customize tracks.
Message Boards or Social Network Sharing
•	The title does not receive or transmit blocks of text via a Message Board or Social Network post to other Players on Xbox LIVE when the user's created content flag is turned off on either the active or inactive profile.
</PassExamples>
<FailExamples>
Freehand art/designs and/or text with no string vetting
•	The title receives or transmits user created content to other Players on Xbox LIVE when the user created content flag is turned off on either the active or inactive profile.
Example: Customizable tee-shirt designs.
Message Boards or Social Network Sharing
•	The title receives or transmits blocks of text via a Message Board or Social Network post to other Players on Xbox LIVE when the user's created content flag is turned on on either the active or inactive profile.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
62
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 62 Per-Player Storage Reads and Writes
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Play game sessions of every length that the title allows whilst logging using NetMon.
2.	Examine the NetMon logs for content transfer to the Xbox LIVE service. Content transfer will be destined for the XSP ports 14 and 15.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should make no more than one read and one write per file at the beginning and end of the session, and one read-write at every 5 minute mark.
</Result>
<PassExamples>
•	The title makes only one read and one write per file at the beginning and the end of an Xbox LIVE game session. If the game session is longer than 5 minutes then one additional read-write is permitted at each 5 minute interval.
</PassExamples>
<FailExamples>
•	The title makes more than one read and one write per file at the beginning and end of an Xbox LIVE game session, and one read-write at every 5 minute mark.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
63
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 63 Storage Read Limits for Per-Title Title Managed Storage
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Visit all areas and use all functionalities of the title over a time period exceeding one hour.
2.	Examine NetMon logs. Content transfer will be communication with the XSP ports 14 and 15.
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title must not read the same content from the global storage at a rate exceeding once per hour.
</Result>
<PassExamples>
•	The title reads the same content from Per-Title Managed Storage at a rate not exceeding once per hour.
</PassExamples>
<FailExamples>
•	The title reads the same content from Per-Title Managed Storage at a rate exceeding once per hour.
•	The title continuously calls the Per-Title Managed Storage service when the TMS is unavailable.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
64
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Misc.: 64 Transmission of Player-Created Content
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Tools for testing this requirement are not yet complete. However, it is in the game’s best interest to completely abide by this requirement as failure to do so may cause issues in the future.
</Steps>
<Documentation>
None
</Documentation>
<Result>
None
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
None
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
65
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 65 Point-to-Point Content Transmission
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	WinDiff or similar file comparison tool.
2.	Two Xbox 360 Development/Test Kits.
3.	API Monitor
</Tools>
<Configuration>
1.	Set the .xdb file search path in the APIMon settings.
2.	Configure APIMon to monitor the following functions.
XContentCreatePackage
XContentOpenPackage
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Identify all transmittable saved content types that the title supports.
2.	Create all transmittable content types on console A.
3.	Copy all of these files, from console A, to a PC, via Network Neighborhood.
4.	Start monitoring both consoles using APIMon.
5.	Transmit all saved content types created in step 2 to console B.
6.	Verify that the game calls XContentOpenPackage() on console A and XContentCreatePackage() on console B.
7.	Copy the content that has been transmitted to console B, to a PC, via Network Neighborhood.
8.	Using a file comparison tool, such as WinDiff, compare all source files from step 3 with all destination files in step 7.
</Steps>
<Documentation>
None
</Documentation>
<Result>
All transferrable content packages must remain consistent between the source console (transmitter) and destination console (receiver).
</Result>
<PassExamples>
•	Using a diff'ing tool, the package on console B (destination) is identical to the package on console A (source).
Comparison Result: Package A == Package B
</PassExamples>
<FailExamples>
None
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
67
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Audio Visual: 67 Gamer Preference Inversion Setting
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Profile A: Game Control Inversion Setting set to “normal”
2.	Profile B:  Game Control Inversion Setting set to “inverted”
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Select profile A.
3.	Enter gameplay.
4.	Verify that the controls are “normal”.
5.	Reset the console and boot the title again.
6.	Select profile B.
7.	Verify that the controls are “inverted”.
</Steps>
<Documentation>
None
</Documentation>
<Result>
When profile A is used, the controls must be set to “normal” (pushing up on the stick causes the camera view to tilt up, while moving the stick down causes the camera view to tilt down).

When profile B is used, the controls must be set to “inverted” (pushing up on the stick causes the camera view to tilt down, while pushing the stick down causes the camera view to tilt up).
</Result>
<PassExamples>
•	The title correctly uses the Vertical Look setting defined in the Dashboard when defining in-game settings for the first time (New Game).
</PassExamples>
<FailExamples>
•	The title fails to use the Vertical Look setting defined in the Dashboard, when defining in-game settings for the first time (New Game).
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>

<CTC>
<tcr_id>
68
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 68 Gamer Profile Settings Usage
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Select a profile and create a save. 
3.	Return to the Dashboard and change gamer card settings, including buying a new gamertag or gamer profile name. 
4.	Boot the title and load the save made in step 2. 
5.	Verify that the gamer card settings visible in-game have changed and are not stored in the save game. Verify that any reference to the gamertag (created automatically by the title) has been updated. This includes any reference on XLSP hosted functionality as well as any reference within the title. 
6.	Verify that no gamer card settings or gamer preferences are visible in the UI on another console whilst in a system link or Xbox LIVE game. 

If gamer pictures are visible within the title run the following steps: 
7.	View profile A’s gamer picture with profile B. 
8.	Change profile A’s gamer picture. 
9.	Attempt to view profile A’s gamer picture with profile B. 
10.	Verify it is has changed to the newly selected picture.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
Gamer card settings (including gamer pictures) must not be stored or transmitted. For example, if the title uses the gamertag in-game (i.e. in a welcome message) or on an XLSP server (such as naming data that is uploaded) then this name should not persist if the user changes their gamertag (by buying a new gamertag for example). This does not apply if the user has entered the gamertag manually. Note however that gamertags can be transmitted. 

Gamer preferences must not be transmitted.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title does not update the associated Gamertag or Gamer Profile Name that is displayed within the title or Xbox 360 Dashboard for locally stored save data such as ‘Replays’, ‘Saves’, ‘Options’, ‘Maps’, ‘Teams’ etc.
Note: The player may be required to connect to Xbox LIVE in order to resolve this issue, in which case, the title passes this TCR. 
•	The title does not update a Player's Gamertag and/or Gamer Picture within an Xbox LIVE multiplayer session when the Player has changed their Gamertag/Gamer Picture; the game continues to display the old Gamertag/Gamer Picture. 
Note: A console reboot may be necessary to resolve this issue, in which case, the title passes this TCR. 
•	The title does not update the associated Gamertag displayed for persistent Xbox LIVE posts such as ‘Game Clips’, ‘Replays’, 'Leaderboards' or other custom posts 
Example: Messages, bulletin post, player challenge, costume, theme, livery, tournament, league etc.
Note: This applies to both previously and newly created posts. 
•	The title stores Gamertag/Gamer Profile Name for player's saved data.
Example: ‘Replays’, ‘Saves’, ‘Options’, ‘Maps’, ‘Teams’ etc. 
Example: A change in Gamertag/Gamer Profile Name results in the save becoming unusable. 
•	The title transmits/displays gamer preference settings (Game Difficulty, Y-Axis Inversion, Transmission etc.) to another Player on Xbox LIVE or System Link. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>

<CTC>
<tcr_id>
69
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 69 No Sharing of Achievements
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Xbox LIVE profiles x 3
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Sign in with 2 Xbox LIVE profiles.
3.	Using profile A (leaving profile B inactive), save the game just before gaining an achievement.
4.	Continue on and gain the achievement. Verify the game does not auto save and overwrite the save created in step 3.
5.	Verify that this achievements has only been awarded to profile A.
6.	Load the saved game created in step 3
7.	Sign out profile A and sign in profile B.
8.	Continue gameplay if the title does not return to the front end.
9.	Verify that profile B does not gain the achievement gained by profile A in step 4
10.	Return to the Dashboard and sign in profile A (with achievements and saved progress), and several other profiles (B, C and D) which have no achievements.
11.	Boot the title and load profile A’s save.
12.	Verify that no achievements have been awarded to profiles B, C or D.
13.	From within the Memory area of the Dashboard attempt to copy profile A’s save to profile B (which has no achievements).
14.	If this is possible, verify that no achievements have been transferred.
15.	Reboot the title and attempt to earn further achievements with profile B.
16.	Verify that no further achievements can be gained.
17.	From Xbox 360 Neighborhood copy profile A’s save (which has several achievements) to profile B (which has no achievements).
18.	Reboot the title and verify that no achievements have been transferred.
19.	Carry out various actions which may result in achievements being awarded (such as completing a race, buying a car, replaying a level etc.) and verify that no achievements are awarded.
20.	Verify that no further achievements can be gained using progress in the copied save.
</Steps>
<Documentation>
1.	Publisher documentation on game save behavior.
</Documentation>
<Result>
Games must not award or transfer achievements to profiles that have not directly earned the achievement.

Progress made after a save has been transferred to a new profile must be unable to earn any achievements.

At the end of the test cycle, check with all testers that no other sharing of achievements has occurred.
</Result>
<PassExamples>
•	Co-op/Team based achievements are awarded to all participants that meet the achievement criteria.
Example: Co-op - All players are awarded a 'Complete Level 3 on Hard' difficulty after completing level 3 on hard. Team - In a 4 vs. 4 match, all players of the winning team are awarded a 'Win a match' achievement.
</PassExamples>
<FailExamples>
•	Achievements are freely awarded to a player for which no progress has been made/attempted.
Example: Upon initial launch of the title the player is instantly awarded a completion based achievement.
•	Achievements can be obtained directly through input of a cheat code or use of a game option, to bypass achievement criteria.
Example: A player is awarded an achievement for completing the game upon entry of a cheat code or selection of a menu item.
•	Achievements can be obtained by loading saved progress from another profile. Upon load, the player is awarded one or more achievements immediately, or the user can exploit progress from the loaded save to obtain one or more achievements more easily.
•	Achievements are awarded to an inactive gamer profile when the currently active profile satisfies achievement criteria.
•	Achievements are awarded to a player that has fallen significantly short of meeting the criteria/quota outlined by the achievement description.
•	Achievements can be obtained by loading saved progress from another profile that is transferred using the Xbox Neighborhood. Upon load, the player is awarded one or more achievements immediately.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
70
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 70 Rich Presence
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
3 Xbox LIVE profiles who are Friends (A, B and C)
•	Console 1: Profile A – Active Player (in control of the game)
•	Console 1: Profile B – Inactive Player (not in control of the game)
•	Console 2: Profile C – Active Player
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Sign in profile A on quadrant 1 and profile B on quadrant 2.
2.	Boot the title.
3.	Enter active gameplay with profile A.
4.	On the other console sign in profile C.
5.	From profile C observe the title’s presence information for profiles A (active) and B (inactive)
6.	With profile A, continue to make game progress.
7.	From profile C verify that the presence information of profiles A (active) and B (inactive) is always displayed correctly.
8.	Repeat steps [2]-[7], signing profile A (active) in on a quadrant other than quadrant 1 and profile B (inactive) on quadrant 1.
9.	Repeat steps [1]-[8] for all gameplay modes.
10.	Repeat steps [1]-[9] for all languages supported by the XLAST.
Note: If changing language, ensure the Xbox 360 is cold rebooted to avoid caching issues.
</Steps>
<Documentation>
A training video is available for this test case at developer.xboxlive.com under Certification > Training Materials > Certification Video Series.
</Documentation>
<Result>
The title must accurately update the presence information so that when viewing a Friend on the Friends List, all information accurately reflects the player’s state and is correctly displayed. Inactive players must not have the presence information of an active player. The title should provide at least one rich presence string per major play mode. Demos must state that they are a demo and must not have an identical name to the full title.
</Result>
<PassExamples>
•	The title displays presence information such as "online", "Idle", "Away", "Not Playing", "In Menu" for the inactive presence in all game modes.
•	A SKU (commonly a German SKU) of a title has a different TitleID, does not support cross SKU multiplayer but does clearly identify itself as a different version. Example: "Titlename [Ger]"
•	The title displays a placeholder tile image in the rich presence when viewing the rich presence using a player that hasn’t previously launched the title.
</PassExamples>
<FailExamples>
•	The title name has been abbreviated in such a way that it doesn't allow a player to identify the title, yet there's space (22 characters) available to include the title name.
•	Presence information is displayed in a different language to that which is selected in the Xbox 360 Dashboard and is supported by the XLAST.
Example: The XLAST contains localized strings for German but when viewing presence information on a German configured Xbox, the presence appears in French.
Note: It is acceptable for Japanese presence strings to contain complete or partial English terms.
•	During gameplay, the title displays active presence for a gamer profile signed-in on an inactive controller.
•	Rich Presence information is displayed as &lt;translated text&gt; for any languages.
•	Rich Presence for a Demo or Tech Beta does not explicitly identify the title as a "Demo” or “Beta” in the Title Name.
•	A SKU (commonly a German SKU) of a title has a different TitleID, does not support cross SKU multiplayer and does not clearly identify itself as a different version.
•	The rich presence for the second active Player in a local multiplayer game session is inaccurate. (ex. idle, main menu) Example: Idle, Away, Main Menu
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kits x 2
</Hardware>
</CTC>
<CTC>
<tcr_id>
71
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 71 Gamer Card Access
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Throughout the title, find every area where gamertags are listed other than local and system link multiplayer sessions.
3.	In each area where UI navigation is enabled and gamertags are displayed, attempt to view the gamer card for each gamertag.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Whenever gamertags are listed in an area where UI navigation is enabled, the player must be able to view the gamer card for any gamertag. Areas where gamertags might be listed include, but are not limited to: Leaderboards, session lobbies and post-game statistics.

Note that if the list can include non-Xbox LIVE enabled profiles, then it is not a requirement to be able to access gamer cards.

This requirement does not apply when displaying gamertags in areas where UI navigation is not enabled, such as static loading screens, or in a heads-up display during active gameplay.
</Result>
<PassExamples>
  The title provides access to a player's gamercard in all locations where they are enumerated.
  The title does not provide the player an option to the view other player’s gamer cards in local or system link multiplayer areas (including game sessions, lobbies, results screens, and menus).
</PassExamples>
<FailExamples>
When choosing to display another player's gamercard, the title displays a gamercard that doesn't match what was chosen.

Example: Displays a completely different gamercard.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>
</CTC>
<CTC>
<tcr_id>
142
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 142 No Sharing of Avatar Awards
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Several Xbox LIVE profiles 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Sign in with 2 Xbox LIVE profiles. 
3.	Using profile A (leaving profile B inactive), save the game just before gaining an avatar award. 
4.	Continue on and gain the award. Verify the game does not auto save and overwrite the save created in step [3]. 
5.	Verify that this award has only been awarded to profile A. 
6.	Load the saved game created in step [3] 
7.	Sign out profile A and sign in profile B. 
8.	Continue gameplay if the title does not return to the front end. 
9.	Verify that profile B does not gain the avatar award gained by profile A in step [4] 
10.	Return to the Dashboard and sign in profile A (with avatar awards and saved progress), and several other profiles (B, C and D) which have no awards. 
11.	Boot the title and load profile A’s save. 
12.	Verify that no awards have been awarded to profiles B, C or D. 
13.	From within the Memory area of the Dashboard attempt to copy profile A’s save to profile B (which has no awards). 
14.	If this is possible, verify that no awards have been transferred. 
15.	Reboot the title and attempt to earn further awards with profile B. 
16.	Verify that no further awards can be gained. 
17.	From Xbox 360 Neighborhood copy profile A’s save (which has several awards) to profile B (which has no awards). 
18.	Reboot the title and verify that no awards have been transferred. 
19.	Carry out various actions which may result in awards being awarded (such as completing a race, buying a car, replaying a level etc.) and verify that no awards are awarded. 
20.	Verify that no further awards can be gained using progress in the copied save. 
</Steps>
<Documentation>
1.	Publisher documentation on game save behavior. 
</Documentation>
<Result>
Games must not award or transfer avatar awards to profiles that have not directly earned the award.  Progress made after a save has been transferred to a new profile must be unable to earn any awards. At the end of the test cycle, check with all testers that no other sharing of awards has occurred. 
</Result>
<PassExamples>
•	Co-op/Team based avatar awards are awarded to all participants that meet the achievement criteria. 
o	Example (Co-op): All players are awarded a 'Complete Level 3 on Hard' difficulty after completing level 3 on hard. 
o	Example (Team): In a 4 vs. 4 match, all players of the winning team are awarded a 'Win a match' avatar award. 
o	Note: It is acceptable for a title to disregard '%' contribution per player and give avatar awards to all players involved. 
</PassExamples>
<FailExamples>
•	Avatar awards are freely awarded to a player for which no progress has been made/attempted. Example: Upon initial launch of the title the player is instantly awarded a completion based avatar award. 
•	Avatar awards can be obtained directly through input of a cheat code or use of a game option, to bypass avatar award criteria. Example: A player is awarded an avatar award for completing the game upon entry of a cheat code or selection of a menu item. 
•	Avatar awards can be obtained by loading saved progress from another profile. Upon load, the player is awarded one or more avatar awards immediately, or the user can exploit progress from the loaded save to obtain one or more avatar awards more easily. 
•	Avatar awards are awarded to an inactive gamer profile when the currently active profile satisfies avatar award criteria. 
•	Avatar awards are awarded to a player that has fallen significantly short of meeting the criteria/quota outlined by the avatar award description. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
73
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 73 Achievements
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox LIVE Game Configuration
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Open the game configuration file and confirm that the required number of achievements are defined, and that no achievement descriptions refer to downloadable content.
2.	Boot the title.
3.	Identify the two documented achievements which would be simplest to gain and for each achievement, using an Xbox LIVE gamer profile, load any applicable save or cheat, and accomplish achievement.
Note: Saves are associated with a profile.
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas
2.	Publisher documentation for each achievement’s method for accomplishment
</Documentation>
<Result>
Non-compliance would be the inability to achieve all achievements in the game; however, due to time constraints, only 2 will be tested.
</Result>
<PassExamples>
•	The title contains a secret achievement.
•	The game configuration file for a title update defines achievements for DLC that was released prior to the title update being submitted.
</PassExamples>
<FailExamples>
•	The title does not unlock an achievement when the conditions in the achievement’s description are met.
•	The title contains an achievement with an inaccurate description that would prevent the player from earning the achievement normally.
•	The title contains a placeholder achievement.
•	The game configuration file for a Final submission defines an achievement that can not be obtained in the base game.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
78
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 78 Non-Session Leaderboard and Profile Request Limits
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox LIVE Game Configuration
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Open the game configuration file and confirm that the required number of achievements are defined, and that no achievement descriptions refer to downloadable content.
2.	Boot the title.
3.	Identify the two documented achievements which would be simplest to gain and for each achievement, using an Xbox LIVE gamer profile, load any applicable save or cheat, and accomplish achievement.
Note: Saves are associated with a profile.
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas
2.	Publisher documentation for each achievement’s method for accomplishment
</Documentation>
<Result>
Non-compliance would be the inability to achieve all achievements in the game; however, due to time constraints, only 2 will be tested.
</Result>
<PassExamples>
•	The title contains a secret achievement.
•	The game configuration file for a title update defines achievements for DLC that was released prior to the title update being submitted.
</PassExamples>
<FailExamples>
•	The title does not unlock an achievement when the conditions in the achievement’s description are met.
•	The title contains an achievement with an inaccurate description that would prevent the player from earning the achievement normally.
•	The title contains a placeholder achievement.
•	The game configuration file for a Final submission defines an achievement that can not be obtained in the base game.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
136
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 136 Session Leaderboard and Profile Read and Write Limits - Single Player with Stats Upload
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon
2.	NetMon
</Tools>
<Configuration>
1.	2 Xbox LIVE multiplayer enabled gamer profiles
2.	Set APIMon to monitor the following APIs:
Interactive Game Session API’s
XSessionCreate()
XSessionStart()
XSessionEnd()
The relevant leaderboard read APIs are:
XUserReadStats()
XUserCreateStatsEnumeratorByRank()
XUserCreateStatsEnumeratorByRating()
XUserCreateStatsEnumeratorByXuid()
The relevant leaderboard write APIs are:
XSessionFlushStats()
The relevant profile read API is:
XUserReadProfileSettingsByXuid()
The relevant profile write API is:
XUserWriteProfileSettings()
The following API’s are not currently available in APIMon:
XUserCreateAchievementEnumerator()/XEnumerate()
XUserEstimateRankForRating()
</Configuration>
<Definition>
None
</Definition>
<Steps>
Scenario 1: Single Player with Stats Upload
1.	Boot the title and sign-in to Xbox LIVE.
2.	Start APIMon and NetMon at the same time. Monitor all network traffic from the console to the Xbox LIVE service in NetMon. Monitor for all APIs listed under Configuration in APIMon.
3.	Complete several single player game sessions noting the length of time it takes to complete each session.
4.	Identify and count the number of calls or conversations made to the Stat servers that occur between  XSessionStart() and  XSessionEnd().
5.	Identify and count the number of API calls that occur between XSessionStart() and XSessionEnd().
6.	Repeat steps 2-5 for every game mode.
</Steps>
<Documentation>
1.	Network Monitor 3 Cheat Sheet
2.	API Monitor Quick Guide
3.	To prevent false failures, do not use the Xbox Guide or gain any achievements.
4.	Packets that are destined for the Stats service will be using an Xbox LIVE port of 7.
5.	Example of a Complete Stats call to the service:
Frame 1: -S----, Data:4  XboxIP (LiveIP
Frame 2: -S--A-, Data:4 LiveIP ( XboxIP
Frame 3: ----A-, S:, D:7, Data:0  XboxIP ( LiveIP
Frame 4: ---PA-, Data: &lt;#&gt; XboxIP ( LiveIP
Frame 5: ---PA-, Data: &lt;#&gt; LiveIP (Xbox IP
Frame 6: ----A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 7: F---A-, S:7, D:&lt;#&gt;, LiveIP ( XboxIP
Frame 8: ----A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 9: F---A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 10: ----A-, S:7, D:&lt;#&gt;, LiveIP ( XboxIP
6.	Definitions:
Interactive Game Session - Gameplay that includes interaction with other Xbox LIVE players or includes functionality that interacts with the Xbox LIVE service to upload stats. The game session includes an XSessionStart() and XSessionEnd() call during gameplay or at the end of the game session. The interaction is with the Xbox LIVE service.
Player Initiated Stats - Stats reads or writes that occur when the Player enters stats related menus, selects a UI option to refresh the UI related to stats, ends a level or triggers a new map.
</Documentation>
<Result>
For sessions that last 5 minutes or less, ensure there is no more than 1 leaderboard read and 1 leaderboard write and 1 profile read and 1 profile write per player.

For sessions that last more than 5 minutes, ensure there is no more 1 leaderboard read and 1 leaderboard write and 1 profile read and 1 profile write per player at each subsequent 5 minute interval.

Player initiated stats reads that happen outside of a game session are exempt from this requirement.
</Result>
<PassExamples>
•	The title makes more than 1 relevant leaderboard/profile read or write however all calls to the stats service do not occur between XSessionStart() and XSessionEnd(). (See TCR 078)
•	The title makes relevant read API calls each time the Player presses A to access the leaderboards from the in-game pause menu.
•	The Player can generate multiple relevant stats read API calls within a 5 minute interval by actively navigating the menus.
</PassExamples>
<FailExamples>
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more leaderboard reads within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more profile reads within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more leaderboard writes within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more profile writes within a 5 minute interval.
•	The title includes a session within a session with 2 profile writes occurring within a 5 minute interval:
o	XSessionStart()
	XSessionStart()
	XUserWriteProfileSettings()
	XSessionEnd()
	XSessionStart()
	XUserWriteProfileSettings()
	XSessionEnd()
o	XSessionEnd()
•	The title does not make any calls to the stats service during the first 5 minute interval however the game lasts longer than 5 minutes and makes more than 1 read and/or 1 write during a subsequent interval for leaderboards and/or profiles. All calls to the stats service occur between the XSessionStart() and XSessionEnd() calls.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
Reproduce any failures several times to ensure the stats calls are due to the title. If achievements are gained the related API calls and NetMon calls or conversations are deducted.

Do not randomly select any 5 minute interval, the intervals must be subsequent. If you see 3 NetMon calls for each API call, the APIMon log trumps the NetMon capture.

The following API calls are not a failure of the TCR but can be used to provide additional information to help with review of the NetMon capture. XSessionCreate() XSessionStart() XSessionEnd() XUserWriteAchievements()

When counting the number of calls for XUserReadStats() deduct the buffer request call. This API must be called twice however only one call causes port-7 traffic and has an impact on the stats service. If XUserReadStats is called with the pResults argument set to NULL then it does not affect the stats service. The API returns the size of the buffer needed into pcbResults. If the API is called with pResults set to a non-NULL value, then the API is making a call against the stats service. XUserReadStats(): Call 1: Parameter: pResults: 0x0 --- This indicates a buffer request as the pResults argument is set to NULL which does not affect the stats service pcbResults: 0x7004F580 Call 2: Parameter: pResults: 0x454733D0 --- This indicates that the buffer is a non-NULL value and impacts the stats service pcbResults: 0x454733D0
</Analysis>
<Faq>
Q: Does interactive Game Session include singleplayer gameplay that makes stats calls right after gameplay has ended, with those stats calls occurring between XSessionStart() and XSessionEnd()?
A: Yes

Q: Do we monitor for XSessionWriteStats?
A: No, as this API just accumulates stats. XSessionEnd() and XSessionFlushStats cause the stats to be sent to the service

Q: In a game where a match is comprised of multiple rounds that are shorter than 5 minutes, what is considered a single interactive game session?
A: Each round with one XSessionStart()/XSessionEnd() pair is considered a single interactive game session
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
136
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Networking: 136 Session Leaderboard and Profile Read and Write Limits - Multiplayer
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon
2.	NetMon
</Tools>
<Configuration>
1.	2 Xbox LIVE multiplayer enabled gamer profiles
2.	Set APIMon to monitor the following APIs:
Interactive Game Session API’s
XSessionCreate()
XSessionStart()
XSessionEnd()
The relevant leaderboard read APIs are:
XUserReadStats()
XUserCreateStatsEnumeratorByRank()
XUserCreateStatsEnumeratorByRating()
XUserCreateStatsEnumeratorByXuid()
The relevant leaderboard write APIs are:
XSessionFlushStats()
The relevant profile read API is:
XUserReadProfileSettingsByXuid()
The relevant profile write API is:
XUserWriteProfileSettings()
The following API’s are not currently available in APIMon:
XUserCreateAchievementEnumerator()/XEnumerate()
XUserEstimateRankForRating()
</Configuration>
<Definition>
None
</Definition>
<Steps>
Scenario 2: Multiplayer
1.	Boot the title, sign-in to Xbox LIVE.
2.	Start APIMon and NetMon at the same time. Monitor all network traffic from the console to the Xbox LIVE service in NetMon. Monitor for all APIs listed under Configuration in APIMon.
3.	Host a multiplayer game session and join it with another console.
4.	Play several game sessions of varying lengths between 4 and 10 minutes.
5.	Identify and count the number of calls or conversations made to the Stat servers from both consoles that occur between XSessionStart() and XSessionEnd().
6.	Identify and count the number of API calls that occur between XSessionStart() and XSessionEnd().
7.	Repeat steps 2-7 for every multiplayer game mode.
</Steps>
<Documentation>
1.	Network Monitor 3 Cheat Sheet
2.	API Monitor Quick Guide
3.	To prevent false failures, do not use the Xbox Guide or gain any achievements.
4.	Packets that are destined for the Stats service will be using an Xbox LIVE port of 7.
5.	Example of a Complete Stats call to the service:
Frame 1: -S----, Data:4  XboxIP (LiveIP
Frame 2: -S--A-, Data:4 LiveIP ( XboxIP
Frame 3: ----A-, S:, D:7, Data:0  XboxIP ( LiveIP
Frame 4: ---PA-, Data: &lt;#&gt; XboxIP ( LiveIP
Frame 5: ---PA-, Data: &lt;#&gt; LiveIP (Xbox IP
Frame 6: ----A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 7: F---A-, S:7, D:&lt;#&gt;, LiveIP ( XboxIP
Frame 8: ----A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 9: F---A-, S:&lt;#&gt;, D:7, XboxIP ( LiveIP
Frame 10: ----A-, S:7, D:&lt;#&gt;, LiveIP ( XboxIP
6.	Definitions:
Interactive Game Session - Gameplay that includes interaction with other Xbox LIVE players or includes functionality that interacts with the Xbox LIVE service to upload stats. The game session includes an XSessionStart() and XSessionEnd() call during gameplay or at the end of the game session. The interaction is with the Xbox LIVE service.
Player Initiated Stats - Stats reads or writes that occur when the Player enters stats related menus, selects a UI option to refresh the UI related to stats, ends a level or triggers a new map.
</Documentation>
<Result>
For sessions that last 5 minutes or less, ensure there is no more than 1 leaderboard read and 1 leaderboard write and 1 profile read and 1 profile write per player.

For sessions that last more than 5 minutes, ensure there is no more 1 leaderboard read and 1 leaderboard write and 1 profile read and 1 profile write per player at each subsequent 5 minute interval.

Player initiated stats reads that happen outside of a game session are exempt from this requirement.
</Result>
<PassExamples>
•	The title makes more than 1 relevant leaderboard/profile read or write however all calls to the stats service do not occur between XSessionStart() and XSessionEnd(). (See TCR 078)
•	The title makes relevant read API calls each time the Player presses A to access the leaderboards from the in-game pause menu.
•	The Player can generate multiple relevant stats read API calls within a 5 minute interval by actively navigating the menus.
</PassExamples>
<FailExamples>
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more leaderboard reads within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more profile reads within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more leaderboard writes within a 5 minute interval.
•	Within XSessionStart() and XSessionEnd() the title makes 2 or more profile writes within a 5 minute interval.
•	The title includes a session within a session with 2 profile writes occurring within a 5 minute interval:
o	XSessionStart()
	XSessionStart()
	XUserWriteProfileSettings()
	XSessionEnd()
	XSessionStart()
	XUserWriteProfileSettings()
	XSessionEnd()
o	XSessionEnd()
•	The title does not make any calls to the stats service during the first 5 minute interval however the game lasts longer than 5 minutes and makes more than 1 read and/or 1 write during a subsequent interval for leaderboards and/or profiles. All calls to the stats service occur between the XSessionStart() and XSessionEnd() calls.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
Reproduce any failures several times to ensure the stats calls are due to the title. If achievements are gained the related API calls and NetMon calls or conversations are deducted.

Do not randomly select any 5 minute interval, the intervals must be subsequent. If you see 3 NetMon calls for each API call, the APIMon log trumps the NetMon capture.

The following API calls are not a failure of the TCR but can be used to provide additional information to help with review of the NetMon capture. XSessionCreate() XSessionStart() XSessionEnd() XUserWriteAchievements()

When counting the number of calls for XUserReadStats() deduct the buffer request call. This API must be called twice however only one call causes port-7 traffic and has an impact on the stats service. If XUserReadStats is called with the pResults argument set to NULL then it does not affect the stats service. The API returns the size of the buffer needed into pcbResults. If the API is called with pResults set to a non-NULL value, then the API is making a call against the stats service. XUserReadStats(): Call 1: Parameter: pResults: 0x0 --- This indicates a buffer request as the pResults argument is set to NULL which does not affect the stats service pcbResults: 0x7004F580 Call 2: Parameter: pResults: 0x454733D0 --- This indicates that the buffer is a non-NULL value and impacts the stats service pcbResults: 0x454733D0
</Analysis>
<Faq>
Q: Does interactive Game Session include singleplayer gameplay that makes stats calls right after gameplay has ended, with those stats calls occurring between XSessionStart() and XSessionEnd()?A: Yes

Q: Do we monitor for XSessionWriteStats?
A: No, as this API just accumulates stats. XSessionEnd() and XSessionFlushStats cause the stats to be sent to the service

Q: In a game where a match is comprised of multiple rounds that are shorter than 5 minutes, what is considered a single interactive game session?
A: Each round with one XSessionStart()/XSessionEnd() pair is considered a single interactive game session
</Faq>
<Hardware>
None
</Hardware>

</CTC>
<CTC>
<tcr_id>
143
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 143 Avatar Awards
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Open the game configuration file and confirm that no avatar award descriptions refer to downloadable content.
2.	Boot the title.
3.	Identify the two documented avatar awards which would be simplest to gain and for each award, using an Xbox LIVE gamer profile, load any applicable save or cheat, and accomplish the requirements for the award.
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas
2.	Publisher documentation for each avatar award’s method for accomplishment
</Documentation>
<Result>
Non-compliance would be the inability to achieve all avatar awards in the game; however, due to time constraints, only 2 will be tested.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title does not unlock an Avatar Award when the conditions in the award's description are met.
•	The title contains an Avatar Award with an inaccurate description that would prevent the player from earning the Avatar Award normally.
•	The title contains a placeholder Avatar Award.
•	The game configuration file for a Final submission defines an avatar award that can not be obtained in the base game.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

</CTC>

  <CTC>
    <tcr_id>
82
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 82 Private Sessions
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	5 Xbox LIVE profiles (profiles A, B, C and D), 3 of which have a Friend relationship (profile A, B and D), 2 of which have a recent players relationship (profile A and C) and 2 more which also have a recent players relationship (profile B and E) 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	On console 1 using profile A, locate the option for non-ranked (Player Match) Private Match and create a session with all private slots. 
2.	Do not invite any players. 
3.	On console 2 using profile C, locate the non-ranked (Player Match) Custom Match option, and search for available matches.  Console 1’s match should not appear. 
4.	On console 1, invite profile B to the session hosted in step 1. 
5.	On console 2 using profile B, verify the ability for a Friend to join a private slot through the Friends List through an invite. 
6.	On console 3 using profile D, attempt to join the session via the join option on profile B’s gamer card from the Friends List. 
7.	On console 3 using profile E, attempt to join the session via the join option on profile B’s gamer card from the Recent Players List. 
8.	On console 2 using profile B, leave the session and then attempt to join it via the Join option on profile A’s gamer card from the Friends List. 
9.	On console 2 using profile C, attempt to join the same session via the Join option on profile A’s gamer card from the Recent Players List. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The option to create a session with all private slots must be available. Private Sessions must not be visible through Matchmaking. Note that it is not possible to join a private slot via the join option in the Friends or Players List; it is only possible through an invite. If the session can be joined from the Friends or Players List, then the session is not a true private session.
</Result>
<PassExamples>
•	Hybrid Matches with not all private slots are visible with only the public slots being joinable. 
</PassExamples>
<FailExamples>
•	The title does not provide a way to host a session with all private slots. 
•	Private matches are visible and joinable through a query. 
•	A Non-friend is able to join private matches from the Recent Players list. 
•	Private matches are visible but not joinable through a query. This includes a private session that is visible through a query but requires a password to join. 
•	Friends are able to join private matches in Progress. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kits (console 1, console 2 and console 3) connected to the Xbox LIVE service x 3
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
84
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 84 Interoperability
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Set console 1 to PAL-50 and start an Xbox LIVE session. 
2.	Set console 2 to PAL-60 and join the game. 
3.	Verify the game can be played without unintended audio pops and clicks, graphic glitches, or game slow-down. 
4.	Set console 2 to a different language. 
5.	Verify the game can be played without unintended audio pops and clicks, graphic glitches, or game slow-down. 
6.	Repeat steps [4]-[5] for every language supported by the game’s region. 
7.	Change console 1's audio settings to something different from console 2's audio settings. 
8.	Verify the game can be played without unintended audio pops and clicks, graphic glitches, and game slow-down. 
9.	Repeat steps [7]-[8] for all audio and video setting combinations (including HDTV modes). 
10.	Repeat steps [3]-[9] with both consoles set to PAL-50. 
11.	Repeat steps [3]-[9] with both consoles set to PAL-60.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player should never be stopped from joining the session. There should be no adverse effects (unpredictable or unstable behavior) from having different settings on each console.
</Result>
<PassExamples>
•	The title does not prevent or restrict Xbox LIVE multiplayer gameplay based on Audio, Video or Language settings. 
•	Xbox LIVE multiplayer gameplay is stable, regardless of Audio, Video or Language settings. 
</PassExamples>
<FailExamples>
•	Xbox LIVE multiplayer gameplay becomes unstable when playing with another console that has differing Audio, Video or Language settings. 
•	It is not possible to find, join or complete an Xbox LIVE multiplayer session if the available game session is being hosted on a console with differing Audio, Video or Language settings to that of the searching/joining/participating console. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kits x 2
(console 1 and console 2) connected to the Xbox LIVE service.   
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
86
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 86 No Multiplayer
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Profile with Multiplayer Privilege turned off: 
1.	Navigate to the appropriate section of the Xbox 360 Launcher. 
2.	Set the Live Gameplay setting to disable multiplayer play.  
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Verify the profile has the multiplayer privilege turned off. 
2.	Boot the title, and navigate to the main menu. 
3.	Attempt to navigate to the multiplayer section of the menu. 
4.	If successful, attempt to join a multiplayer session. 
5.	Ensure that the attempt to join is not successful. 
6.	Verify that hosting a session is not possible. 
7.	From another console hosting a session, attempt to invite the profile with the multiplayer privilege disabled.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
When the “no multiplayer” flag is set in the Xbox 360 Launcher, the game must not allow multiplayer play.   Note that if no message is displayed explaining why the player cannot join, host or be invited into a session, this constitutes an issue under UI Error Messaging. 
</Result>
<PassExamples>
•	The game prevents a gamer profile with multiplayer privileges turned off (disabled) from participating in Xbox LIVE gameplay. 
•	The title allows a gamer profile with multiplayer privileges turned off (disabled) to participate in a System Link game session. 
</PassExamples>
<FailExamples>
•	The title allows a gamer profile with multiplayer privileges turned off (disabled) to participate in Xbox LIVE gameplay. 
•	When multiple Players are on the same console, the title allows a gamer profile with multiplayer privileges turned off (disabled) to join a Xbox LIVE game session along with other players. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
87
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 87 Multiple Players on the Same Console
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Four Xbox LIVE profiles (A, B, C and D), 2 of which have a Friend relationship (profile A and B), and one which has the No Multiplayer flag set (D).  
</Configuration>
<Definition>
Inactive/Idle Profile - When more than one profile is signed into the same console the profiles that are outside of the game session and are not or cannot actively create input on their controller are considered idle or inactive.
</Definition>
<Steps>
1.	Verify the title supports more than one player per Xbox on Xbox LIVE.
2.	Host a session with two available slots on console 1 using profile A.
3.	On console 2, have two profiles (B and C) sign-in to Xbox LIVE, and both enter gameplay (i.e. they are not inactive profiles). 
4.	Attempt to join the session hosted on console 1 through invitations, join session in progress, and party invites.
5.	Verify that both of the players on console 2 are allowed to join without issue.
6.	Host a session with one available slot on console 1 using profile A.
7.	On console 2, have two profiles (B and C) sign-in to Xbox LIVE, and both enter gameplay (i.e. they are not inactive profiles).
8.	Attempt to join the session hosted on console 1 through invitations, join session in progress, and party invites.
9.	Verify neither of the two players on console 2 are allowed to join, and are given a relevant reason.
10.	Host a session with two available slots on console 1 using profile A.
11.	On console 2, have two profiles (C and D) sign-in to Xbox LIVE, and both enter gameplay (i.e. they are not inactive profiles). 
12.	Attempt to join the session hosted on console 1 through invitations, join session in progress, and party invites.
13.	Verify neither of the two players on console 2 are allowed to join, and are given a relevant reason.
14.	Host a session with two available slots on console 1 using profile A.
15.	On console 2, have two profiles (C and D) sign-in to Xbox LIVE, and enter gameplay with profile C (i.e. profile D is inactive).
16.	Attempt to join the session hosted on console 1 through invitations, join session in progress, and party invites.
17.	Verify that profile D is not required to join the game session.
18.	If the title allows 3 or 4 players per console, repeat steps [1]-[17] but with 3 or 4 players instead of 2. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
For titles that allow more than one player per Xbox in Xbox LIVE games, if the players cannot join together, the game must not let either join and display a message explaining why they cannot join. 
</Result>
<PassExamples>
•	When there are 2 or more active players on the same console, and 1 of those players joins an Xbox LIVE game session, all players are taken into the game session. 
•	When there are 2 or more active players on the same console, and 1 of those players joins an Xbox LIVE game session that has only one available slot, all players are not allowed to join and a friendly error message is displayed. 
•	When there are 2 or more active players on the same console, and 1 of those players has the No Multiplayer flag set, and another player attempts to join an Xbox LIVE game session, all players are not allowed to join and a friendly error message is displayed. 
•	The title does not force inactive players to join game sessions. 
</PassExamples>
<FailExamples>
•	When there are 2 or more active players on the same console, and 1 of those players joins an Xbox LIVE game session, only the player that joined the Xbox LIVE game session is taken into the session. 
•	When there are 2 or more active players on the same console, and 1 of those players joins an Xbox LIVE game session that has only one available slot, all players are not allowed to join and no message is displayed. 
•	When there are 2 or more active players on the same console, and 1 of those players has the No Multiplayer flag set, and another player attempts to join an Xbox LIVE game session, all players are not allowed to join and no message is displayed. 
•	The title forces inactive players to join game sessions that support multiple players per console over Xbox LIVE. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Two Xbox 360 Development Kits (console 1 and console 2) connected to the Xbox LIVE service 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
88
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 88 Supported Gamertag Characters
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Several Xbox LIVE enabled profiles that use at least 3 upper case characters, 4 maximum width characters, 3 lower case characters, 3 numeric characters and " " (ASCII character 0×20). For example: WWMMABCabc123" " 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Access all areas of the title that displays the gamertag using the prepared profiles [see preparation steps]
a. Game Session Lobby. 
b. In Game Play [if applicable]. 
c. Leaderboards. 
d. Messaging. 
e. Any other UI location the title is displaying the gamertag. 
2.	If the game supports multiple players on the same console, confirm correct display of 15 character gamertags for each player. 
3.	Attempt a cross title invite and a cross title join and examine how the game displays the gamertag for the invite/join. 
4.	Repeat steps 1-3 with a guest. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
All 15 characters of a player’s gamertag must be correctly displayed in every location. Guest profiles may be truncated to 15 characters.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title does not correctly display gamertags that contain a space. For example:
Gamertag Used: AAAaaa 123WWWww
Gamertag Displayed: AAAaaa

Gamertag Used: BBBbbb 123WWWww
Gamertag Displayed: BBBbbb123WWWww
•	The title displays incorrect characters for a gamertag. For example:
Gamertag Used: CCCccc 123WWWww
Gamertag Displayed: CCCqqq 123WWWqq

Gamertag Used: DDDddd 123WWWww
Gamertag Displayed: DDDdddx123WWWww 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
115
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 115 Game Invitations
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	2 Xbox 360 Development Kits 
2.	3 Xbox LIVE profiles 
Console 1 Profile A – Hosting a game session
Console 2 Profile B – Active Player (In control of the game) Profile C – Inactive Player (Not in control of the game) 
</Configuration>
<Definition>
None
</Definition>
<Steps>
Same Title – Active Player (Profile C should not be signed in) 
1.	Profile A download one of each type of available DLC 
2.	Profile A send a game invite to profile B 
3.	Profile B accept the game invitation from Profile A 
4.	Profile B use the Join Session in Progress from the friends list to join profile A’s game session 
Same Title – Inactive Player
5.	Profile A send a game invite to profile C 
6.	Profile C accept the game invitation from Profile A 
7.	Profile C use the Join Session in Progress from the friends list to join profile A’s game session 
Cross Title (Profile C should not be signed in)
8.	Profile A send a game invite to profile B 
9.	Profile B accept the game invitation from Profile A 
10.	Profile B use the Join Session in Progress from the friends list to join profile A’s game session 
11.	Verify steps 2-10 for every Xbox LIVE game mode. 
12.	If the title being tested can be run from an MU (an Xbox LIVE Arcade title for example), repeat steps 1-11, running it from an MU. 
 
</Steps>
<Documentation>
Inactive/Idle Profile: When more than one profile is signed into the same console the profiles that are outside of the game session and are not or cannot actively create input on their controller are considered idle or inactive.
</Documentation>
<Result>
Profile B and C should be able to join the sessions hosted by profile A both via invites and using the join option in the Friends list within the Xbox Guide. Not every game type supported by the title may allow invites but at least one type must support invites. 

Note it is ok for the game to restrict who can send invites to the session (i.e. just team captains in a team game). 

The title is not required to take a confirmation of destructive actions approach to this situation. Because the title cannot stop the invitation or join action from being taken, it is not required to ask for confirmation, even if the action will have a destructive effect on the title.
</Result>
<PassExamples>
•	Only the host of the game session can send invitations. 
•	The Player does not receive a confirmation of destructive action message when accepting a game invitation while in-game. 
•	The title does not support game invitations or the option to join session in progress for Ranked game modes. 
•	The title does not allow players to join session in progress to private matches
Note: This also applies to game modes that are not called private matches in the title's UI, however the game mode's behavior matches that of a private match. (The only way to join the match is to accept a game invitation). 
•	The Player is not taken into the game session after accepting an invitation from the inactive controller or from within another title or the Dashboard. The Player is taken to the IIS or main menu, and the invitation is successfully completed after pressing START to progress past the IIS, or after selecting Xbox LIVE from the main menu. 
A message is displayed informing the Player of this requirement. 
•	After accepting an invitation or when attempting to join a session in progress, the player is required to select a storage device before completion of the invitation. 
•	A Multiplayer Demo does not support game invitations or Join Session in Progress. 
•	The Player is not taken into the game session after accepting an invitation from the active controller. The player is required to take some additional actions (ex. Required to access the online game mode) in order for the invitation to complete. 
Note: This does not apply to cross game invitations. 
•	The invite completes but the session cannot be started/launched when required DLC is not present on the console.
This is clearly messaged to the player. 
•	Title only supports 2 console multiplayer over Xbox LIVE and does not support join session in progress. 
</PassExamples>
<FailExamples>
•	After accepting an invitation from the inactive profile, the title displays/uses the gamer profile signed into the previously active quadrant leading the player to believe that the incorrect profile has been taken into the game session. 
•	The title provides multiplayer game sessions on Xbox LIVE and does not contain any game modes that support game invitations or joining a session in progress. 
•	After accepting a game invitation or selecting to join a game in progress, the player is not taken into the game session to which they were invited.
Example:
In a same title scenario, the player accepts a game invitation or selects to join a game in progress, however the player remains in their current game session.
In a cross title scenario, the player accepts a game invitation or selects to join a game in progress, than the player inserts the correct disc, however upon entering the game the player is never taken to the game session. 
•	Sending game invitations or selecting to join session in progress in game modes that support game invitations does not work on every controller regardless of sign-in status.
Note: This applies to both same title and cross title scenarios. 
•	An inactive Player is not able to accept a game invite. 
•	The title supports game invitations, however the option to join session in progress is not available.
Note: This does not apply to private match game modes. 
•	The Player is not taken into the game session after accepting an invitation from the active controller. The player is required to take some additional actions (ex. Required to access the online game mode in order for the game invitation to complete.) in order for the invitation to complete. 
Note: This does not apply to cross game invitations.
•	The Player is not taken into the game session after accepting an invitation from the inactive controller. The active player is required to take some additional actions (ex. Required to quit out of the current game session in order for the game invitation to complete.) in order for the invitation to complete. 
No message is displayed informing the Player of this requirement. 
•	The invite completes but the session cannot be started/launched when required DLC is not present on the console.
This is not messaged to the player. 
•	The invite does not complete when required DLC is not present on the console.  
This is not messaged to the player. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
124
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 124 Guest Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	1 Xbox LIVE enabled profile  
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Verify the title allows more than one player per console in multiplayer Xbox LIVE play. 
2.	Verify that when playing with more than one player on Xbox LIVE that any additional players can be guests.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the title allows more than one player per console in multiplayer Xbox LIVE play then it must support guests. 
</Result>
<PassExamples>
•	The title supports 2+ players per console within an Xbox LIVE multiplayer session and allows these players to sign-in as Guests of the signed-in Gold account and participate in Xbox LIVE gameplay.

Example: 
If the title supports 4 players per console, 1 Gold account and 3 Guest accounts should be permitted to play.

Note: This applies to all game modes, although the number of supported players per game mode may vary.
•	Guests are supported and are able to participate in an Xbox LIVE game session, however they are not permitted to search for sessions, change settings, or access menu items. All control/options pre-game session are controlled exclusively by the signed-in Gold account. 
</PassExamples>
<FailExamples>
•	The title supports 2+ players per console within an Xbox LIVE multiplayer session but does not allow any of these players to sign-in as a Guest of the signed-in Gold account.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
138
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 138 Xbox LIVE Party Invitations - No Xbox LIVE Party
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Profile A: Xbox LIVE multiplayer enabled gamer profile, friend of B
Profile B: Xbox LIVE multiplayer enabled gamer profile, friend of A
</Configuration>
<Definition>
None
</Definition>
<Steps>
Scenario 1: No Xbox LIVE Party
1.	Launch the game and sign into a gamer profile A 
2.	Navigate the UI for an option labeled “Invite Friends” 
3.	Profile A create an online multiplayer game session  in a game mode that supports invites 
4.	Navigate the UI for an option labeled “Invite Friends” 
5.	Select the UI option “Invite Friends” to invite gamer profile B 
6.	Repeat Steps [3] – [5] for each game mode that supports invites 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Scenario 1 and 2: No Xbox LIVE Party and Xbox LIVE Party on your own

The game includes an option to send game invitations from Profile A to Profile B using the “Invite Friends” option which displays either of the following behaviors:
XShowFriendsUI() – Displays the Xbox Guide, which contains the Friends UI. Only one instance of the Friends list may be displayed at a time.
XInviteSend() -  Sends an invitation to the specified gamers.
</Result>
<PassExamples>
•	The title updates with the correct UI option to either “Invite Xbox LIVE Party” or “Invite Friends” for all three scenarios. 
•	The title displays the correct UI option anywhere up to or in the multiplayer lobby. 
</PassExamples>
<FailExamples>
•	The title only provides an option to “Invite Friends” when the Player is in an active Xbox LIVE Party. 
•	The title never displays a UI option to “Invite Xbox LIVE Party”. 
•	The title does not update the UI based on the current status of an Xbox LIVE Party. 
•	The title does not support Xbox LIVE Party features and is a first submission after June 1, 2009. 
•	The title has their own party invite system and supports Xbox LIVE Party however it is not clear to the Player when they are using the Xbox LIVE Party system based on the UI options and messaging. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
   <CTC>
    <tcr_id>
138
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Multiplayer: 138 Xbox LIVE Party Invitations - Xbox LIVE Party on your own
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Profile A: Xbox LIVE multiplayer enabled gamer profile, friend of B
Profile B: Xbox LIVE multiplayer enabled gamer profile, friend of A
</Configuration>
<Definition>
None
</Definition>
<Steps>
Scenario 2: Xbox LIVE Party on your own
1.	Launch the game and sign into a gamer profile A 
2.	Create an Xbox LIVE Party with no other players 
3.	Navigate the UI for an option labeled “Invite Friends” 
4.	Profile A create an online multiplayer game session  in a game mode that supports invites 
5.	Navigate the UI for an option labeled “Invite Friends” 
6.	Select the UI option “Invite Friends” to invite gamer profile B 
7.	Repeat Steps [4] – [6] for each game mode that supports invites 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Scenario 1 and 2: No Xbox LIVE Party and Xbox LIVE Party on your own

The game includes an option to send game invitations from Profile A to Profile B using the “Invite Friends” option which displays either of the following behaviors:
XShowFriendsUI() – Displays the Xbox Guide, which contains the Friends UI. Only one instance of the Friends list may be displayed at a time.
XInviteSend() -  Sends an invitation to the specified gamers.
</Result>
<PassExamples>
•	The title updates with the correct UI option to either “Invite Xbox LIVE Party” or “Invite Friends” for all three scenarios. 
•	The title displays the correct UI option anywhere up to or in the multiplayer lobby. 
</PassExamples>
<FailExamples>
•	The title only provides an option to “Invite Friends” when the Player is in an active Xbox LIVE Party. 
•	The title never displays a UI option to “Invite Xbox LIVE Party”. 
•	The title does not update the UI based on the current status of an Xbox LIVE Party. 
•	The title does not support Xbox LIVE Party features and is a first submission after June 1, 2009. 
•	The title has their own party invite system and supports Xbox LIVE Party however it is not clear to the Player when they are using the Xbox LIVE Party system based on the UI options and messaging. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
138
</tcr_id>
<testcase_id>
CTC 3
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 3, Multiplayer: 138 Xbox LIVE Party Invitations - Active Xbox LIVE Party
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Profile A: Xbox LIVE multiplayer enabled gamer profile, friend of B
Profile B: Xbox LIVE multiplayer enabled gamer profile, friend of A
</Configuration>
<Definition>
None
</Definition>
<Steps>
Scenario 3: Active Xbox LIVE Party
1.	Launch the game and sign into a gamer profile A 
2.	Create an Xbox LIVE Party with profile B 
3.	Navigate the UI for an option labeled “Invite Xbox LIVE Party” 
4.	Profile A create an online multiplayer game session in a game mode that supports invites. 
5.	Navigate the UI for an option labeled “Invite Xbox LIVE Party” 
6.	Select the “Invite Xbox LIVE Party” option 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Scenario 3: Active Xbox LIVE Party

Player A can select a UI option “Invite Xbox LIVE Party” option which displays either of the following behaviors:
XPartySendGameInvites() - Sends game invites to every member of the Player's party.
XShowPartyUI() - Shows the Guide's Xbox LIVE Party user interface (UI).
</Result>
<PassExamples>
•	The title updates with the correct UI option to either “Invite Xbox LIVE Party” or “Invite Friends” for all three scenarios. 
•	The title displays the correct UI option anywhere up to or in the multiplayer lobby. 
</PassExamples>
<FailExamples>
•	The title only provides an option to “Invite Friends” when the Player is in an active Xbox LIVE Party. 
•	The title never displays a UI option to “Invite Xbox LIVE Party”. 
•	The title does not update the UI based on the current status of an Xbox LIVE Party. 
•	The title does not support Xbox LIVE Party features and is a first submission after June 1, 2009. 
•	The title has their own party invite system and supports Xbox LIVE Party however it is not clear to the Player when they are using the Xbox LIVE Party system based on the UI options and messaging. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
139
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 139 Xbox LIVE Community Sessions
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Profile A: Xbox LIVE multiplayer enabled gamer profile, friend of B
Profile B: Xbox LIVE multiplayer enabled gamer profile, friend of A
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Launch the game and sign into gamer profiles A and B 
2.	Profile A: Create an Xbox LIVE Party with profile B 
3.	Profile A: Create a game session 
4.	Profile B: Navigate the main menu and multiplayer menu for an option to locate game sessions for Xbox LIVE Party members 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game must provide an option from within the main menu or within a multiplayer menu so that the member of an Xbox LIVE Party can locate game sessions of Xbox LIVE Party members.
</Result>
<PassExamples>
•	The title includes an option from the main menu or within a multiplayer menu to locate game sessions for all Xbox LIVE Party members 
</PassExamples>
<FailExamples>
•	The title does not include an option to locate game sessions for all Xbox LIVE Party members 
•	The title does include an option to locate game sessions for all Xbox LIVE Party members however it is not within the main menu or within a multiplayer menu 
•	The title does not support Xbox LIVE Party features and is a first submission after June 1, 2009. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
140
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 140 Quick Match - Ranked
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Ranked Match (if supported)
1.	Boot the title. 
2.	Navigate from the main menu to the game’s Quick Match option for Ranked Match. 
3.	Enter the game session, ensuring only default button presses are used. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If supporting both Ranked and Player match types, only one requires a Quick Match option.

If supporting just one match type, either Ranked or Player, a Quick Match option is required.

The game must not require the user to choose options; simply pressing buttons should advance them into a game session. 
</Result>
<PassExamples>
•	The title supports both Ranked Match and Player Match and only one supports quick match. 
•	The title contains a Quick Match option that allows the Player to join a game session without having to select any settings prior to entering gameplay. 
</PassExamples>
<FailExamples>
•	The title does not offer a Quick Match option that allows the Player to join a game session without having to select any settings prior to entering gameplay. 
•	The Player is unable to join an available game session when using the Quick Match option. 
•	The title enters an unresponsive state or hardlocks when attempting to use the Quick Match option. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Two Xbox 360 Development Kits/Test Kits (console 1 and console 2) connected to the Xbox LIVE service, both running the game currently being tested. 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
140
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Multiplayer: 140 Quick Match – Player Match
</short_description>
<Requirements>
None
None
None
None
Player Match (if supported)
1.	Boot the title. 
2.	Navigate from the main menu to the game’s Quick Match option for Player Match. 
3.	Enter the game session, ensuring only default button presses are used.  
None
If supporting both Ranked and Player match types, only one requires a Quick Match option.

If supporting just one match type, either Ranked or Player, a Quick Match option is required.

The game must not require the user to choose options; simply pressing buttons should advance them into a game session. 
•	The title supports both Ranked Match and Player Match and only one supports quick match. 
•	The title contains a Quick Match option that allows the Player to join a game session without having to select any settings prior to entering gameplay. 
•	The title does not offer a Quick Match option that allows the Player to join a game session without having to select any settings prior to entering gameplay. 
•	The Player is unable to join an available game session when using the Quick Match option. 
•	The title enters an unresponsive state or hardlocks when attempting to use the Quick Match option. 
None
None
None
1.	Two Xbox 360 Development Kits/Test Kits (console 1 and console 2) connected to the Xbox LIVE service, both running the game currently being tested. 
</Requirements>
<Tools>
</Tools>
<Configuration>
</Configuration>
<Definition>
</Definition>
<Steps>
</Steps>
<Documentation>
</Documentation>
<Result>
</Result>
<PassExamples>
</PassExamples>
<FailExamples>
</FailExamples>
<NAExamples>
</NAExamples>
<Analysis>
</Analysis>
<Faq>
</Faq>
<Hardware>
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
141
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 141 Matchmaking - Ranked
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Ranked Match (if supported) 
1.	Enter the multiplayer area of the game, and search for an option denoting a Ranked Match multiplayer session. 
2.	Attempt to join this session.
</Steps>
<Documentation>
None
</Documentation>
<Result>
For each supported match type, there must be an option for the player to join an Xbox LIVE game session.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title supports Player Match however the Player is unable to join game sessions. The title displays a message informing the Player that an error has occurred. 
•	The title supports Ranked Match however the Player is unable to join game sessions. The title displays a message informing the Player that an error has occurred.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Two Xbox 360 Development Kits/Test Kits (console 1 and console 2) connected to the Xbox LIVE service, both running the game currently being tested.
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
141
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Multiplayer: 141 Matchmaking - Player
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Player Match (if supported) 
1.	Enter the multiplayer area of the game, and search for an option denoting a standard Player Match multiplayer session. 
2.	Attempt to join this session.
</Steps>
<Documentation>
None
</Documentation>
<Result>
For each supported match type, there must be an option for the player to join an Xbox LIVE game session.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The title supports Player Match however the Player is unable to join game sessions. The title displays a message informing the Player that an error has occurred. 
•	The title supports Ranked Match however the Player is unable to join game sessions. The title displays a message informing the Player that an error has occurred.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Two Xbox 360 Development Kits/Test Kits (console 1 and console 2) connected to the Xbox LIVE service, both running the game currently being tested.
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
89
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 89 Supporting Voice
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title and identify all areas that support voice chat. 
2.	Start a multiplayer game with console 1 and console 2. 
3.	Using headsets, attempt to speak from console 1 to console 2. 
4.	Using headsets, attempt to speak from console 2 to console 1. 
5.	Verify the users on each console can hear the other. This may be limited by game specific implementation [team-only, proximity, etc.]. 
6.	Repeat steps 2 – 5 for each game area that supports voice chat.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
Each player is able to use voice chat in all supported areas. 
</Result>
<PassExamples>
•	The title imposes restrictions allowing only players within a certain distance from one another to communicate with each other. 
•	The title imposes restrictions allowing only members of the same team to communicate with one another. 
•	The title puts specific restrictions on how members can communicate with one another and these restrictions are clearly called out within the game. 
•	In poor network conditions (see TCRs 96, 97, and 98), the title disables or limits voice communication and informs the player why. 
</PassExamples>
<FailExamples>
•	Outside of restrictions implemented as part of game design (team-only speak, proximity to other players, etc.), one or more players is unable to hear and/or speak to other players. 
•	In poor network conditions (see TCRs 96, 97, and 98), the title disables or limits voice communication and does not inform the player why. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development / Test kits (console 1 and 2) x 2 
2.	headsets x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
90
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 90 Muting Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title and identify all areas that support voice chat. 
2.	Enter a session with 2 profiles with active voice chat (ensure that no muting is already in place). 
3.	Have profile A mute profile B (either using an in-game UI or through the Xbox Guide). 
4.	Verify that the profile A cannot hear the profile B. 
5.	Verify that profile B cannot hear profile A. 
6.	Have profile B verify the there is no indication that they have been muted by profile A. 
7.	Repeat steps [2]-[6] with profile B muting profile A. 
8.	Repeat steps [1]-[7] but using video cameras and Kinect Sensors instead of headsets (if supported by the title). 
9.	Repeat steps [1]-[7] but using any other type of real time communication supported (such as text chat). 
10.	Repeat steps [1]-[9] for all controller quadrants.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
The game meets each of the Mute requirements:
 
The player that mutes:
•	Cannot be heard or seen by the muted player. 
•	Cannot hear or see the muted player. 
•	Cannot receive real-time player-created communication of any type from the muted player. 
•	Cannot send real-time player-created communication of any type to the muted player. 
 
 The muted player:
•	Cannot be heard or seen by the muting player. 
•	Cannot hear or see the muting player. 
•	Cannot receive player-created communication from the muting player. 
•	Cannot send player-created communication to the muting player. 
•	Must have no indication that he has been muted.  
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
•	The muted Player can be heard or seen by the Player who initiated the mute. 
•	The muted Player can hear or see the Player who initiated the mute. 
•	The muted Player can send or receive player-created voice, video, and/or text chat. 
•	The Player who initiated the mute can send or receive player-created voice, video, and/or text chat. 
•	Muting functionality does not work in the current game session.  
Example: The Mute Player option when selected has no effect. 
•	The title does not mute a Player when the muting event is invoked by a Player assigned to a quadrant other than quadrant one. 
•	Muting functionality does not work for the client of a game session.
Example: Muting only works for the host. 
•	The muted Player is given indication that they have been muted. 
•	Muting does not persist outside of the current Xbox LIVE game session. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development / Test kits x 2 
2.	Profiles x 2 (A and B) 
3.	Controller x 2 (one of each type) 
4.	Headsets x 2 
5.	Video camera x 2 
6.	Kinect Sensors x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
91
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 91 Communication in the Clear - Voice and/or Text
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon  
</Tools>
<Configuration>
For NetMon 3 the following steps must be completed after installation: 
1.	Ensure the latest version of xsp.npl has been copied from C:\Program Files\Microsoft Xbox 360\SDK\redist\netmon\ to the NPL subdirectory of the Network Monitor installation folder. 
2.	Ensure the sparser.npl file located in the NPL subdirectory has been modified in Notepad.exe and pasted back to the NPL folder with the following line inserted at the end of the file: include "xsp.npl"  
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Start a NetMon capture. 
3.	Start an Xbox LIVE multiplayer session. 
4.	Generate voice, video and/or text traffic. 
5.	Stop the NetMon capture and analyze the results. 
6.	Repeat steps 1-5 but without any headsets connected or Xbox LIVE Visions connected. Ensure no video or text messages are generated. If the NetMon captures shows unencrypted voice packets between consoles and the game supports the Xbox LIVE Vision run the Xbox LIVE Vision additional test. 
7.	Note the frame numbers of any offending packets. 
8.	Repeat steps 1-7 for every Xbox LIVE game mode (including any spectator modes) the title supports. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
When voice, video or text communication is happening on Xbox LIVE:
•	There should be VDPV# or VDP# packages observed, and they should include an unencrypted portion. 
•	VDPD# could still be observed since the title could be also transmitting non-voice, non-video, non-text data. 
When there’s no headset connected and no text chat happening:
•	No VDPV# packets should be observed. 
•	No VDP# packets with voice data should be observed. 
•	VDPD# packets can be observed. 
Note that this includes communication in lobbies as well as from within sessions.
</Result>
<PassExamples>
•	Unencrypted voice packets are observed when no headsets or Visions are attached. When the profile’s privileges for Video Communication are set to blocked the offending packets are no longer observed. 
•	When voice, video or text communication is happening there are VDPV# or VDP# packages which include an unencrypted portion. 
</PassExamples>
<FailExamples>
•	The title transmits voice communication using the encrypted portion of the XSP protocol during a System Link game session.
•	The title transmits non-voice data using the unencrypted portion of VDP or VDPV packets throughout the game session when no headset is connected. 
•	This title transmits packets of voice data using the encrypted portions of VDPD packets. 
•	Voice, video, or text chat is transmitted in the encrypted portion of TCP packets during Xbox LIVE gameplay. 
•	Voice, video, or text chat is transmitted in the encrypted portion of VDP packets during Xbox LIVE gameplay. 
•	Unencrypted voice packets are observed when no headsets or Visions are attached. When the profile’s privileges for Video Communication are set to blocked the offending packets are still observed. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development / Test kits x 2 
2.	Headsets x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
91
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, Networking: 91 Communication in the Clear - Xbox LIVE Vision
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon  
</Tools>
<Configuration>
For NetMon 3 the following steps must be completed after installation: 
1.	Ensure the latest version of xsp.npl has been copied from C:\Program Files\Microsoft Xbox 360\SDK\redist\netmon\ to the NPL subdirectory of the Network Monitor installation folder. 
2.	Ensure the sparser.npl file located in the NPL subdirectory has been modified in Notepad.exe and pasted back to the NPL folder with the following line inserted at the end of the file: include "xsp.npl"  
</Configuration>
<Definition>
None
</Definition>
<Steps>
Xbox LIVE Vision additional test 
1.	Set the profile’s privileges for Video Communication to Everyone in the Xbox 360 Launcher
2.	Boot the title with Xbox LIVE Visions connected
3.	Start a NetMon capture.
4.	Start an Xbox LIVE multiplayer session.
5.	Generate video traffic.
6.	Stop the NetMon capture.
7.	Repeat steps 2-6 with no Xbox LIVE Visions connected
8.	Set the profile’s privileges for Video Communication to Blocked in the Xbox 360 Launcher
9.	Repeat steps 2-6 with no Xbox LIVE Visions connected
10.	Compare the results for all three captures 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Xbox LIVE Vision additional test 
The offending unencrypted voice packet traffic between consoles no longer occurs when the Video Communication option is set to Blocked. 
</Result>
<PassExamples>
•	Unencrypted voice packets are observed when no headsets or Visions are attached. When the profile’s privileges for Video Communication are set to blocked the offending packets are no longer observed. 
•	When voice, video or text communication is happening there are VDPV# or VDP# packages which include an unencrypted portion. 
•	The title broadcasts VDP packets while searching for a System Link game session with no headset connected and the size of the unencrypted voice data is 12 bytes. 
 
</PassExamples>
<FailExamples>
•	The title transmits voice communication using the encrypted portion of the XSP protocol during a System Link game session. 
•	The title transmits non-voice data using the unencrypted portion of VDP or VDPV packets throughout the game session when no headset is connected. 
•	This title transmits packets of voice data using the encrypted portions of VDPD packets. 
•	Voice, video, or text chat is transmitted in the encrypted portion of TCP packets during Xbox LIVE gameplay. 
•	Voice, video, or text chat is transmitted in the encrypted portion of VDP packets during Xbox LIVE gameplay. 
•	Unencrypted voice packets are observed when no headsets or Visions are attached. When the profile’s privileges for Video Communication are set to blocked the offending packets are still observed. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development / Test kits x 2 
2.	Headsets x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
92
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 92 Player Text String Verification - Text Vetting
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon 
</Tools>
<Configuration>
1.	Set the .xdb file search path in the APIMon settings 
2.	Apply the API(s) to be monitored:
 • XStringVerify() 
3.	Identify all areas where player entered text strings are visible to other players: session, character and/or team names, content descriptions, tags, mottos, comments, etc. Note that real-time text communication is exempt for this requirement. 
</Configuration>
<Definition>
None
</Definition>
<Steps>
Verify Text Vetting is done using Xbox LIVE 
1.	Navigate to the first text entry spot and start monitoring using APIMon. 
2.	On console 1 enter a friendly term (i.e. “happy”) in the text entry area. 
3.	Complete the task required to display the term on Xbox LIVE. 
4.	Verify that the game calls XStringVerify(). This will be shown in the Modules window and the Log List of APIMon. 
5.	On console 2 verify that the term is visible. 
6.	Repeat for each text entry area. 
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas 
2.	Unapproved terms: f*ck, sh*t, fart, hotmail. Note that these are just a small selection of the unapproved terms. 
3.	API Monitor Quick Guide  
</Documentation>
<Result>
Unapproved terms must not be displayed over Xbox LIVE. 
 
The title must call XStringVerify() for each entered term, either friendly or unfriendly prior to displaying it on Xbox LIVE.  Note: The API is not required to be called at the point of text entry.
 
The game may handle unapproved terms by not sending the text, blanking it out, or using a generic text in the event the text was rejected by the Xbox LIVE service.  
</Result>
<PassExamples>
•	The title correctly implements XStringVerify() to verify all user entered text before displaying it to other users on the Xbox LIVE service. 
•	The title does not implement XStringVerify() to verify real-time text communication between players. 
</PassExamples>
<FailExamples>
•	The title does not call XStringVerify() or fails to correctly implement the API, resulting in unapproved terms being displayed to other Players on the Xbox LIVE service. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kits x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
92
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, System: 92 Player Text String Verification - Unfriendly Term Handling
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon 
</Tools>
<Configuration>
1.	Set the .xdb file search path in the APIMon settings 
2.	Apply the API(s) to be monitored
 • XStringVerify() 
3.	Identify all areas where player entered text strings are visible to other players: session, character and/or team names, content descriptions, tags, mottos, comments, etc. Note that real-time text communication is exempt for this requirement. 
</Configuration>
<Definition>
None
</Definition>
<Steps>
Unfriendly Term handling 
1.	Navigate to the first text entry spot and start monitoring using APIMon. 
2.	On console 1 enter an unfriendly term in the text entry area. 
3.	Complete the task required to display the term on Xbox LIVE 
4.	Verify that the game calls XStringVerify(). This will be shown in the Modules window and the Log List of APIMon. 
5.	On console 2 verify the term is not visible. 
6.	Repeat for each text entry area.  
</Steps>
<Documentation>
1.	Publisher provided saves or cheats – must have access to all areas 
2.	Unapproved terms: f*ck, sh*t, fart, hotmail. Note that these are just a small selection of the unapproved terms. 
3.	API Monitor Quick Guide  
</Documentation>
<Result>
Unapproved terms must not be displayed over Xbox LIVE. The title must call XStringVerify() for each entered term, either friendly or unfriendly prior to displaying it on Xbox LIVE. 

Note: The API is not required to be called at the point of text entry. The game may handle unapproved terms by not sending the text, blanking it out, or using a generic text in the event the text was rejected by the Xbox LIVE service. 
</Result>
<PassExamples>
•	The title correctly implements XStringVerify() to verify all user entered text before displaying it to other users on the Xbox LIVE service. 
•	The title does not implement XStringVerify() to verify real-time text communication between players. 
</PassExamples>
<FailExamples>
•	The title does not call XStringVerify() or fails to correctly implement the API, resulting in unapproved terms being displayed to other Players on the Xbox LIVE service. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit x 2 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
93
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 93 No Communication
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Profile A – Xbox LIVE profile with both the Voice and Text Privacy Settings, and the Video Privacy Settings set to "Blocked" 
2.	Profile B – Xbox LIVE profile with no communication restrictions and is friend of profile A. 
3.	Profile C – Xbox LIVE profile with no communication restrictions. 
All profiles should have the Voice Output Preference set to "Play Through Speakers" 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	On console 1, sign in with profile A and host a multiplayer game session. 
3.	On console 2, sign in with profile B and join the game hosted in step 2. 
4.	On console 3, sign in with profile C and join the game hosted in step 2. 
5.	With profile A, while in the game lobby, attempt to start voice, video, and text chat communication with profile B and profile C 
6.	With profile B, while in the game lobby, attempt to start voice, video, and text chat communication with profile A. 
7.	With profile C, while in the game lobby, attempt to start voice, video, and text chat communication with profile A. 
8.	With profile A, while in-game, run step 5. 
9.	With profile B, while in-game, run step 6. 
10.	With profile C, while in-game, run step 7. 
11.	Outside of gameplay and lobby, run steps 5, 6 and 7. 
12.	On console 1, sign in with profile C as the in-use profile and profile A as an inactive profile. 
13.	One console 3, sign in with profile B. 
14.	With profile B, while in the game lobby, attempt to start voice, video, and text chat communication with profile C. 
15.	Repeat step 14 in gameplay and outside of both gameplay and the lobby. 
16.	Repeat steps 12-15 but with no headsets connected on console 1.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
Games must not transmit voice, video, or text chat when the communication privilege is turned off. Games must respect the most restrictive communication settings among all users even if they apply to an inactive user. Note that when the communication privilege is turned off game invites may not be sent or received. This is not an issue. 
</Result>
<PassExamples>
•	The title completely respects the most restrictive communication settings of all signed in players and applies this setting to all profiles that are signed-in on the local console. 
•	When Player A and Player B (restricted) are in an Xbox LIVE game session on the same console, Player A can still hear voice through the headset. Player B cannot hear voice through the headset. 
</PassExamples>
<FailExamples>
•	The title does not respect the most restrictive communication settings of an inactive player and/or does not apply this setting to all profiles that are signed-in on the local console. 
•	When Player A and Player B (restricted) are in an Xbox LIVE game session on the same console, Player A and Player B can hear voice through the speakers. 
•	The title does not completely respect the most restrictive communication settings of an active player and/or does not apply this setting to all profiles that are signed-in on the local console. 
•	Text chat sent in game lobbies or in game play can be seen by players with restricted communication settings. 
•	The title allows one-way communication through the speakers between two individuals when communications restrictions are in effect. 
•	The title allows one-way communication through the headset between two individuals when communications restrictions are in effect. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
94
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Multiplayer: 94 Friends-Only Communication
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Profile A – Xbox LIVE profile with both the Voice and Text Privacy Settings, and the Video Privacy Settings set to "Friends Only" 
2.	Profile B – Xbox LIVE profile with no communication restrictions and is friend of profile A. 
3.	Profile C – Xbox LIVE profile with no communication restrictions. 
All profiles should have the Voice Output Preference set to "Play Through Speakers"
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	On console 1, login with profile A and host a multiplayer game session. 
3.	On console 2, login with profile B and join the session hosted in step [2]. 
4.	On console 3, login with profile C and join the session hosted in step [2]. 
5.	With profile A, while in the game lobby, attempt to start voice, video, and text chat communication with profile B and profile C 
6.	With profile B, while in the game lobby, attempt to start voice, video, and text chat communication with profile A. 
7.	With profile C, while in the game lobby, attempt to start voice, video, and text chat communication with profile A. 
8.	With profile A, while in-game, run step [5]. 
9.	With profile B, while in-game, run step [6]. 
10.	With profile C, while in-game, run step [7]. 
11.	Outside of gameplay and lobby, run steps [5], [6] and [7]. 
12.	On console 1, sign in with profile B as the in-use profile and profile A as an inactive profile. 
13.	On console 3, sign in with profile C. 
14.	With profile B, while in the game lobby, attempt to start voice, video, and text chat communication with profile C. 
15.	Repeat step [14] in gameplay and outside of both gameplay and the lobby. 
16.	Repeat steps [12]-[15] but with no headsets connected on console 1.  
</Steps>
<Documentation>
None
</Documentation>
<Result>
Games must only allow communication between friends when the friends-only communication privilege is on.

Note that this can include communication between people who have received an invite but have not yet accepted or declined it and those who sent the invite.

Profile A can only communicate with profile B and vice-versa. Profile C must not be able to communicate with profile A.

It is permissible for titles to be more restrictive and not allow any communication when the friends-only communication privilege is turned on.

Games must respect the most restrictive communication settings among all users even if they apply to an inactive user.

Note that invites are classed as messages so when the friend only communication privilege is turned on game invites may not be sent and received. This is not an issue. 
</Result>
<PassExamples>
•	The title completely respects the most restrictive communication settings of all signed in players and applies this setting to all profiles that are signed-in on the local console. 
•	The title restricts all voice, text, and video chat when the player sets the communication setting to Friends Only. 
</PassExamples>
<FailExamples>
•	The title does not respect the most restrictive communication settings of an inactive player and/or does not apply this setting to all profiles that are signed-in on the local console. 
•	The title does not respect the most restrictive communication settings of an active player and/or does not apply this setting to all profiles that are signed-in on the local console. 
•	Text chat sent in game lobbies or in game play can be seen by players with restricted communication settings. 
•	The title allows one-way communication through the speakers between two individuals when communications restrictions are in effect. 
•	The title allows one-way communication through the headset between two individuals when communications restrictions are in effect. 
•	The title does not apply the most restrictive communication setting of a single player to all the players on the same console. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
188
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 188 Social Network Access
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
•	Social Networks refers to non-Xbox LIVE services that allow users to communicate or share with others. Many of these services also allow sharing of text, photos, videos, voice, and digital content 
•	Connection to includes the ability for a user to create a link between their Xbox LIVE profile and a social network account 
•	Activity includes messages, pictures, videos, events, or any other communications, data, or information sent to a social network 
</Definition>
<Steps>
1.	Create a new Xbox LIVE Gold profile. 
2.	In the Xbox 360 Dashboard, set the profile’s Social Network Sharing privilege to blocked. 
3.	Launch the title. 
4.	Navigate the entire title attempting to share activity or create a connection to a social network. 
5.	Verify that the title does not allow the user to share activity. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Titles must not allow connection to or sharing of activity with social networks when the Social Network Sharing privilege is set to Block.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
None
</FailExamples>
<NAExamples>
•	Titles that use the SocialNetwork class to post to a social network automatically meet this requirement. See TCR # 169 UI Social Network Sharing for further details. 
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
•	Xbox 360 Development Kit/Test Kit x1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
95
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 95 Connection Status Notifications
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Xbox 360 Development/Test Kit (console 1) connected to Xbox LIVE via a hub or switch 
2.	Xbox 360 Development/Test Kit (console 2) connected to Xbox LIVE via a different hub or switch 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Using console 1, disconnect the uplink cable and attempt the following actions before the console recognizes it has been disconnected (up to 2 minutes): 
a. Create a saved game 
b. Reach an autosave point (if applicable) 
c. Enumerate a list of saved games 
d. Load a saved game 
e. Change storage device (with save already present) 
f. Search for and join a game on Xbox LIVE 
g. Try to create a game on Xbox LIVE 
h. If applicable, try to create an Xbox LIVE game session using a previously created save file (Example: select an unlocked chapter in co-op) 
i. Try to view a leaderboard 
j. During singleplayer gameplay 
2.	Using console 1, disconnect the Ethernet cable from the back of the console in the following areas: 
a. In singleplayer gameplay
b. Main menu 
c. Xbox LIVE menu 
3.	Host a system link game with console 1 and join it with console 2. 
4.	Remove the uplink cable. 
5.	Repeat step 3 and then remove the Ethernet cable from the back of both consoles. 
6.	Host an Xbox LIVE game with console 1 and join it with console 2. 
7.	Remove the uplink cable. 
8.	Repeat step 6 and then remove the Ethernet cable from the back of both consoles. 
9.	Repeat steps 6-8 in spectator mode (if applicable)  
</Steps>
<Documentation>
A training video is available for this test case at developer.xboxlive.com under Certification > Training Materials > Certification Video Series.
</Documentation>
<Result>
Games must properly detect and handle loss of network connectivity in all areas of the game. Games must not interrupt gameplay (causing data loss). Note that this includes not disrupting a system link game if the connection to Xbox LIVE is lost. Titles should not enter an extended unresponsive state whilst waiting to detect the loss of connection. 
</Result>
<PassExamples>
•	The title does not display a message when the connection to Xbox LIVE is lost in game modes which are not dependant on Xbox LIVE (Single Player Game, System Link Game, etc.). 
</PassExamples>
<FailExamples>
•	After losing connection to Xbox LIVE the title drops the player from a LIVE match without any notification as to what has occurred. 
•	After losing connection to Xbox LIVE the title forces a player to quit out of a game mode that is not dependant on Xbox LIVE (Single Player Game, System Link Game, etc.). 
•	After losing connection to Xbox LIVE the title hardlocks or becomes permanently unresponsive in any game mode. 
•	The title hardlocks or enters a permanent unresponsive state when the Ethernet cable is removed from the console, DSL/Cable Modem, or HUB/Switch in any area of the title. 
•	The title displays a message implying that the Xbox LIVE service or servers are down when the Ethernet cable is removed from the console, DSL/Cable Modem, or HUB/Switch in any area of the title. 
•	The title enters a limited unresponsive state for over 120 seconds with animation when the Ethernet cable is removed from the console, DSL/Cable Modem, or HUB/Switch in any area of the game. 
•	The title enters a limited unresponsive state for over 60 seconds with a static screen when the Ethernet cable is removed from the console, DSL/Cable Modem, or HUB/Switch in any area of the game. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
96
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 96 Console-to-Console Network Performance
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Network Emulator for Windows Toolkit (NEWT) 
2.	Windows Internet Connection Sharing Host (PC)  
</Tools>
<Configuration>
Create the following profiles and save them for future use:
 
TCR 096 Profile 1: 64 kilobits/sec upstream and downstream.
•	Upstream and Downstream Setting: BW and Queue 
o	Bandwidth = 64 kbps 
o	Queue: 
	Drop Type = Drop Tail 
	Mode = Packet Mode 
	Normal Queue = 100 
 
TCR 096 Profile 2: 200ms round-trip latency.
•	Upstream and Downstream Setting: 
o	Fixed Latency = 100 ms 
 
TCR 096 Profile 3: 10% packet loss in a 10 sec interval.
•	Upstream and Downstream Loss: ‘Gilbert-Elliot’ 
o	Good State: 
	Loss Rate = 0 
	Transition Probability = 1 
o	Bad State: 
	Loss Rate = 0.1 
	Transition Probability = 1 
o	Time Slot = 10000ms 
 
TCR 096 Profile 4: 2% packet loss in general.
•	Upstream and Downstream Loss: Periodic Loss 
o	Lose one packet every = 50 packets 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Using NEWT, apply TCR 096 Profile 1 only to the host console. 
2.	Host a multiplayer game session (network performance of the joining player(s) must not be restricted). 
3.	Ensure that no voice data is being transmitted and play the session all the way to completion and if applicable, verify the ability to start the next session. Note that more than one client console may be required for certain game types. 
4.	Repeat steps 1 - 3 for each Xbox LIVE game mode supported. 
5.	Repeat steps 1 - 3 with TCR 096 Profile 2. 
6.	Repeat steps 1 - 3 with TCR 096 Profile 3. 
7.	Repeat steps 1 - 3 with TCR 096 Profile 4. 
8.	Using NEWT, apply TCR 096 Profile 1 only to a single client console. 
9.	Join a multiplayer game session (network performance of the host must not be restricted). 
10.	Ensure that no voice data is being transmitted and play the session all the way to completion and if applicable, verify the ability to start the next session. Note that more than one client console may be required for certain game types. 
11.	Repeat steps 8 - 10 for each Xbox LIVE game mode supported. 
12.	Repeat steps 8 - 10 with TCR 096 Profile 2. 
13.	Repeat steps 8 - 10 with TCR 096 Profile 3. 
14.	Repeat steps 8 - 10 with TCR 096 Profile 4. 
</Steps>
<Documentation>
1.	Network Emulator for Windows Toolkit Test Guide 
</Documentation>
<Result>
Players must be able to join a game session and stay connected for the entire duration of the session.
</Result>
<PassExamples>
•	All players are able to complete an Xbox LIVE gameplay session without being disconnected.
</PassExamples>
<FailExamples>
•	The Client and/or Host are disconnected during Xbox LIVE gameplay with any of the network performance conditions.
•	The Player is unable to join or Host an Xbox LIVE session with any of the 4 network performance conditions. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Minimum number of consoles required for a multiplayer game session 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
97
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 97 Console-to-Datacenter-Hosted Server Network Performance
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Network Emulator for Windows Toolkit (NEWT) 
2.	Windows Internet Connection Sharing Host (PC)  
</Tools>
<Configuration>
Create the following profiles and save them for future use:
 
TCR 097 Profile 1: 40 kilobits/sec upstream and downstream.
•	Upstream and Downstream Setting: BW and Queue 
o	Bandwidth = 40 kbps 
o	Queue: 
	Drop Type = Drop Tail 
	Mode = Packet Mode 
	Normal Queue = 100 
 TCR 097 Profile 2: 300ms round-trip latency.
•	Upstream and Downstream Setting: 
o	Fixed Latency = 150 ms 
 
TCR 097 Profile 3: 10% packet loss in a 10 sec interval.
•	Upstream and Downstream Loss: ‘Gilbert-Elliot’ 
o	Good State 
	Loss Rate = 0 
	Transition Probability = 
o	Bad State: 
	Loss Rate = 0.1 
	Transition Probability = 1 
o	Time Slot = 10000ms 
 
TCR 097 Profile 4: 2% packet loss in general.
•	Upstream and Downstream Loss: Periodic Loss 
o	Lose one packet every = 50 packets 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Ensure the title supports datacenter hosted gameplay. 
2.	Using NEWT, apply TCR 097 Profile 1 only to a single client console. 
3.	Join a datacenter-hosted game session (network performance of the host must not be restricted). 
4.	Ensure that no voice data is being transmitted and play the session all the way to completion and if applicable, verify the ability to start the next session. Note that more than one client console may be required for certain game types. 
5.	Repeat steps 2 – 4 for each Xbox LIVE game mode supported. 
6.	Repeat steps 1 – 3 with TCR 097 Profile 2. 
7.	Repeat steps 1 – 3 with TCR 097 Profile 3. 
8.	Repeat steps 1 – 3 with TCR 097 Profile 4. 
</Steps>
<Documentation>
1.	Network Emulator for Windows Toolkit Test Guide 
</Documentation>
<Result>
Players must be able to join a datacenter-hosted game session and stay connected for the entire duration of the session.
</Result>
<PassExamples>
•	The Player is able to join and play and/or complete a datacenter-hosted session. 
</PassExamples>
<FailExamples>
•	The Player is disconnected during a console-to-datacenter-hosted gameplay session with any of the network performance conditions. 
•	The Player is unable to join a console-to-datacenter-hosted gameplay with any of the network performance conditions. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Minimum number of consoles required for a multiplayer game session 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
98
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 98 NAT Type Interoperability
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	3 profiles (A, B and C) 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	With profile A, sign-in and create a multiplayer session while connected to Router 2. 
2.	With profile B, sign-in, and join the session while connected to Router 1. 
3.	With profile C, sign-in, and join the session while connected to Router 2.   
4.	With profile A, sign-in and create a multiplayer session while connected to Router 1. 
5.	With profile B, sign-in, and join the session while connected to Router 1. 
6.	With profile C, sign-in, and join the session while connected to Router 2. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Tools/Hardware for testing this requirement are not yet complete. However, it is in the game’s best interest to completely abide by this requirement, as failure to do so may cause issues in the future.
</Result>
<PassExamples>
None
</PassExamples>
<FailExamples>
None
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	NAT Hardware:  Router 1 – strict, Router 2 - open 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
99
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 99 Server Connectivity Loss
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Network Emulator For Windows Toolkit (NEWT) 
2.	Windows Internet Connection Sharing Host (PC) 
</Tools>
<Configuration>
1.	Xbox 360 Development/Test Kits x 3 (console 1, 2 and 3) connected to Xbox LIVE.  
</Configuration>
<Definition>
None
</Definition>
<Steps>
XLSP Connectivity Loss 
1.	Boot the title on 2 consoles. 
2.	On console 1 and 2, join the non-Xbox LIVE game server. 
3.	On console 3, progress into the Xbox LIVE menus. 
4.	Arrange for the non-Xbox LIVE game server to be shut down. 
5.	Verify that console 1, 2 and 3 display the correct error message. 
6.	With console 1 attempt to join the non-Xbox LIVE game server. 
7.	Verify the correct message is shown. 
Non-Xbox LIVE Web Service Connectivity Loss 
1.	Boot the title and identify game features dependent upon Non-Xbox LIVE Web Services. 
2.	Record the IP Addresses used for communicating with the Non-Xbox LIVE Web Services. 
3.	Use NEWT to block network traffic to the IP Addresses identified in Step [2]. 
4.	Attempt to access the Non-Xbox LIVE Web Service. 
5.	Verify the correct message is shown. 
</Steps>
<Documentation>
1.	Xbox 360 Terminology Guide 
2.	Network Emulator for Windows Toolkit Test Guide 
</Documentation>
<Result>
The player must be shown a message and this must be the appropriate message (See Terminology Guide for messages). 
</Result>
<PassExamples>
•	The title displays the message specified in the terminology guide when the Player attempts to access XLSP related functionality while the non-Xbox LIVE game server is unavailable. 
•	The title does not display a message when the non-Xbox LIVE game server is unavailable but the game’s XLSP functionality is transparent. Example: stat tracking, message of the day, etc. 
</PassExamples>
<FailExamples>
•	The title does not display the correct message specified in the terminology guide when the Player attempts to access XLSP related functionality while the non-Xbox LIVE game server is unavailable. 
•	The title blocks major game functionality and does not display a message indicating the reason for the error when the non-Xbox LIVE game server is unavailable. 
Example: The Player is unable to select certain menu options while the non-Xbox LIVE server is unavailable and the no message is displayed indicating the reason for the error. 
•	The title blocks unrelated functionality while the non-Xbox LIVE game server is unavailable. Example: The Player is unable to start a new singleplayer game while the non-Xbox LIVE server is unavailable. 
•	The title hardlocks or enters an extended unresponsive state when the non-Xbox LIVE game server is brought down while the Player is accessing XLSP functionality. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
102
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Networking: 102 System Link Play Interoperability
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	NetMon [Windows Network Monitor] 
</Tools>
<Configuration>
1.	Ensure that XbWatson, Perfmon, etc, are NOT running as these may give erroneous results. 
2.	Connect a Workstation running NetMon on the same hub as the Xbox 360 Development consoles 
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Connect 2 Xbox 360 Development consoles via a network hub. 
2.	Connect a PC running NetMon to the hub. 
3.	Using NetMon Initialize a network capture. 
4.	Launch the title on both consoles. 
5.	Initiate a System Link game session, and run the session for a few minutes. 
6.	Repeat for all system link modes.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Verify that the Network Monitor does NOT report any packets heading for non-Xbox destinations. 
Exceptions: The Xbox 360 Development Console may make DHCP and/or DNS requests at launch.
</Result>
<PassExamples>
•	The title only sends data to other Xbox consoles in the same System Link match. 
•	The title attempts to send data/make calls to the Xbox LIVE service when in a System Link mode, but a lack of connection to LIVE causes no adverse effects for the player and does not fail any other LIVE Service-related TCRs. 
•	The title attempts to post to Xbox LIVE Leaderboards after a System Link match and failure to connect results in no error or instability. 
</PassExamples>
<FailExamples>
•	The title requires a connection to the Xbox LIVE service to play in a System Link mode. 
•	The title attempts to post to the Xbox LIVE Leaderboards after a System Link match and failure to connect results in instability. 
•	The title pings or sends data to IP addresses that are not those of the Xbox LIVE service, an XLSP server for the title (if supported), or an Xbox in the same game. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Network Hub  
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
110
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 110 Exiting Demo
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Launch the demo from its launcher application. Note this may be the Xbox 360 Launcher. 
2.	Perform the following: 
a. Visit ALL levels/areas. 
b. Visit ALL menu/sub-menu options. 
c. Change ALL settings that are available. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The demo must provide the user with an option to exit the Demo and return to the launcher application. 
</Result>
<PassExamples>
•	The title contains an option to exit to the dashboard or launcher. 
•	The title is a standalone demo and includes an option to exit to the dashboard or launcher. 
•	The title is a standalone demo and does not include an option to exit to the dashboard or launcher. 
•	The player is required to exit to the main menu in order to access the exit option.
</PassExamples>
<FailExamples>
•	The title does not contain an option to exit to the dashboard or launcher. 
•	A marketplace only game does not include a UI option to return to the shell or launcher program. 
•	The title contains an option to exit but it is not always accessible. Example: You must complete the demo in order to get back to the exit option in the main menu.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
111
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 111 Timeout
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	Stopwatch 
2.	Set Demo Timeout Value tool in the Xbox 360 Launcher 
3.	Finished.xex from the SDK 
</Tools>
<Configuration>
1.	Check that all controllers function correctly [this is to insure that the controllers do not give false results]
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Using the Set Demo Timeout Value tool in the Xbox 360 Launcher, set a timeout value. 
2.	Place Finished.xex (located in the SDK in xedk\bin\xbox) in the same folder as the demo executable. 
3.	Emulate the demo bits. 
4.	Launch the title from the Xbox 360 Launcher whilst holding down the Right Trigger. 
5.	Obtain 3 time values for 'Timeout to Launcher' in the following locations while left UNATTENDED: 
After the END of the attract mode sequence, if featured, or from the Main Title, Press START Screen. 
•	From within gameplay while - UNPAUSED. 
•	From within gameplay while - PAUSED.  
</Steps>
<Documentation>
A training video is available for this test case at developer.xboxlive.com under Certification > Training Materials > Certification Video Series.
</Documentation>
<Result>
The demo must timeout from all locations after there has been no user interaction for the value specified in the Xbox 360 Launcher. It must time out to an Xbox Guide message stating “Finished. Your demo has exited successfully. Thank you.” 

This is not required for stand-alone demos.
</Result>
<PassExamples>
•	The title times out correctly using the value specified in the launcher. 
•	The title is a standalone demo and does not timeout. 
•	The title is designated for distribution solely on Xbox LIVE Marketplace 
</PassExamples>
<FailExamples>
•	“Finished: Your demo has exited successfully. Thank You.” is not displayed after the game times out. 
•	The title does timeout but it does so using a fixed time value and ignores the value specified by the launcher. 
•	A title intended to be distributed on a Kiosk does not timeout in any one of the following locations: Main menu, Initial Interactive State, Gameplay, Pause Menu.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
144
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Storage: 144 No Avatar Awards
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Load demo.
2.	Verify the Demo does not use avatar awards. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Demos must not use avatar awards.
</Result>
<PassExamples>
•	The demo does not distribute avatar awards.
</PassExamples>
<FailExamples>
•	The demo distributes avatar awards.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
125
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, System: 125 Preview Display
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Progress into an area where the player can use the Xbox LIVE Vision  camera to send video to other players. 
3.	Verify that there is a preview of the outgoing video available by default.   
</Steps>
<Documentation>
None
</Documentation>
<Result>
A preview of the outgoing video must be displayed by default.  
</Result>
<PassExamples>
•	The title displays a preview of outgoing video by default when the Player is using the Xbox LIVE Vision camera to send video to other Players. 
</PassExamples>
<FailExamples>
•	The title does not display a video preview of outgoing video by default. The Player must perform an action (change options setting, hold a button, etc.) in order to access the video preview. 
•	The title does not offer any way to view a preview of outgoing video when the Player is using the Xbox LIVE Vision camera to send video to other Players. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox LIVE Vision Camera  x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
126
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 126 Trial and Full Version - Trial Version
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon 
2.	ArcadeLicence.exe 
Default location = C:\Program Files\Microsoft Xbox 360 SDK\bin\win32\ArcadeLicense.exe 
Usage: ArcadeLicense {trial | full} contentpackage
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Trial Version Test 
1.	Copy the XBLA Package to a Local PC Example: C:\MyPackage\03E679C7F5892BFF99969EA029F6483277868F6E66) 
2.	Use ‘ArcadeLicense.exe’ to change the License type of the package to TRIAL: Example - C:\ArcadeLicense.exe trial C:\MyPackage\03E679C7F....7868F6E66 

Output: 
Microsoft(R) Xbox Live Arcade License Modification Tool 2.0.xxxx.0 Copyright (c) 2007 Microsoft Corporation. All rights reserved. 

Applying TRIAL license for content package "C:\MyPackage\03E679C7F....7868F6E66” Succeeded. 
3.	Place the TRIAL version content package to the Hard Drive: HDD:\Content\0000000000000000\[TitleID]\000D0000\ 
4.	Set APIMon to monitor XContentGetLicenseMask() 
5.	Start APIMon 
6.	Sign-in to Xbox LIVE and launch the game 
7.	Enter gameplay and verify that the Trial version doesn't: 
a. Award achievements 
b. Support downloadable content 
8.	Perform Sign-in Changes: 
a. Sign-in to Xbox LIVE 
b. Sign-out of Xbox LIVE 
c. Change profiles 
9.	Exit the Trial version and verify that it provides an option to purchase the Full version. 
10.	Select to purchase the Full version.
</Steps>
<Documentation>
1.	API Monitor Quick Guide
</Documentation>
<Result>
The game must call XContentGetLicenseMask() when the following actions occur: Game Launch, Signing in and purchasing the Full version (Trial version only).   

The Trial version does not create or access save games, write to leaderboards, reward achievements, support downloadable content or support Xbox LIVE multiplayer play.   

Note: The game may call XContentGetLicenseMask() in other areas in addition to the required areas.
</Result>
<PassExamples>
•	The trial version allows the Player to store user preference and control mappings in the Player's profile. 
•	The trial or full version of the title calls XContentGetLicenseMask() multiple times throughout the title.
•	The Full version of the title does not call XContentGetLicenseMask() when launching the title or at sign-in state changes. 
•	The trial version of the title does not call XContentGetLicenseMask() when the Player signs out. The trial version of the title calls XContentGetLicenseMask() when the Player signs-in at all 3 locations except prior to pressing START at the IIS. The trial version does call XContentGetLicenseMask() after pressing START.
</PassExamples>
<FailExamples>
•	The trial version of the title allows the player to earn achievements. 
•	The trial version of the title appears to be the same as the full version. 
•	The trial version of the title does not provide an option to purchase the full version when exiting the title. 
•	The trial version of the title allows the Player to download additional content. 
•	The trial version of the title does not call XContentGetLicenseMask() at any point during the game. 
•	The trial version of the title calls XContentGetLicenseMask() at title launch and at sign-in but not during an Xbox LIVE Marketplace purchase of the Full version. 
•	The trial version of the title calls XContentGetLicenseMask() at title launch and during an Xbox LIVE Marketplace purchase of the Full version but does not call at sign-in.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
126
</tcr_id>
<testcase_id>
CTC 2
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 2, User Interface: 126 Trial and Full Version - Full Version
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	APIMon 
2.	ArcadeLicence.exe
Default location = C:\Program Files\Microsoft Xbox 360 SDK\bin\win32\ArcadeLicense.exe 
Usage: ArcadeLicense {trial | full} contentpackage 
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
Full Version Test
1.	Copy the XBLA Package to a Local PC Example:
C:\MyPackage\03E679C7F5892BFF99969EA029F6483277868F6E66) 
2.	Use ‘ArcadeLicense.exe’ to change the License type of the package to FULL: Example - C:\ArcadeLicense.exe full C:\MyPackage\03E679C7F....7868F6E66

Output: Microsoft(R) Xbox Live Arcade License Modification Tool 2.0.xxxx.0 Copyright (c) 2007 Microsoft Corporation. All rights reserved.

Applying FULL license for content package "C:\MyPackage\03E679C7F....7868F6E66” Succeeded. 
3.	Place the FULL version content package to the Hard Drive: HDD:\Content\0000000000000000\[TitleID]\000D0000\ 
4.	Set APIMon to monitor XContentGetLicenseMask() 
5.	Start APIMon 
6.	Sign-in to Xbox LIVE and launch the game 
7.	Perform Sign-in Changes:
a. Sign-in to Xbox LIVE
b. Sign-out of Xbox LIVE
c. Change profiles 
</Steps>
<Documentation>
1.	API Monitor Quick Guide 
</Documentation>
<Result>
The game must call XContentGetLicenseMask() when the following actions occur: Game Launch, Signing in and purchasing the Full version (Trial version only).

The Trial version does not create or access save games, write to leaderboards, reward achievements, support downloadable content or support Xbox LIVE multiplayer play.

Note: The game may call XContentGetLicenseMask() in other areas in addition to the required areas.
</Result>
<PassExamples>
•	The trial version allows the Player to store user preference and control mappings in the Player's profile. 
•	The trial or full version of the title calls XContentGetLicenseMask() multiple times throughout the title. 
•	The Full version of the title does not call XContentGetLicenseMask() when launching the title or at sign-in state changes. 
•	The trial version of the title does not call XContentGetLicenseMask() when the Player signs out. 
•	The trial version of the title calls XContentGetLicenseMask() when the Player signs-in at all 3 locations except prior to pressing START at the IIS. 
•	The trial version does call XContentGetLicenseMask() after pressing START. 
</PassExamples>
<FailExamples>
•	The trial version of the title allows the player to earn achievements. 
•	The trial version of the title allows the player to create saved games. 
•	The trial version of the title allows multiplayer gameplay over Xbox LIVE. 
•	The trial version of the title appears to be the same as the full version. 
•	The trial version of the title does not provide an option to purchase the full version when exiting the title. 
•	The trial version of the title allows the Player to download additional content. 
•	The Player is able to access all Xbox LIVE features in the trial version of the title. 
•	The trial version of the title posts scores to the leaderboards. 
•	The trial version of the title does not call XContentGetLicenseMask() at any point during the game. 
•	The trial version of the title calls XContentGetLicenseMask() at title launch and at sign-in but not during an Xbox LIVE Marketplace purchase of the Full version. 
•	The trial version of the title calls XContentGetLicenseMask() at title launch and during an Xbox LIVE Marketplace purchase of the Full version but does not call at sign-in. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
127
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 127 Main Menu
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Trial version of Arcade game. 
2.	Full version of Arcade game.  
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	On console 1, launch the full version of the Arcade game. 
2.	Play the Arcade game in full mode and try to access all the menus. 
3.	On console 2, launch trial version of the Arcade game. 
4.	Play the Arcade game in trial mode and try to access all the menus. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
Console 1 should have all the full version menus. All the menus should be accessible.  Unlock full version should not be present.

On console 2 all the menus should be accessible.  Unlock full version should be present.  Multiplayer menu should give messaging to purchase the full version to access the functionality.  Download Content menu should give messaging to purchase the full version to access the functionality.

Other menu options are allowed in addition to the options called out in the TCR. Note that the exact terms used in the TCR are not required.
</Result>
<PassExamples>
•	The title includes the menu items as listed in the TCR but includes additional menu options which ARE compliant with the Terminology Guide. 
•	The title does not include a Download Content option in the Main menu and the title does not include a downloadable content feature. 
•	The title does not include a required menu option directly in the Main menu however the equivalent menu option is displayed on the same screen. 
•	The Menu items are not listed in order. 
•	The full version of the title does not include the Unlock Full Version menu option. 
</PassExamples>
<FailExamples>
  •	The title does not include a Download Content option in the Main menu and the title does include a downloadable content feature.
  •	The trial version of the title does not include the Unlock Full Game or equivalent menu option.
  • The title doesn’t include one or more of the following required main menu options (or an equivalent option) on the main menu:

  Leaderboards
  Achievements
  Unlock Full Game (only required for the trial version of a paid title)
  Exit Game

</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	2 Xbox 360 Development/Test Kits (console 1 and 2) 
2.	2 controllers  
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
130
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, User Interface: 130 Leaderboard Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
1.	Full version of Arcade game 
2.	2 profiles that are friends (profile A and B)  
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Launch the full version of the Arcade game.  Play the game long enough to post to the leaderboard with profile A. 
2.	Launch the full version of the Arcade game.  Play the game long enough to post to the leaderboard with profile B. 
3.	Look at all the leaderboards in the game. 
4.	Look at the title information in the Arcade section of the dashboard. 
</Steps>
<Documentation>
How to determine which leaderboard is shown in the Xbox Dashboard:
1.	Open the game configuration file using the Xbox LIVE Game Configuration tool. 
2.	From the Leaderboards view, select a leaderboard. A list of the leaderboard’s parameters will be displayed in a separate frame. 
3.	Search for a row that has the Arcade box checked. This is shown in the 8th column from the left. 
4.	Check each leaderboard in turn until the Arcade leaderboard is found. 
</Documentation>
<Result>
After step [1], profile A’s score should be visible in the Friends, Overall and My Score views on the in-game leaderboard.  Profile B should not be listed in any of the views since profile B has not yet played the game.
After step [2], profile A and profile B should now be listed in all three views.
After step [3], all leaderboards in the game should have a view for Friends, Overall and My Score.
After step [4], the leaderboard for the Arcade game in the Arcade section of the dashboard should show profile A and profile B.
</Result>
<PassExamples>
•	The title includes additional leaderboards. 
•	The title includes a Friends view however it is labeled My Friends instead of Friends. 
</PassExamples>
<FailExamples>
•	The title does not support leaderboards. 
•	The title does not include a Friends view, an Overall view and a My Score view. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	1 Xbox 360 Development/Test Kit 
2.	1 controller 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
146
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 146 Manual Sensor Adjustment
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Use the Kinect Tuner to automatically setup the sensor array. 
2.	Boot the title. 
3.	Navigate through all game functionality. 
4.	Verify that the title never instructs the player to manually interact with the sensor at any point. 
5.	Use the Kinect Tuner to manually adjust the sensor tilt position so that the player’s head and shoulders are not visible. 
6.	Restart the title. 
7.	Attempt to interact with the title. 
8.	Verify that the title never instructs the player to manually interact with the sensor at any point. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should never compel the player to manually move, reposition or rotate the sensor.
 
In the event that gameplay cannot continue with the current sensor position, it is acceptable to suggest that the user runs the system provided Troubleshooter.  Manual adjustment of the sensor during the troubleshooting process is a system function and is permissible.
 
The title should not provide guidance on sensor placement that may compel the player to move the Kinect Sensor.
</Result>
<PassExamples>
•	The title never instructs the player to directly interact with the sensor hardware.
•	The title provides the option to launch the troubleshooter that may in turn suggest movement or repositioning of the sensor.
</PassExamples>
<FailExamples>
•	The title instructs the player to directly interact with the sensor hardware. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1
2.	Kinect Sensor x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
147
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 147 Playable Distance
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
Mark two reference points on the floor, at 180cm and 250cm from the front of the sensor and centered in the sensor’s field of view. 
 
Testers should stand with their toes on the appropriate reference point for the purposes of this test case.
 
If the Kinect Tuner does not position the sensor so that the player’s head is fully visible, use manual adjustment to correct it.
Ensure that the Kinect Sensor is placed between 5ft and 6ft above floor level.
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Position the Kinect Sensor at a vertical height between 150cm and 183cm.  Use the Kinect Tuner to setup the sensor array with the player standing at 183cm from the Kinect Sensor. (use the options to adjust tilt to show the player’s head if necessary). 
2.	Boot the title. 
3.	Ensure that the tester is as close as possible to 183cm tall but no taller. 
4.	Enter all game modes and verify that gameplay can proceed with the tester playing as close to the 180cm as possible. 
5.	Enter all game modes that support two simultaneous players and verify that gameplay can proceed with the tester playing as close to 250cm as possible. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The tester(s) should be able to play the entire title at the minimum specified distances (180cm single player and 250cm for two players).
</Result>
<PassExamples>
•	The title is playable in all game modes by a 183cm tall tester standing at 180cm from the front of the sensor. 
•	The title is playable in all simultaneous multiplayer game modes by two 183cm tall testers standing at 250cm from the front of the sensor. 
•	Optional game features are less reliable or unavailable in the specified configuration. 
</PassExamples>
<FailExamples>
•	The title is not playable in one or more game modes by a 183cm tall tester standing at 180cm from the front of the sensor. 
•	The title is not playable in one or more simultaneous multiplayer game modes by two 183cm tall testers standing 250cm from the front of the sensor. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
148
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 148 Tuner Access
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Ensure that a message is displayed on the Initial Interactive State or front end menu system that informs the player which button they should press on a controller to launch the Kinect Tuner. 
3.	Verify that this button launches the troubleshooter as expected using a controller connected to all four quadrants. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player must be given the opportunity to access the NUI troubleshooter at the IIS or the front end menu system at a minimum. The player needs to be notified about the method for accessing the Kinect Tuner and should be able to invoke the NUI troubleshooter using any connected controller.  
</Result>
<PassExamples>
•	The player can invoke the Kinect Tuner with any connected controller. 
•	The title provides instructions on which button to press on either the initial interactive state or the front end menu system. The title also provides a menu option to access the Kinect Tuner that can be selected with any controller. 
•	The title provides the option to launch the Kinect Tuner in additional locations. 
Kiosk Only Demo 
•	The title does not provide the player with a way to invoke the Kinect Tuner prior to entering gameplay. 
</PassExamples>
<FailExamples>
•	The player cannot invoke the Kinect Tuner on any controller. 
•	The player can only invoke the Kinect Tuner on a controller connected to specific controller quadrants. 
•	The title does not provide instructions on which button to press on both the initial interactive state and the front end menu system. Alternatively, the title provides a menu option to access the Kinect Tuner that can be selected with any controller.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
3.	Controllers x 4 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
149
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 149 Tuner Player Interaction
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	In all areas of the title verify that the following conditions do not cause the title to automatically invoke the Kinect Tuner. 
a. Player closer than 1m from the sensor.
b. Player moving out of sensor range. 
c. RGB sensor covered. 
d. IR sensor covered. 
e. IR emitter covered. 
f. New player entering the playspace. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should never automatically invoke the Kinect Tuner. 
In the event that gameplay cannot continue, it is acceptable to ask the player if they would like to invoke the Kinect Tuner and then proceed to launch it.  The player should always have the option to continue without launching the Kinect Tuner.
</Result>
<PassExamples>
•	The troubleshooter is never launched without user confirmation that they want to perform this action.
•	The system launches the troubleshooter.
</PassExamples>
<FailExamples>
•	The title offers the option to launch the troubleshooter but does not provide the option to continue without performing troubleshooting.
•	The title invokes the troubleshooter without being requested by the player.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
150
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 150 Props Usage
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Enter all game modes and verify the following:
a. The player can proceed through gameplay without the use of a prop or peripheral. 
b. The player is never required to change clothing in order to continue.
c. Any areas that support props can be bypassed without disadvantaging the player. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should be completely playable with just the player as the controller.  The player should never be required to use props, peripherals or specific clothing to play.
 
Games may include functionality that detects specific objects but the player should not be prevented from completing the game if they choose not to use these features.
</Result>
<PassExamples>
•	The title does not require the use of props or specific clothing in order to continue with gameplay.
•	The title allows objects to be detected and used but does not disadvantage players that choose not to use them.
</PassExamples>
<FailExamples>
•	The title requires the use of specific props or clothing in order to proceed with gameplay.
•	The title allows objects to be detected and used but disadvantages players that choose not to use them.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
151
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 151 Local Preview
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Create a multiplayer session with two consoles and enter gameplay. 
3.	Verify the following:
a. Does any video from either the RGB sensor or the depth sensor appear on another player’s console?
b. Do any still images from either the RGB sensor or the depth sensor appear on another player’s console?
c. Are the player’s movements mimicked by their character on another player’s screen? 
4.	Repeat steps 2 and 3 for all multiplayer game modes. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the title has any features listed in step 3, the player should be given a preview of any data that is being sent.  
For video, the title should display a live preview on screen at all times when video is being transmitted.
For images, the player should be shown the images that are being transmitted.
For skeletal or animation data, the player should be able to see their character on screen performing the same movements that are being seen by other players in the session.
</Result>
<PassExamples>
•	The title displays a preview of any sensor data that is being sent to other users or online services.
•	The title triggers stock animations on another player’s console in response to player interaction.
•	The title offers the option to disable preview functionality and the preview functionality is enabled by default. 
</PassExamples>
<FailExamples>
•	The title does not display a preview of any sensor data that is being sent to other players or online services.
•	The title offers the option to disable the preview functionality and the preview functionality is disabled by default.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kits x 2
2.	Kinect Sensors x 2
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
152
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 152 Kinect Guide Access
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Use the guide gesture in the following areas and verify that either the Kinect Guide is launched or a menu is displayed with the option to launch the Kinect Guide.
a. Initial Interactive State
b. Game Menus
c. During singleplayer gameplay (if supported)
d. During multiplayer gameplay (if supported)
e. During Load screens
f. During boot logos and animations 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player should be able to access and use the Kinect Guide using only the sensor for input.
In areas where the title supports a pause menu, this should be launched in response to the guide gesture and should contain an option to launch the Kinect Guide.
</Result>
<PassExamples>
•	The title launches the Kinect Guide directly when the guide gesture is used in a menu. 
•	The title launches the Kinect Guide directly when the guide gesture is used during gameplay that does not support a pause or settings menu. 
•	The title opens a menu that contains an option to launch the Kinect Guide when the guide gesture is used during gameplay. 
•	The title does not pause in response to the guide gesture in areas where a pause menu is not supported. 
</PassExamples>
<FailExamples>
•	The title activates the Kinect Guide directly and has an in-game pause menu that is not activated by the system gesture. 
•	The title activates a pause menu that does not contain an option to launch the Kinect Guide. 
•	The title does not respond to the Guide Gesture after the first 15 seconds after launch.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
153
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 153 Kinect System UI
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Navigate through all areas where natural input can be used to control the game and verify that the title doesn’t invoke a system UI that requires the use of a controller.  Ensure that the “controller-required” UI is displayed before any system UI that does require a controller.  The following are examples of functionality that should be investigated. 
a.  Kinect Guide.
b.  Sign in / Sign out.
c.  Marketplace features and purchase UIs.
d.  System error messaging.
e.  Friends lists and multiplayer functions.
f.  Device selection. 
g.  Kinect Tuner.
h.  Any other System UI invoked by the title.
3.	For every occasion where the title invokes a system UI, verify that the active player does not have to perform the "wave" gesture to interact with the UI. 
4.	For titles that also support navigation using a controller, use it to navigate through all areas of the game and verify that the title never invokes a system UI that requires the use of Natural Input.  The following are examples of functionality that should be investigated. 
a.  Sign in / Sign out.
b.  Marketplace features and purchase UIs.
c.  System error messaging.
d.  Friends lists and multiplayer functions.
e.  Device selection. 
f.  Any other System UI invoked by the title where equivalent XShow* functions exist.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Where available, the title should launch system UIs that are Natural Input enabled wherever the player is using his or her body as the controller.  The active player should never have to "wave" to activate any resulting user interface.
Titles that support UI navigation using a controller should display the controller-based guide function when invoked using a controller.
</Result>
<PassExamples>
•	The Kinect Guide can be navigated using the sensor array in all areas of the title. 
•	All system UIs launched by a player using Natural Input are Natural Input enabled. 
•	All system UIs launched by a player using the controller are controller enabled. 
•	The active player never has to "wave" to enable navigation in any Natural Input enabled UI. 
•	The title invokes a system UI that requires a controller and displays the “controller required” UI first. 
</PassExamples>
<FailExamples>
•	The player cannot navigate through the Kinect Guide in one or more areas of the title. 
•	When launched through Natural Input, one or more system UI is launched that requires the controller to operate. 
•	When launched through the controller, one or more system UI is launched that requires Natural Input to operate. 
•	The title launches a Natural Input system UI that requires the active player to "wave" to operate. 
•	The title does not display the controller required UI when the player invokes the Kinect Tuner while using natural input. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development or Test Kit x 1
2.	Kinect Sensor x 1
3.	Xbox 360 Controller x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
154
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 154 Title Interaction with System Gesture
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Activate the Kinect Guide using the guide gesture in the following areas:
a. Initial Interactive State
b. Game Menus
c. During singleplayer gameplay (if supported)
d. During multiplayer gameplay (if supported)
e. During Load screens
f. During boot logos and animations 
3.	For each area listed in step 2, exercise any available game functionality and verify that the guide gesture is not accidentally activated. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player should be able to activate the Kinect Guide using the guide gesture.
 
It is permissible for the title to temporarily disable the guide gesture to prevent conflicts with gameplay interactions. 
 
The guide gesture should not be inadvertently activated during the normal course of interacting with the title.
</Result>
<PassExamples>
•	The Kinect Guide can be activated using the guide gesture in all areas of the title.
•	The title temporarily disables the use of the guide gesture in areas where it would conflict with gameplay interactions.
</PassExamples>
<FailExamples>
•	The Kinect Guide cannot be activated using the guide gesture in one or more areas of the title.
•	The guide gesture is accidentally activated during the course of normal gameplay or menu interaction.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1
2.	Kinect Sensor x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
156
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 156 Speech Recognition Language Support
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Set the console to an unsupported combination of locale and language. 
2.	Boot the title. 
3.	Verify that one of the following approaches is applied:
 a. Speech functionality is disabled and alternative control mechanisms are provided (messaging is optional).
 b. The player is allowed to choose from one of the supported languages and is notified that their experience is not optimal.
c. The player is notified that their language is not supported and that gameplay cannot continue. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
The title should inform the player when their console's combination of locale and language is not directly supported. A player in this position should be able to continue to play using alternative means of interaction.
</Result>
<PassExamples>
•	Speech functionality is disabled and alternative control mechanisms are provided (messaging is optional). 
•	The player is allowed to choose from one of the supported languages and is notified that their experience may not be optimal. 
•	The player is notified that their console's language is not supported and that gameplay cannot continue.
</PassExamples>
<FailExamples>
•	The title does not inform the player when their console's combination of locale and language is not supported and no alternative functionality is available.
•	The title allows the player to choose from one of the supported languages but is not notified that their experience will not be optimal.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
158
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 158 Identity Player Feedback
</short_description>
<Requirements>
None
</Requirements>
<Tools>
1.	API Monitor (optional) 
</Tools>
<Configuration>
API Monitor can be used to provide additional context in titles that use standard identity.  Steps for validating the type of identity being used by a title can be found in the configuration section of the TCR165 test case.  The following APIs may be useful:
NuiIdentityIdentify
NuiIdentityEnroll 
NuiInitialize
Use the Kinect ID feature in the dash to create biometrically enabled gamer profiles where needed.
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Cold restart the console and boot the title.
2.	Perform the following steps in all areas of the title that support the introduction of new players. 
a. Attempt to join the game using a player that has a biometric profile on the console.
     i. Verify that the player has an opportunity to correct their identity before they have the opportunity to undertake any profile dependent actions.
b. Attempt to join the game using a player that has been signed in via the Kinect Guide prior to starting the title.
     i. Verify that the title indicates that they are identified as the gamer profile that was already signed in or indicates to the player that they have not been identified by the title.
     ii. Verify that the player has an opportunity to correct their identity before they have the opportunity to undertake any profile dependent actions. 
</Steps>
<Documentation>
1.	API Monitor Quick Guide 
</Documentation>
<Result>
When a new player is identified by the title, the player should be notified about the result.  The title should provide means to change their identity before they have the opportunity to undertake any profile dependent actions.
Relevant profile dependent actions include:
                Saving
                Achievements
                Rich Presence
                Xbox LIVE Storage
                Leaderboards
</Result>
<PassExamples>
•	The title notifies the player as to the result of the identification operation. 
•	The title does not notify the player as to the result of the identification operation when using a biometrically enabled profile (the system notification is sufficient). 
•	The title provides the opportunity for the player to correct their identity before they have the opportunity to undertake any profile dependent actions. 
•	The title allows the player to correct their identity by invoking the Kinect Guide’s Sign in page. 
</PassExamples>
<FailExamples>
•	The title does not notify the player as to the result of the identification operation for a non-biometric player. 
•	The title does not provide the opportunity for the player to correct their identity before they have the opportunity to undertake any profile dependent actions. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit x 1
2.	Kinect Sensor x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
160
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 160 In-Game Representation of Sensor Array
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title. 
2.	Navigate through all game functionality. 
3.	Look for any visual references of the Kinect sensor and verify the following:
a. Iconic Representations (non-realistic) should use an approved image as a base and may optionally change the coloring or styling.
b. Realistic Representations should match the color, styling and proportions of the real sensor device.  The device should accurately show the three circular lenses that appear on the retail device. 
</Steps>
<Documentation>
1.	The approved imagery is available on Microsoft Prosource (https://www.microsoftprosource.com/). 
</Documentation>
<Result>
Visual references to the Kinect Sensor should match the guidelines for either Iconic or Realistic representations.
 
Iconic representations should largely match the icon shown in the TCR but may use a different color scheme.
 
Realistic representations should match the Kinect Sensor.
</Result>
<PassExamples>
•	The title displays an iconic representation of the Kinect Sensor that follows the proportions and shading of the iconic image in the TCR.
•	The title displays a realistic representation of the Kinect Sensor that matches the color, styling and proportions of the real device.
•	The title displays an iconic representation of the Kinect Sensor that follows the proportions and shading of the iconic image in the TCR but applies a different color scheme.
</PassExamples>
<FailExamples>
•	The title displays an iconic representation of the Kinect Sensor that does not follow the proportions and shading of the iconic image in the TCR.
•	The title displays a realistic representation of the Kinect Sensor that does not match the color, styling and proportions of the real device.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1
2.	Kinect Sensor x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
161
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 161 Player-Created Content
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Boot the title.
2.	Navigate through all game functionality and identify any areas that enable the upload of player created content that incorporates any data from the Kinect Sensor.  This does not include any content that is transmitted in real-time during gameplay as this is covered under TCR 151.
3.	Create a piece of content for each upload feature and perform the following checks: 
a.  Ensure that the player can preview the content being transmitted prior to upload.
b.  Ensure that the player is notified where the content is being transmitted.
c.  Ensure that the player can choose not to transmit the content.
d.  Ensure that the player cannot upload content containing data from other players without TCR 161 being followed on the other player’s console (for example, uploading a replay of a multiplayer session).
</Steps>
<Documentation>
None
</Documentation>
<Result>
The player should always have the opportunity to review any content being transmitted prior to upload.  The player should also know where the content is being sent.
</Result>
<PassExamples>
•	The title allows the player to preview the content prior to upload.
•	The title allows the player to cancel the upload of content.
•	The title notifies the player where the content is being sent.
</PassExamples>
<FailExamples>
•	The title does not allow the player to preview the content prior to upload.
•	The title does not allow the player to cancel the upload of content.
•	The title does not notify the player where the content is being sent.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1
2.	Kinect Sensor x 1
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
164
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 164 Content Sharing Outside of Xbox LIVE
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Ensure that the “share content outside Xbox LIVE” flag is turned off for the profile being used. 
2.	Boot the title. 
3.	Navigate through all game functionality and identify any areas that allow player created content captured by the Kinect sensor or LIVE Vision camera to be uploaded to online services. 
4.	Verify that no content is able to be shared. 
5.	Repeat steps 1 – 4 but with multiple profiles signed in and the profile with the restriction as an idle profile. 
6.	Perform the following steps if the title supports the upload of content that includes participation from other players in a multiplayer session. 

a.  Create a session where one player has the “share content outside Xbox LIVE” flag turned off.

b.  Ensure that it is not possible for any player in the session to upload content that includes data from the player who has “share content outside Xbox LIVE” flag turned off. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If the share content outside LIVE flag is turned off, no player created content captured by the Kinect sensor or LIVE Vision camera should be shared with any online services.
</Result>
<PassExamples>
•	The title obeys most restrictive setting of the share content outside LIVE flag on all signed-in profiles. 
</PassExamples>
<FailExamples>
•	The title allows Kinect player created content to be uploaded despite restriction of the share content outside LIVE flag. 
•	A player in a multiplayer session can upload content that includes data from a player who has the “share content outside Xbox LIVE” flag turned off.
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development/Test Kit x 1 
2.	Kinect Sensor x 1 
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
165
</tcr_id>
<testcase_id>
CTC 3
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 3, Kinect: 165 Biometric Sign-in
</short_description>
<Requirements>
None
</Requirements>
<Tools>
None
</Tools>
<Configuration>
API Monitor should be used to monitor the following APIs:
NuiIdentityIdentify
NuiIdentityEnroll 
NuiIdentityDetectedIntentToPlay
Title support for Automatic Identity can be determined by monitoring for calls to NuiIdentityDetectedIntentToPlay. This API is only used in conjunction with the Automatic Identity system.
Use the Kinect ID feature in the dash to create biometrically enabled gamer profiles where needed. 
Place all biometric profiles on a removable storage device to facilitate testing. Also ensure that there are several non-biometric profiles available on another connected storage device.
</Configuration>
<Definition>
Active Profile - A gamer profile associated with an active player that is tracked by the title for rich presence, achievements, and/or save data.
Hybrid Title - A title that requires both NUI and controller input for gameplay.
Lead Profile - The active profile in a title that supports additional tracked players who are not tied to a profile.
</Definition>
<Steps>
1.	Start API Monitor and begin monitoring the APIs listed in "configuration." 
2.	Boot the title with no profiles signed in via Kinect or a controller. 
3.	Navigate through the title and determine any areas where the title supports the addition of a player using Kinect. For example, the title may support the addition of Kinect players through one or more of the following: 
a. Initial Interactive State 
b. New Game UI
c. Lobby
d. Mid-game drop-in drop-out
e. Multiplayer UI
f. Controller -> Kinect switchover points
g. UI that starts a distinct "Kinect game mode" 
4.	For hybrid titles, determine whether it is possible to navigate to any of the above areas without being prompted to sign-in using the controller. 
5.	For each area where the title supports new Kinect players perform the following steps: 
a. Join with a Kinect ID enabled player and ensure that they are identified with the correct profile. 
b. If multiple active profiles are supported, continue to add Kinect ID enabled players until all slots are filled.
c. Sign-out of all profiles and remove the storage device containing them.
d. Join again without biometric profiles available and ensure that the option to select a profile is available. 
e. Confirm that the title did not call NuiIdentityEnroll without user input after step 5d.
f. If multiple active profiles are supported, continue to add non-Kinect ID players until all slots are filled. 
</Steps>
<Documentation>
None
</Documentation>
<Result>
If saving or achievements are supported for a player and their profile has not already been established, they should be identified using the Kinect sensor. 

Titles are not required to support saving and achievements for every player in the session.  It is acceptable for a "lead profile" to be used for saving and achievement purposes.  If saving or achievements are supported for additional players they should be identified via the Kinect sensor. 

Once profile(s) have been established for a game session, it is acceptable to allow other players to stand-in for the active player.

Hybrid titles that prompt all active players to sign-in using a controller prior to taking any profile specific actions are exempt from this requirement.
</Result>
<PassExamples>
•	The title enrolls each Kinect ID enabled player that shows intent to play, up to the maximum number of active profiles supported by the title. 
•	The title does not enroll guest players. 
•	The title displays the Kinect Sign-in UI when a player does not have a Kinect ID or is misidentified. 
•	After the active profiles for a session have been determined, the title allows other players to “stand-in” for another player. 
</PassExamples>
<FailExamples>
•	The title does not biometrically enroll a new player when the title supports saving/achievements for that player. 
•	The title does not allow non-biometric players to select a profile to use. 
•	The title manually enrolls unrecognised players as guests without first confirming that the player intends to play without a profile. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
None
</Hardware>

  </CTC>
  <CTC>
    <tcr_id>
166
</tcr_id>
<testcase_id>
CTC 1
</testcase_id>
<type>
Compliance
</type>
<short_description>
Compliance 1, Kinect: 166 Identity Maximum Delay
</short_description>
<Requirements>
Test Case Update Pending.
</Requirements>
<Tools>
None
</Tools>
<Configuration>
None
</Configuration>
<Definition>
None
</Definition>
<Steps>
1.	Cold restart the console and boot the title (do not enter the playspace until the title has booted and is awaiting input). 
2.	Perform the following steps in all areas of the title that support the introduction of new players. 
a.  Enter the playspace with the player’s face fully obscured (using a hood or mask with no facial features).
b.  Perform any action that is required to “show intent to play” and begin timing using a stopwatch.
c.  Ensure that the title offers the opportunity to select a profile and proceed within 15 seconds.
</Steps>
<Documentation>
None
</Documentation>
<Result>
Players should not be prevented from entering gameplay when identity cannot complete.  A player should not be forced to wait for more than 15 seconds before they can proceed.
</Result>
<PassExamples>
•	The title allows the player to proceed immediately. 
•	The title allows the player to proceed within 15 seconds. 
•	The title provides feedback to the player to help fix the problems with identity but still allows the player to proceed within 15 seconds if the player takes no action. 
 
</PassExamples>
<FailExamples>
•	The title blocks the player from proceeding into gameplay when identity fails to complete. 
•	The title takes longer than 15 seconds to allow the player to proceed when identity fails to complete. 
</FailExamples>
<NAExamples>
None
</NAExamples>
<Analysis>
None
</Analysis>
<Faq>
None
</Faq>
<Hardware>
1.	Xbox 360 Development Kit or Test Kit x 1 
2.	Kinect Sensor x 1 
3.	Stopwatch 
</Hardware>

  </CTC>
</Tables>